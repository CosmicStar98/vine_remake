define("vine-ember/app", ["exports", "ember", "ember/resolver", "ember/load-initializers", "vine-ember/config/environment"], function (e, t, a, n, r) {
    "use strict";
    var i;
    t["default"].MODEL_FACTORY_INJECTIONS = !0, "development" === r["default"].environment && (t["default"].deprecate = function () {}), i = t["default"].Application.extend({
        modulePrefix: r["default"].modulePrefix,
        podModulePrefix: r["default"].podModulePrefix,
        Resolver: a["default"]
    }), n["default"](i, r["default"].modulePrefix), e["default"] = i
}), define("vine-ember/components/animated-button", ["exports", "ember"], function (e, t) {
    "use strict";
    var a = t["default"].Component.extend({
        tagName: "button",
        classNames: ["action", "clear"],
        classNameBindings: ["isActive:active", "actionName"],
        attributeBindings: ["disabled:disabled"],
        disabled: !1,
        iconClass: function () {
            return this.get("actionName") ? "icon-" + (this.get("iconName") || this.get("actionName")) : void 0
        }.property("actionName"),
        click: function () {
            "view" === this.get("actionTarget") ? this.get("parentView").send(this.get("action")) : this.sendAction();
            var e = this.$();
            this.get("isActive") ? (e.removeClass("activated"), setTimeout(function () {
                e.addClass("deactivated")
            })) : (e.removeClass("deactivated"), setTimeout(function () {
                e.addClass("activated")
            }))
        }
    });
    e["default"] = a
}), define("vine-ember/components/cdn-img", ["exports", "ember"], function (e, t) {
    "use strict";
    var a = t["default"].Component.extend({
        tagName: "img",
        attributeBindings: ["cdnPath:src", "width", "height", "style", "alt", "data-parralax"],
        cdnPath: function () {
            return this.get("config.ASSETS_CDN_PREFIX") + this.get("src")
        }.property("config.ASSETS_CDN_PREFIX", "src")
    });
    e["default"] = a
}), define("vine-ember/components/channel-badge", ["exports", "ember"], function (e, t) {
    "use strict";
    var a = t["default"].Component.extend({
        classNames: "channel-badge",
        classNameBindings: ["size"],
        attributeBindings: ["backgroundStyle:style"],
        mouseEnter: function (e) {
            var t = this._headerForEvent(e);
            this.set("originalText", t.text()), t.text(this.get("channel"))
        },
        mouseLeave: function (e) {
            var t = this._headerForEvent(e);
            t.text(this.get("originalText"))
        },
        _headerForEvent: function (e) {
            return t["default"].$(e.target).closest(".channels-container").prev()
        }
    });
    e["default"] = a
}), define("vine-ember/components/channel-hover", ["exports", "ember"], function (e, t) {
    "use strict";
    var a = t["default"].Component.extend({
        tagName: "span",
        mouseEnter: function () {
            this.$().css("color", "#" + this.get("color"))
        },
        mouseLeave: function () {
            this.$().css("color", "")
        }
    });
    e["default"] = a
}), define("vine-ember/components/comment-form", ["exports", "ember"], function (e, t) {
    "use strict";
    var a = t["default"].Component.extend({
        tagName: "form",
        classNames: "comment",
        classNameBindings: ["commentCount:has-comments"],
        action: "comment",
        submit: function (e) {
            return e.preventDefault(), e.stopPropagation(), "view" === this.get("target") ? void this.get("parentView").send(this.get("action"), this.get("commentText")) : void this.sendAction(this.get("commentText"))
        }
    });
    e["default"] = a
}), define("vine-ember/components/custom-styles", ["exports", "ember"], function (e, t) {
    "use strict";
    var a = t["default"].Component.extend({
        didInsertElement: function () {
            this.send("generateStyleTag")
        },
        modelChanged: function () {
            t["default"].run.scheduleOnce("afterRender", this, function () {
                this.send("generateStyleTag")
            })
        }.observes("modelId"),
        actions: {
            generateStyleTag: function () {
                var e = this.$(".custom-styles").text(),
                    t = $("<style></style>").text(e);
                this.$("style").remove(), this.$().append(t)
            }
        }
    });
    e["default"] = a
}), define("vine-ember/components/download-buttons", ["exports", "ember"], function (e, t) {
    "use strict";
    var a = t["default"].Component.extend({
        classNames: ["download-buttons"],
        goToStore: "goToStore",
        didInsertElement: function () {
            var e = this.get("targetObject.controllers.application.deviceType");
            e && this.$(".download-button:not([data-device='" + e + "'])").hide()
        },
        actions: {
            goToStore: function (e) {
                var t;
                this.$().closest(".modal.login").length && (t = "login modal"), this.sendAction("goToStore", e, t)
            }
        }
    });
    e["default"] = a
}), define("vine-ember/components/follow-button", ["exports"], function (e) {
    "use strict";
    var t = Ember.Component.extend({
        tagName: "button",
        classNames: "clear",
        classNameBindings: ["cssClass", "user.following:following:follow", "user.followRequested:follow-requested"],
        gaq: "gaq",
        doAuthenticatedAction: "doAuthenticatedAction",
        cssClass: "follow-button",
        userIdStr: Ember.computed.alias("user.userIdStr"),
        "private": Ember.computed.alias("user.private"),
        following: Ember.computed.alias("user.following"),
        followRequested: Ember.computed.alias("user.followRequested"),
        click: function () {
            this.send("follow")
        },
        isVisible: function () {
            return !this.get("session").isCurrentUser(this.get("userIdStr"))
        }.property("session.userId", "userIdStr"),
        isLarge: function () {
            return "follow-button-large" === this.get("cssClass")
        }.property("cssClass"),
        _doFollow: function () {
            this.get("followRequested") || this.get("following") ? (this.get("services.user").unFollow(this.get("userIdStr")).then(function () {
                this.get("user").setProperties({
                    following: 0,
                    followRequested: 0
                })
            }.bind(this)), this.sendAction("gaq", ["_trackEvent", "User", "unfollow"])) : (this.get("services.user").follow(this.get("userIdStr")).then(function () {
                this.get("private") && this.set("user.followRequested", 1), this.set("user.following", 1)
            }.bind(this)), this.sendAction("gaq", ["_trackEvent", "User", "follow"]))
        },
        actions: {
            follow: function () {
                this.sendAction("doAuthenticatedAction", "follow this user", this._doFollow.bind(this))
            }
        }
    });
    e["default"] = t
}), define("vine-ember/components/header-logo", ["exports", "ember"], function (e, t) {
    "use strict";
    var a = t["default"].Component.extend({
        action: "scrollToTop",
        click: function (e) {
            (this.$("a").hasClass("active") || this.get("isMobile")) && this.sendAction()
        }
    });
    e["default"] = a
}), define("vine-ember/components/link-user", ["exports", "ember"], function (e, t) {
    "use strict";
    var a = t["default"].Component.extend({
        classNameBindings: ["className"],
        tagName: "span",
        likes: !1,
        routeInfo: function () {
            var e, t, a = this.get("user.vanityUrls");
            return a && a.length > 0 ? (e = "user", t = a[0]) : (e = "user-fallback", t = this.get("user.userIdStr")), {
                name: e,
                param: t
            }
        }.property("user.vanityUrls", "user.userIdStr", "likes")
    });
    e["default"] = a
}), define("vine-ember/components/linkify-entities", ["exports", "ember", "vine-ember/utils/emojify"], function (e, t, a) {
    "use strict";
    var n = {
            mention: !0,
            tag: !0,
            channel: !0
        },
        r = t["default"].Component.extend({
            tagName: "span",
            linkifiedEntities: function () {
                var e = this.get("text"),
                    r = this.get("entities");
                if (!r) return [new t["default"].Handlebars.SafeString(a["default"](t["default"].Handlebars.Utils.escapeExpression(e)))];
                var i = [],
                    d = 0;
                r.sort(function (e, t) {
                    return e.range[0] - t.range[0]
                });
                for (var s = 0; s < r.length; s++) {
                    var c = r[s];
                    if (n[c.type]) {
                        var o = e.kmwSubstring(d, c.range[0]);
                        i.push(new t["default"].Handlebars.SafeString(a["default"](t["default"].Handlebars.Utils.escapeExpression(o))));
                        var l, h, u = new t["default"].Handlebars.SafeString(c.title || "");
                        "mention" === c.type ? (l = "user-fallback", h = c.idStr, c.vanityUrls && c.vanityUrls[0] && (l = "user", h = c.vanityUrls[0])) : "tag" === c.type ? (l = "tag", h = c.title, u = "#" + u) : "channel" === c.type && (l = "channel", h = c.vanityUrls ? c.vanityUrls[0].substr(9) : null), i.push({
                            title: t["default"].Handlebars.Utils.escapeExpression(u),
                            route: l,
                            param: h
                        }), d = c.range[1]
                    }
                }
                return i.push(new t["default"].Handlebars.SafeString(a["default"](t["default"].Handlebars.Utils.escapeExpression(e.kmwSubstring(d))))), i
            }.property("text", "entities")
        });
    e["default"] = r
}), define("vine-ember/components/loop-count", ["exports", "ember", "vine-ember/utils/loop-incrementor"], function (e, t, a) {
    "use strict";
    var n = new RegExp("\\B(?=(\\d{3})+(?!\\d))", "g"),
        r = "2014-04-03",
        i = t["default"].Component.extend({
            classNames: ["loop-count"],
            init: function () {
                this._super(), this.initializeLoopCounter()
            },
            initializeLoopCounter: function () {
                this.clearHandle();
                var e = a["default"].add(this.get("postId"), this.get("loops.count"), this.get("loops.velocity"), function (e) {
                    this.set("loops.count", e), this.renderCount()
                }.bind(this));
                this.set("loopHandle", e)
            }.observes("postId"),
            formattedCount: function () {
                return Math.round(this.get("loops.count")).toString().replace(n, ",")
            }.property("loops.count"),
            willDestroyElement: function () {
                this.clearHandle()
            },
            clearHandle: function () {
                var e = this.get("loopHandle");
                e && a["default"].remove(e)
            },
            couldHaveUnrecordedLoops: function () {
                return this.get("postDate") ? window.moment(this.get("postDate"), "YYYY-MM-DD HH:mm:ss").isBefore(r) : !1
            }.property("postDate"),
            renderCount: function () {
                var e = "" + this.get("formattedCount"),
                    t = this.$(".counter"),
                    a = $(t).find(".spinner");
                t.hasClass("seeded") && t.empty().removeClass("seeded");
                var n = e.length - a.length;
                if (0 > n) a.slice(0, Math.abs(n)).remove();
                else
                    for (; n--;) this.createDigit(t);
                $(t).find(".spinner").toArray().forEach(function (t, a) {
                    "," === e[a] ? t.className = "spinner comma" : t.className = "spinner digit-" + e[a]
                })
            }.observes("loops.count"),
            createDigit: function () {
                for (var e = -1, t = $('<div class="spinner"></div>').appendTo(this.$(".counter")); e++ < 9;) t.append("<div>" + e + "</div>");
                t.append("<div>,</div>")
            }
        });
    e["default"] = i
}), define("vine-ember/components/modal-post-context", ["exports", "ember"], function (e, t) {
    "use strict";
    var a = t["default"].Component.extend({
        classNames: "modal-post-context"
    });
    e["default"] = a
}), define("vine-ember/components/module-block", ["exports", "ember"], function (e, t) {
    "use strict";
    var a = t["default"].Component.extend({
        classNames: ["module-block"],
        classNameBindings: ["className"],
        iconClass: function () {
            var e = this.get("icon"),
                t = this.get("rawIconClass");
            return t ? t : e ? "module-icon icon-" + e : this.get("route") ? "module-icon icon-" + this.get("route").replace(/-/g, "_") : void 0
        }.property("icon", "route", "rawIconClass")
    });
    e["default"] = a
}), define("vine-ember/components/mouseover-video", ["exports", "ember", "vine-ember/mixins/continuous-play-view"], function (e, t, a) {
    "use strict";
    var n = t["default"].Component.extend(a["default"], {
        classNames: ["mouseover-video"],
        classNameBindings: ["className"],
        player: function () {
            return this.get("post.playingVine")
        }.property("post.playingVine"),
        didInsertElement: function () {
            this.get("player").send("videoRendered", this._getVideoObject())
        },
        _getVideoObject: function () {
            var e = this._super();
            return e.preventAutoplay = !0, e
        },
        mouseEnter: function () {
            this.get("player").send("play", this._getVideoObject()), this.sendAction("mouseEntered")
        },
        mouseLeave: function () {
            this.$(".vine-player").length > 0 && this.get("player").send("removePlayer"), this.get("player").send("hideLoading", this._getVideoObject()), this.sendAction("mouseLeft")
        },
        actions: {
            viewExplicit: function () {
                this.get("post").send("viewExplicit")
            }
        }
    });
    e["default"] = n
}), define("vine-ember/components/my-input", ["exports", "ember"], function (e, t) {
    "use strict";
    var a = t["default"].TextField.extend({
        classNameBindings: "messageTypeClass",
        fixedEls: "header, .global-search, .app-banner, footer",
        email: !1,
        isIE9: window.navigator.userAgent.match(/MSIE [1-9][^0-9]/),
        didInsertElement: function () {
            $("input, textarea").placeholder(), this.get("email") && this.set("type", this.get("isIE9") ? "text" : "email")
        },
        focusIn: function () {
            "error" === this.get("messageType") && this.set("messageType", void 0);
            var e = $(this.get("fixedEls"));
            e.hasClass("fixfixed") || e.addClass("fixfixed")
        },
        focusOut: function () {
            var e = $(this.get("fixedEls"));
            e.hasClass("fixfixed") && e.removeClass("fixfixed")
        },
        messageTypeClass: function () {
            return this.get("messageType")
        }.property("messageType", "noStyles")
    });
    e["default"] = a
}), define("vine-ember/components/nav-button", ["exports", "ember"], function (e, t) {
    "use strict";
    var a = t["default"].Component.extend({
        tagName: "span",
        action: "scrollToTop",
        iconClass: function () {
            return "icon-" + this.get("route").replace("-", "_")
        }.property("route"),
        click: function () {
            this.$("a").hasClass("active") && this.sendAction()
        }
    });
    e["default"] = a
}), define("vine-ember/components/paginated-comments", ["exports", "ember", "vine-ember/services/post", "vine-ember/mixins/pagination"], function (e, t, a, n) {
    "use strict";
    var r = t["default"].Component.extend(n["default"], {
        initialized: !1,
        posts: t["default"].computed.alias("comments.posts"),
        pagination: t["default"].computed.alias("comments.pagination"),
        paginatedProperty: "posts",
        shouldShowPaginationLoading: !1,
        endpoint: a["default"].comments.bind(a["default"]),
        params: t["default"].computed.alias("comments.postIdStr"),
        authenticatedAction: "doAuthenticatedAction",
        hasMorePosts: function () {
            return this.get("posts.length") < this.get("pagination.count")
        }.property("posts.length", "pagination.count"),
        hasMoreComments: function () {
            return this.get("posts.length") && this.get("hasMorePosts")
        }.property("posts.length", "pagination.nextPage"),
        visibilityChanged: function () {
            0 === this.get("comments.posts.length") && this.get("isVisible") && this.send("authenticatedNextPage")
        }.observes("isVisible", "posts.length"),
        _appendObjects: function (e) {
            this.get(this.get("paginatedProperty")).unshiftObjects(e)
        },
        _doNextPage: function () {
            this.get("hasMorePosts") && this.send("nextPage")
        },
        actions: {
            authenticatedNextPage: function () {
                this.sendAction("authenticatedAction", "view more comments", this._doNextPage.bind(this))
            }
        }
    });
    e["default"] = r
}), define("vine-ember/components/profile-background", ["exports", "ember"], function (e, t) {
    "use strict";
    var a = t["default"].Component.extend({
        action: "setProfileBackground",
        classNames: ["color"],
        classNameBindings: ["isCurrentColor:selected"],
        attributeBindings: ["backgroundStyle:style"],
        backgroundStyle: function () {
            var e = this.get("color").replace("0x", "#");
            return "background-color: " + e
        }.property("color"),
        click: function () {
            var e = this.get("color");
            this.get("isCurrentColor") && (e = "0x333333"), this.sendAction("action", e)
        }
    });
    e["default"] = a
}), define("vine-ember/components/related-videos", ["exports", "ember", "vine-ember/mixins/pagination"], function (e, t, a) {
    "use strict";
    var n = t["default"].Component.extend(a["default"], {
        visible: !1,
        posts: [],
        classNames: "related-videos",
        classNameBindings: ["canShow:is-visible"],
        transition: "transitionToRelatedVideo",
        trackEvent: "trackRelatedVideoEvent",
        videosShown: 3,
        impressionLogged: !1,
        shouldShowPaginationLoading: !1,
        paginatedProperty: "posts",
        endpoint: function () {
            var e = this.get("services.timeline");
            return e.relatedVideos.bind(e)
        }.property("services.timeline"),
        expParams: function () {
            return this.get("isMobile") ? {
                mobile: 1
            } : void 0
        }.property("isMobile"),
        didInsertElement: function () {
            this.get("player") && this.get("player").set("forceMute", !0)
        },
        postChanged: function () {
            this.setProperties({
                page: 1,
                impressionLogged: !1
            })
        }.observes("params.post_id"),
        hasPosts: function () {
            return this.get("posts.length") >= this.get("videosShown")
        }.property("posts.length", "videosShown"),
        canShow: function () {
            return this.get("visible") && this.get("hasPosts")
        }.property("visible", "hasPosts"),
        postsToDisplay: function () {
            if (this.get("hasPosts")) {
                var e = (this.get("page") - 1) * this.get("videosShown");
                return this.get("posts").slice(e, e + this.get("videosShown")).map(function (t, a) {
                    return t.set("index", e + a), t.set("renderIndex", a), t
                })
            }
        }.property("posts.length", "page", "hasPosts"),
        canShowChanged: function () {
            this.get("canShow") && !this.get("impressionLogged") && (this.send("trackRelatedVideoEvent", "impression", {
                nonInteraction: !0
            }), this.get("player") && this.get("player").send("checkViewport"), this.get("isMobile") && this.send("trackRelatedVideoEvent", "impressionMobile", {
                nonInteraction: !0
            }), this.setProperties({
                impressionLogged: !0,
                selectedPost: void 0
            }))
        }.observes("canShow"),
        actions: {
            doNextPage: function () {
                this.send("trackRelatedVideoEvent", "load more", {
                    label: this.get("params.post_id")
                }), this.$(".related-post").addClass("paginating"), this.send("nextPage")
            },
            select: function (e) {
                var t = this.get("posts").objectAt(e);
                this.sendAction("transition", t, e), this.set("selectedPost", t.get("secureThumbnailUrl"));
                var a = {
                    label: t.get("shortId"),
                    value: e
                };
                this.send("trackRelatedVideoEvent", "click", a), this.get("isMobile") && this.send("trackRelatedVideoEvent", "clickMobile", a)
            },
            trackRelatedVideoEvent: function (e, t) {
                this.sendAction("trackEvent", e, t)
            }
        }
    });
    e["default"] = n
}), define("vine-ember/components/search-autocomplete", ["exports", "ember"], function (e, t) {
    "use strict";
    var a = t["default"].Component.extend({
        action: "search",
        defaultCount: 3,
        resultOrder: ["tags", "users", "venues"],
        results: void 0,
        position: -2,
        columnSize: 1,
        didInsertElement: function () {
            var e = function (e) {
                0 === $(e.target).closest(".search").length && this.set("results", void 0)
            }.bind(this);
            if ($(document).click(e), this.set("clickBinding", e), this.get("isMobile")) {
                this.$("input").width(this.$().width() - 60);
                var t = function () {
                    this.$("input").width(this.$().width() - 60)
                }.bind(this);
                $(window).bind("resize", t), this.set("resizeBinding", t)
            }
        },
        willDestroyElement: function () {
            $(document).unbind("click", this.get("clickBinding")), this.get("resizeBinding") && $(window).unbind("resizeBinding", this.get("resizeBinding"))
        },
        click: function (e) {
            ($(e.target).is("a") || $(e.target).closest("a").length > 0) && this.send("reset")
        },
        tap: function (e) {
            ($(e.target).is("a") || $(e.target).closest("a").length > 0) && this.send("reset")
        },
        _doNavLeft: function () {
            var e = this.get("position") - this.get("columnSize"),
                t = this.$("li:not(.empty-result)").length - 1;
            this.set("position", -2 > e ? t : e)
        },
        _doNavUp: function () {
            var e = this.get("position.") - 1,
                t = this.$("li:not(.empty-result)").length - 1;
            this.set("position", -2 > e ? t : e)
        },
        _doNavRight: function () {
            var e = this.get("position") + this.get("columnSize"),
                t = this.$("li:not(.empty-result)").length - 1;
            this.set("position", e > t ? -2 : e)
        },
        _doNavDown: function () {
            var e = this.get("position") + 1,
                t = this.$("li:not(.empty-result)").length - 1;
            this.set("position", e > t ? -2 : e)
        },
        positionChanged: function () {
            var e = this.get("position");
            return this.$("li a, .all-results").removeClass("active"), -1 > e ? void this.$("input").focus() : -1 === e ? void this.$(".all-results").addClass("active") : (this.$(".autocomplete").attr({
                tabindex: 1
            }), this.$(".autocomplete").focus(), void this.$("li:not(.empty-result) a").eq(e).addClass("active"))
        }.observes("position", "position"),
        keyDown: $.throttle(100, function (e) {
            switch (e.which) {
            case 37:
                e.preventDefault(), this._doNavLeft();
                break;
            case 38:
                e.preventDefault(), this._doNavUp();
                break;
            case 39:
                e.preventDefault(), this._doNavRight();
                break;
            case 40:
                e.preventDefault(), this._doNavDown();
                break;
            case 13:
                this.$(".active").click();
                break;
            case 27:
                this.send("reset"), this.$("input").focus();
                break;
            default:
                return
            }
        }),
        counts: function () {
            return {
                tags: this.get("tagCount") || this.get("defaultCount"),
                venues: this.get("venueCount") || this.get("defaultCount"),
                users: this.get("userCount") || this.get("defaultCount")
            }
        }.property("defaultCount", "tagCount", "venueCount", "userCount"),
        actions: {
            reset: function () {
                this.setProperties({
                    results: void 0,
                    query: void 0,
                    position: -2
                })
            },
            queryChanged: function () {
                function e(e) {
                    return e.posts.length > 0 ? e.posts : void 0
                }
                var a = this.get("query");
                if (!a) return void this.set("results", void 0);
                var n = this.get("counts");
                t["default"].RSVP.hash({
                    tags: this.get("services.search").tags({
                        query: a
                    }, {
                        size: n.tags
                    }).then(e),
                    users: this.get("services.search").users({
                        query: a
                    }, {
                        size: n.users
                    }).then(e),
                    venues: this.get("services.search").venues({
                        query: a
                    }, {
                        size: n.venues
                    }).then(e)
                }).then(function (e) {
                    if (["tags", "users", "venues"].forEach(function (t) {
                            e[t] && e[t].length > n[t] && (e[t] = e[t].slice(0, n[t]))
                        }), e.tags || e.users || e.venues) {
                        var t = this.get("resultOrder").map(function (t) {
                            var a = {};
                            return a.items = e[t], a[t] = !0, a
                        });
                        this.set("results", t)
                    } else this.setProperties({
                        results: void 0,
                        position: -2
                    })
                }.bind(this))
            },
            search: function () {
                var e = this.get("query");
                e && (this.sendAction("action", e), this.send("reset"))
            }
        }
    });
    e["default"] = a
}), define("vine-ember/components/secure-img", ["exports", "ember"], function (e, t) {
    "use strict";
    var a = t["default"].Component.extend({
        tagName: "img",
        attributeBindings: ["securePath:src", "style"],
        securePath: function () {
            return this.get("src") ? this.get("src").replace("http://", "https://") : void 0
        }.property("src")
    });
    e["default"] = a
}), define("vine-ember/components/share-post", ["exports", "ember", "vine-ember/services/facebook", "vine-ember/services/twitter"], function (e, t, a, n) {
    "use strict";
    var r = {
            list: ["like", "twitter", "facebook", "view"],
            listHeader: ["twitter", "facebook", "email"],
            feed: ["twitter", "facebook", "view", "embed", "vm"],
            permalink: ["twitter", "facebook", "tumblr", "embed", "vm"]
        },
        i = t["default"].Component.extend({
            classNames: ["badges"],
            classNameBindings: ["dataReady:is-visible"],
            featureSet: "list",
            location: "default",
            visible: !0,
            gaq: "gaq",
            init: function () {
                r[this.get("featureSet")].forEach(function (e) {
                    this.set(e + "_enabled", !0)
                }.bind(this)), this._super(), this.get("visible") && this.initializeSocialMetrics()
            },
            didInsertElement: function () {
                this.$().on("click", ".share-badge", function (e) {
                    var t = e.currentTarget.className.replace(/share-badge/, "").trim(),
                        a = "Share";
                    this.get("isMobile") && (a += "Mobile"), this.sendAction("gaq", ["_trackEvent", "Share", t, this.get("location")])
                }.bind(this))
            },
            willDestroyElement: function () {
                this.get("metricsTimeout") && window.clearTimeout(this.get("metricsTimeout"))
            },
            click: function (e) {
                return this.get("onShare") ? (($(e.target).hasClass("share-badge") || $(e.target).closest(".share-badge").length) && this.sendAction("onShare"), !0) : void 0
            },
            initializeSocialMetrics: function () {
                this.get("dataReady") || (this.send("fetchSocialMetrics"), this.set("metricsTimeout", window.setTimeout(function () {
                    this.set("dataReady", !0)
                }.bind(this), 500)))
            }.observes("visible"),
            postChanged: function () {
                this.setProperties({
                    facebookCount: 0,
                    tweetCount: 0
                }), this.send("fetchSocialMetrics"), this.$().addClass("fade-out"), t["default"].run.later(this, function () {
                    this.$().removeClass("fade-out")
                }, 500)
            }.observes("post.postIdStr"),
            stumbleuponUrl: function () {
                return this.get("post.shareUrl") ? "https://web.archive.org/web/20150701150124/http://www.stumbleupon.com/submit?url=" + this.get("post.shareUrl") : void 0
            }.property("post.shareUrl"),
            tumblrUrl: function () {
                var e = {
                    embed: this.get("post.shareUrl"),
                    caption: this.get("post.description")
                };
                return "http://www.tumblr.com/share/video?" + $.param(e)
            }.property("post.shareUrl", "post.description"),
            isCurrentUser: function () {
                return this.get("parentView").get("session").isCurrentUser(this.get("post.userIdStr"))
            }.property("userIdStr", "session"),
            actions: {
                fetchSocialMetrics: function () {
                    var e = this.get("post.shareUrl"),
                        t = this;
                    e && (a["default"].getURLCount(e).then(function (e) {
                        e && (t.isDestroying || t.isDestroyed || (t.set("facebookCount", e), t.$().removeClass("fade-out")))
                    }), n["default"].getURLCount(e).then(function (e) {
                        e && (t.isDestroying || t.isDestroyed || (t.set("tweetCount", e), t.$().removeClass("fade-out")))
                    }))
                },
                facebookShare: function () {
                    var e = 670,
                        t = 350,
                        a = window.open(this.get("post.facebookUrl"), "fbWindow", "width=" + e + ",height=" + t);
                    a.moveTo((window.screen.width - e) / 2, (window.screen.height - t) / 2)
                },
                tweet: function () {
                    var e = 550,
                        t = 380,
                        a = window.open(this.get("post.tweetUrl"), "tweetWindow", "width=" + e + ",height=" + t);
                    a.moveTo((window.screen.width - e) / 2, (window.screen.height - t) / 2)
                },
                tumblrShare: function () {
                    var e = 550,
                        t = 380;
                    window.open(this.get("tumblrUrl"), "tumblrWindow", "width=" + e + ",height=" + t)
                },
                like: function () {
                    this.get("post").send("like")
                },
                revine: function () {
                    this.get("post").send("revine")
                },
                vm: function () {
                    this.get("post").send("vm")
                }
            }
        });
    e["default"] = i
}), define("vine-ember/components/share-widgets", ["exports", "ember"], function (e, t) {
    "use strict";
    var a = t["default"].Component.extend({
        classNames: ["share-widgets"],
        classNameBindings: ["vertical"],
        didInsertElement: function () {
            window.FB ? (window.FB.XFBML.parse(this.$()[0]), this.set("fbInit", !0)) : t["default"].$.getScript("//web.archive.org/web/20150701150124/https://connect.facebook.net/en_US/all.js", function () {
                window.FB.init({
                    appId: "1185475921592170"
                }), window.FB.XFBML.parse(this.$()[0]), this.set("fbInit", !0)
            }.bind(this)), window.twttr && window.twttr.widgets ? (window.twttr.widgets.load(), this.set("twitterInit", !0)) : t["default"].$.getScript("https://web.archive.org/web/20150701150124/https://platform.twitter.com/widgets.js", function () {
                this.set("twitterInit", !0)
            }.bind(this))
        },
        fbLayout: function () {
            return this.get("vertical") ? "box_count" : "button_count"
        }.property("vertical"),
        tweetLayout: function () {
            return this.get("vertical") ? "vertical" : void 0
        }.property("vertical"),
        finalTweetUrl: function () {
            return this.get("tweetUrl") || window.location.href
        }.property("tweetUrl"),
        finalFbUrl: function () {
            return this.get("fbUrl") || window.location.href
        }.property("fbUrl")
    });
    e["default"] = a
}), define("vine-ember/components/slide-link", ["exports", "ember"], function (e, t) {
    "use strict";
    var a = t["default"].Component.extend({
        tagName: "h3",
        classNames: ["slide-link"],
        didInsertElement: function () {
            this.$(".text").css("max-width", this.$().width() + "px")
        },
        tvRoute: function () {
            return this.get("route") + ".tv"
        }.property("route")
    });
    e["default"] = a
}), define("vine-ember/components/suspension-sidebar", ["exports", "ember"], function (e, t) {
    "use strict";
    var a = t["default"].Component.extend({
        classNames: "notification-sidebar",
        confirmedCompliance: !1,
        showNormalAccessMessage: !1,
        showUnsuspensionMessage: !1,
        restoreBtnDisabled: t["default"].computed.not("confirmedCompliance"),
        actions: {
            restoreAccess: function () {
                this.get("confirmedCompliance") && this.get("services.user").restoreAccess(this.get("userIdStr")).then(function () {
                    this.get("session").set("suspended", void 0), this.set("showUnsuspensionMessage", !0), this.set("confirmedCompliance", !0)
                }.bind(this))
            },
            markCompliant: function () {
                this.get("confirmedCompliance") && this.get("services.user").markCompliant(this.get("userIdStr")).then(function () {
                    this.get("session").set("isEscUser", void 0), this.set("showNormalAccessMessage", !0), this.set("confirmedCompliance", !0)
                }.bind(this))
            }
        }
    });
    e["default"] = a
}), define("vine-ember/components/timeline-header", ["exports", "ember"], function (e, t) {
    "use strict";
    var a = t["default"].Component.extend({
        classNames: ["timeline-header"],
        classNameBindings: "cssClass",
        setHeaderVisible: "setHeaderVisible",
        didInsertElement: function () {
            if (this.get("model.backgroundImageUrl")) {
                var e = this.$("#background-image-container");
                e.hide();
                var a = $("<img>");
                a.load(function () {
                    e.fadeIn()
                }), a.attr("src", this.get("model.backgroundImageUrl"))
            }
            t["default"].$("#outer-wrapper").hasClass("mobile") || this.send("bindScroll")
        },
        willDestroyElement: function () {
            this.get("scrollBinding") && $(window).unbind("scroll", this.get("scrollBinding")), t["default"].$("#outer-wrapper").removeAttr("style")
        },
        headerContentStyle: function () {
            return this.get("model.headerContentStyle") || this.get("model.backgroundColorStyle")
        }.property("model.backgroundColorStyle", "model.headerContentStyle"),
        actions: {
            bindScroll: function () {
                var e = this.$().height(),
                    a = $("header").height(),
                    n = e - a;
                t["default"].$("#outer-wrapper").css({
                    paddingTop: e + this.$().offset().top
                });
                var r = $(window),
                    i = $.throttle(100, function () {
                        this.sendAction("setHeaderVisible", r.scrollTop() <= n)
                    }.bind(this));
                r.scroll(i), this.set("scrollBinding", i)
            }
        }
    });
    e["default"] = a
}), define("vine-ember/components/timeline-sidebar", ["exports", "ember"], function (e, t) {
    "use strict";
    var a = t["default"].Component.extend({
        classNames: ["timeline-sidebar"],
        action: "scrollToTop",
        gaq: "gaq",
        didInsertElement: function () {
            this.get("isMobile") && this.$("h2").is(":visible") && this._bindScroll()
        },
        _bindScroll: function () {
            t["default"].$("header .logo strong").text("");
            var e = function () {
                var e = $(window).scrollTop(),
                    a = this.$("h2"),
                    n = t["default"].$("header");
                e > a.offset().top + a.height() - n.height() ? t["default"].$("header .logo strong").text(a.text().trim()) : t["default"].$("header .logo strong").text("")
            }.bind(this);
            $(window).scroll(e), e(), this.set("scrollBinding", e)
        },
        _unbindScroll: function () {
            this.get("scrollBinding") && $(window).unbind("scroll", this.get("scrollBinding"))
        },
        willDestroyElement: function () {
            this._unbindScroll()
        },
        backgroundStyle: function () {
            return this.get("isMobile") ? "" : this.get("options.iconStyle")
        }.property("options.iconStyle"),
        mobileStyle: function () {
            return this.get("isMobile") ? this.get("options.mobileStyle") : ""
        }.property("options.mobileStyle"),
        actions: {
            scrollToTop: function () {
                this.sendAction()
            },
            gaq: function (e) {
                this.sendAction("gaq", e)
            }
        }
    });
    e["default"] = a
}), define("vine-ember/components/tv-link", ["exports", "ember"], function (e, t) {
    "use strict";
    var a = t["default"].Component.extend({
        classNames: ["tv-link"]
    });
    e["default"] = a
}), define("vine-ember/components/user-hover", ["exports", "ember"], function (e, t) {
    "use strict";
    var a = t["default"].View.extend({
        classNames: ["user-container"],
        classNameBindings: "userIdClass",
        borderWidth: 7,
        defaultColor: "#00d9a3",
        userIdClass: function () {
            return "user-" + this.get("userIdStr")
        }.property("userId"),
        mouseEnter: function () {
            this.get("userColor") && (this.$("a").css("color", this.get("userColor")), this.$(".avatar, .avatar-new img").css("box-shadow", this.get("borderColorStyle")))
        },
        mouseLeave: function () {
            this.$("a").css("color", ""), this.$(".avatar, .avatar-new img").css("box-shadow", "")
        },
        borderColorStyle: function () {
            return "0 0 0 " + this.get("borderWidth") + "px " + this.get("userColor")
        }.property("userColor"),
        userColor: function () {
            return this.get("color") || this.get("defaultColor")
        }.property("color")
    });
    e["default"] = a
}), define("vine-ember/components/user-info", ["exports", "ember"], function (e, t) {
    "use strict";
    var a = t["default"].Component.extend({
        tagName: "div",
        classNames: ["user-info-new"],
        classNameBindings: "cssClass",
        cssClass: "user-info-size-38",
        delinkify: !1,
        textColorStyle: function () {
            return this.get("textColor") ? "color: " + this.get("textColor") : void 0
        }.property("textColor")
    });
    e["default"] = a
}), define("vine-ember/components/view-mode-toggles", ["exports", "ember"], function (e, t) {
    "use strict";
    var a = t["default"].Component.extend({
        classNames: ["view-mode-toggles"],
        hasTvMode: !0,
        hasListMode: !0,
        hasGridMode: !1,
        gaq: "gaq",
        showListMode: function () {
            return this.get("hasListMode") && ("tv" === this.get("mode") || "grid" === this.get("mode"))
        }.property("hasListMode", "mode"),
        showGridMode: function () {
            return this.get("hasGridMode") && "grid" !== this.get("mode")
        }.property("hasListMode", "mode"),
        showTvMode: function () {
            return this.get("hasTvMode") && "tv" !== this.get("mode")
        }.property("hasListMode", "mode"),
        actions: {
            trackViewMode: function (e) {
                this.sendAction("gaq", ["_trackEvent", "Timeline", "enter " + e + " mode"])
            }
        }
    });
    e["default"] = a
}), define("vine-ember/controllers/application", ["exports", "ember"], function (e, t) {
    "use strict";
    var a = t["default"].Controller.extend({
        needs: ["current-user"],
        activeBanners: [],
        modal: !1,
        searchAutocompleteOrder: ["users", "tags", "venues"],
        isVisible: !0,
        currentYear: (new Date).getFullYear(),
        currentUser: t["default"].computed.alias("controllers.current-user.model"),
        init: function () {
            this._super();
            var e = /android|iphone|ipod|ipad|blackberry|mini|windows phone|kf|palm|blackberry|bb/i.test(window.navigator.userAgent);
            this.set("isMobile", e)
        },
        hasNotification: function () {
            if (!this.get("activeBanners").length) return !1;
            if (!localStorage.dismissedBanners) return !0;
            var e = localStorage.dismissedBanners ? JSON.parse(localStorage.dismissedBanners) : {},
                t = !0;
            return this.get("activeBanners").forEach(function (a) {
                t = t && !e[a]
            }), t
        }.property("activeBanners"),
        deviceType: function () {
            var e = window.navigator.userAgent;
            return e.match(/Windows Phone/i) ? "windows" : e.match(/iPhone/i) || e.match(/iPad/i) || e.match(/iPod/i) ? "apple" : e.match(/Android/i) ? "android" : void 0
        }.property(),
        routeClass: function () {
            return this.get("currentPath") ? this.get("currentPath").replace(/[.\/]/g, "-") : void 0
        }.property("currentPath"),
        currentPathChanged: function () {
            t["default"].run.next(function () {
                var e = window.location.hash.length > 0 ? window.location.hash.substring(1) : window.location.pathname;
                this.send("gaq", ["_trackPageview", e]), this.get("scribe").resetAppNavigation()
            }.bind(this))
        }.observes("currentPath"),
        actions: {
            closeBanner: function (e) {
                delete localStorage["year-on-vine-banner"];
                var t = localStorage.dismissedBanners ? JSON.parse(localStorage.dismissedBanners) : {};
                t[e] = !0, localStorage.dismissedBanners = JSON.stringify(t), this.set("hasNotification", !1)
            },
            resetPageStates: function () {
                this.get("isMobile") && this.set("transitioning", !0), this.setProperties({
                    modal: !1,
                    mobileTitle: void 0
                })
            }
        }
    });
    e["default"] = a
}), define("vine-ember/controllers/confirm-email", ["exports", "ember"], function (e, t) {
    "use strict";
    var a = t["default"].ObjectController.extend({
        _doResendEmail: function () {
            this.get("services.user").sendEmailVerification(this.get("token")).then(function () {
                this.setProperties({
                    error: !1,
                    emailResent: !0
                })
            }.bind(this), function (e) {
                this.setProperties({
                    error: e.response,
                    showContinue: !0
                })
            }.bind(this))
        },
        actions: {
            resendEmail: function () {
                this.send("doAuthenticatedAction", "resend a confirmation link", this._doResendEmail.bind(this))
            }
        }
    });
    e["default"] = a
}), define("vine-ember/controllers/current-user", ["exports", "ember"], function (e, t) {
    "use strict";
    var a = t["default"].ObjectController.extend({
        sessionChanged: function () {
            this.get("session.isAuthenticated") ? this.get("services.user").me().then(function (e) {
                this.set("model", e)
            }.bind(this)) : this.set("model", null)
        }.observes("session.userId").on("init"),
        borderColorStyle: function () {
            return this.get("backgroundColor") ? "box-shadow: 0 0 0 2px #" + this.get("backgroundColor") : void 0;
        }.property("backgroundColor")
    });
    e["default"] = a
}), define("vine-ember/controllers/explore", ["exports", "ember", "vine-ember/models/user"], function (e, t, a) {
    "use strict";
    var n = t["default"].ArrayController.extend({
        needs: ["application", "index"],
        isMobile: t["default"].computed.alias("controllers.application.isMobile"),
        numPinnedChannels: 3,
        numEditorsPicks: 9,
        numEditorial: 3,
        hideDownloadButtons: function () {
            var e = this.get("config.ORIGINAL_VINE_CLIENT");
            return this.get("isMobile") && e && e.match(/^ios-watch/)
        }.property("isMobile", "config.ORIGINAL_VINE_CLIENT"),
        init: function () {
            this._super(), this.fetchData().then(function (e) {
                var t = this._mixContent(e).filter(function (e) {
                    return e
                });
                this.set("content", t), this._constructTimeline(t)
            }.bind(this))
        },
        fetchData: function () {
            return t["default"].RSVP.hash({
                channels: this.get("services.list").pinned(null, {
                    size: this.get("numPinnedChannels")
                }, {
                    timelineSize: 3
                })["catch"](function () {
                    return []
                }),
                editorsPicks: this.get("services.timeline").promoted(null, {
                    size: this.get("numEditorsPicks")
                }).then(function (e) {
                    return e.posts
                })["catch"](function () {
                    return []
                }),
                editorial: this.get("services.list").editorialWithPosts(null, {
                    size: this.get("numEditorial")
                }).then(function (e) {
                    return e.posts
                })["catch"](function () {
                    return []
                })
            }).then(function (e) {
                var n = {};
                return n.channels = e.channels.filter(function (e) {
                    return e.channel && e.posts && e.posts.length
                }), n.editorsPicks = e.editorsPicks.splice(0, 1), n.users = [{
                    users: e.editorsPicks.splice(0, 4).map(function (e) {
                        return a["default"].create(e)
                    })
                }, {
                    users: e.editorsPicks.splice(0, 4).map(function (e) {
                        return a["default"].create(e)
                    })
                }], n.editorial = e.editorial.filter(function (e) {
                    return e && e.length
                }), t["default"].RSVP.resolve(n)
            })
        },
        _mixContent: function (e) {
            var t = e.editorial,
                a = e.channels,
                n = e.users,
                r = e.editorsPicks,
                i = [],
                d = window.moment;
            t.length && r.length && (i = d(t[0].published).isAfter(r[0].repost.created) ? i.concat([t.shift(), r.shift()]) : i.concat([r.shift(), t.shift()])), i = i.concat(t);
            var s = [i.shift(), a.shift(), n.shift(), i.shift(), a.shift(), n.shift(), i.shift(), a.shift(), i.shift()];
            return s
        },
        _constructTimeline: function (e) {
            var t = [];
            e.forEach(function (e) {
                e.list ? t = t.concat(e.map(function (t, a) {
                    return t.context = {
                        list: e.list,
                        positionIndex: a + 1,
                        listLength: e.length
                    }, t
                })) : e.channel ? t = t.concat(e.posts.map(function (t) {
                    return t.context = {
                        channel: e.channel
                    }, t
                })) : e.postIdStr && (e.context = {
                    editorsPick: !0
                }, t.push(e))
            }), this.get("controllers.index").send("addPosts", t)
        },
        lookupItemController: function (e) {
            return e.channel ? "explore/pinned-channel" : e.postIdStr ? "explore/post" : e.list ? "explore/list" : void 0
        }
    });
    e["default"] = n
}), define("vine-ember/controllers/explore/channels", ["exports", "ember"], function (e, t) {
    "use strict";
    var a = t["default"].ArrayController.extend({
        init: function () {
            this._super(), this.get("services.channels").findAll().then(function (e) {
                this.set("content", e)
            }.bind(this))
        }
    });
    e["default"] = a
}), define("vine-ember/controllers/explore/list", ["exports", "vine-ember/controllers/timeline"], function (e, t) {
    "use strict";
    var a = t["default"].extend({
        needs: ["index", "playlists"],
        list: Ember.computed.alias("model.list"),
        pagination: Ember.computed.alias("model.pagination"),
        listIdClass: function () {
            return "list-" + this.get("list.timelineIdStr")
        }.property("list.timelineIdStr"),
        secureThumbnailUrl: function () {
            return this.get("firstObject.thumbnailUrl").replace("http://", "https://")
        }.property("firstObject.thumbnailUrl"),
        actions: {
            openModalView: function (e) {
                if (this.get("isMobile") && this.get("list.vanityUrl")) return void this.transitionTo("list", this.get("list.vanityUrl"));
                var t = this.get("firstObject.model");
                return this.send("showModal", "post", {
                    content: e,
                    videoIndex: e.indexOf(t)
                }), !1
            },
            facebookShare: function () {
                var e = 670,
                    t = 350,
                    a = window.open(this.get("list.facebookUrl"), "fbWindow", "width=" + e + ",height=" + t);
                a.moveTo((window.screen.width - e) / 2, (window.screen.height - t) / 2)
            },
            tweet: function () {
                var e = 550,
                    t = 380,
                    a = window.open(this.get("list.tweetUrl"), "tweetWindow", "width=" + e + ",height=" + t);
                a.moveTo((window.screen.width - e) / 2, (window.screen.height - t) / 2)
            },
            routeToList: function () {
                this.transitionToRoute("list", this.get("list.vanityUrl"))
            }
        }
    });
    e["default"] = a
}), define("vine-ember/controllers/explore/lists", ["exports", "ember"], function (e, t) {
    "use strict";
    var a = t["default"].ArrayController.extend({
        needs: "index",
        itemController: "explore/list",
        init: function () {
            this._super(), this.get("services.list").editorialWithPosts(null, {
                size: 8
            }, 3).then(function (e) {
                this.set("content", e.posts);
                var t = e.posts.reduce(function (e, t) {
                    return e = e.concat(t.slice(0, 3).map(function (e, a) {
                        return e.context = {
                            list: t.list,
                            positionIndex: a + 1,
                            listLength: t.length
                        }, e
                    }))
                }, []);
                this.get("controllers.index").send("addPosts", t)
            }.bind(this))
        }
    });
    e["default"] = a
}), define("vine-ember/controllers/explore/mobile", ["exports", "vine-ember/controllers/explore"], function (e, t) {
    "use strict";
    var a = t["default"].extend({
        numPinnedChannels: 1,
        numEditorsPicks: 5,
        numEditorial: 2,
        _mixContent: function (e) {
            var t = e.editorial,
                a = e.channels,
                n = e.users,
                r = e.editorsPicks,
                i = [t.shift(), {
                    channels: !0
                }, r.shift(), {
                    popularNow: !0
                }, n, a.shift(), t.shift()];
            return i
        }
    });
    e["default"] = a
}), define("vine-ember/controllers/explore/pinned-channel", ["exports", "ember"], function (e, t) {
    "use strict";
    var a = t["default"].ObjectController.extend({
        needs: "application",
        isMobile: t["default"].computed.alias("controllers.application.isMobile"),
        channelIdAttr: function () {
            return "channel-" + this.get("channel.channelIdStr")
        }.property("channel.channelIdStr"),
        route: function () {
            return "channel"
        }.property("channel"),
        routeParam: function () {
            return this.get("channel.event") ? void 0 : this.get("channel.vanityUrl")
        }.property("channel.event")
    });
    e["default"] = a
}), define("vine-ember/controllers/explore/popular-now", ["exports", "ember"], function (e, t) {
    "use strict";
    var a = t["default"].ArrayController.extend({
        needs: ["index", "application"],
        isMobile: t["default"].computed.alias("controllers.application.isMobile"),
        itemController: "explore/post",
        init: function () {
            this._super(), this.fetchData()
        },
        fetchData: function (e) {
            var t = 5;
            return this.get("isMobile") && (t = 3), this.get("services.timeline").popular(null, {
                size: t
            }).then(function (e) {
                var a = e.posts.slice(0, t);
                this.set("content", a), this.get("controllers.index").send("addPosts", a.map(function (e) {
                    return e.context = {
                        popularNow: !0
                    }, e
                }))
            }.bind(this))
        }
    });
    e["default"] = a
}), define("vine-ember/controllers/explore/post", ["exports", "vine-ember/controllers/post"], function (e, t) {
    "use strict";
    var a = t["default"].extend({
        needs: ["index"]
    });
    e["default"] = a
}), define("vine-ember/controllers/explore/posts/three", ["exports", "vine-ember/controllers/explore/post"], function (e, t) {
    "use strict";
    var a = t["default"].extend({
        linkColorStyle: function () {
            var e = this.get("parentController.channel");
            return e ? e.get("fontColorStyle") : void 0
        }.property("parentController.channel.fontColorStyle")
    });
    e["default"] = a
}), define("vine-ember/controllers/explore/tags", ["exports", "ember"], function (e, t) {
    "use strict";
    var a = t["default"].ArrayController.extend({
        init: function () {
            this._super(), this._fetchTags()
        },
        _fetchTags: function () {
            this.get("services.timeline").trendingTags().then(function (e) {
                this.set("content", e.posts.slice(0, 8))
            }.bind(this))
        }
    });
    e["default"] = a
}), define("vine-ember/controllers/forgot-password", ["exports", "ember", "vine-ember/services/password"], function (e, t, a) {
    "use strict";
    var n = t["default"].Controller.extend({
        actions: {
            submitEmail: function () {
                return this.get("email") && this.get("email").trim() ? void a["default"].forgotPassword(this.get("email")).then(function () {
                    this.send("forgotPasswordSuccess")
                }.bind(this), function () {
                    this.send("forgotPasswordError")
                }.bind(this)) : void this.send("forgotPasswordError", "Email must not be blank.")
            },
            forgotPasswordSuccess: function () {
                this.setProperties({
                    message: {
                        text: "Please check your email for instructions.",
                        type: "confirm"
                    },
                    submitted: !0
                })
            },
            forgotPasswordError: function (e) {
                this.set("message", {
                    text: e || "We couldn't find an account with that email.",
                    type: "error"
                })
            }
        }
    });
    e["default"] = n
}), define("vine-ember/controllers/index", ["exports", "vine-ember/controllers/timeline"], function (e, t) {
    "use strict";
    var a = t["default"].extend({
        timelineName: "Explore Vine",
        pagination: function () {
            return {
                count: this.get("length")
            }
        }.property("length"),
        iconStyle: function () {
            return "background-image: url('" + this.get("config.ASSETS_CDN_PREFIX") + "images/sidebar/explore.svg'); background-size: 50%;"
        }.property("config.ASSETS_CDN_PREFIX"),
        actions: {
            addPosts: function (e) {
                this.get("model").pushObjects(e)
            }
        }
    });
    e["default"] = a
}), define("vine-ember/controllers/jobs", ["exports", "ember"], function (e, t) {
    "use strict";
    var a = t["default"].ObjectController.extend({
        needs: ["application"],
        isMobile: t["default"].computed.alias("controllers.application.isMobile"),
        heroVideoUrl: "https://web.archive.org/web/20150701150124/https://v.cdn.vine.co/static/trix/JP2.mp4",
        heroPosterUrl: function () {
            return this.get("config.ASSETS_CDN_PREFIX") + "images/jobs/poster-dc5a81c21cd4b5da477dc5ecd586f5ff.jpg"
        }.property("config.ASSETS_CDN_PREFIX"),
        perks: [{
            className: "perks-green",
            title: "Green for green",
            description: "Vine naturally has to be about plants, right? Get a budget for flora at your station.",
            img: "images/jobs/perks-02.svg"
        }, {
            className: "perks-eats",
            title: "Eats to your seat",
            description: "The only thing better than free NYC eating is having it delivered daily to your office.",
            img: "images/jobs/perks-03.svg"
        }, {
            className: "perks-flicks",
            title: "Tix to the flicks",
            description: "At Vine, we all make short movies, and we offer tickets for feature-length too.",
            img: "images/jobs/perks-07.svg"
        }, {
            className: "perks-massage",
            title: "Monthly massage",
            description: "Nothing kills stress like a massage. Tell your friends you get it free and rub it in.",
            img: "images/jobs/perks-09.svg"
        }, {
            className: "perks-citibike",
            title: "Citi Bike see the sights",
            description: "This is how you roll, with a free membership to Citi Bike, to commute and kill calories.",
            img: "images/jobs/perks-01.svg"
        }, {
            className: "perks-fitness",
            title: "Fitness for free",
            description: "To keep you ripe on the vine, we'll pick up the tab for membership to your local gym.",
            img: "images/jobs/perks-06.svg"
        }, {
            className: "perks-medical",
            title: "OneMedical one cost",
            description: "Don't stress your health with a free OneMedical membership to see an MD anytime.",
            img: "images/jobs/perks-04.svg"
        }, {
            className: "perks-impact",
            title: "Immediate impact",
            description: "Join a small team creating a huge platform with instant gratification as it goes live.",
            img: "images/jobs/perks-08.svg"
        }],
        rawEmployeeVines: ["https://web.archive.org/web/20150701150124/https://mtc.cdn.vine.co/r/videos/84A5D782A21073780949617172480_1314a294e6e.4.8.15558585251726193686.mp4?versionId=8ieAlYR_kge2mM0J9xfvRf6Cy2JR9AQI", "https://web.archive.org/web/20150701150124/https://mtc.cdn.vine.co/r/videos/7F8E87DD611073778326784598016_15c8883df7e.4.8.4504117969817407832.mp4?versionId=LaYiqT10YSlyIQlSPeCyoYVHxdTcClaH", "https://web.archive.org/web/20150701150124/https://mtc.cdn.vine.co/r/videos/F9C8AE7FCA1073776000678375424_1bb598d91b4.4.8.1323074080896978010.mp4?versionId=XX6T7aLQt_GABlpRPyLUJRF5QN51JKs_", "https://web.archive.org/web/20150701150124/https://mtc.cdn.vine.co/r/videos/32693F406D1073774460894666752_1e8d4032e5b.4.8.2420388755593278852.mp4?versionId=4GlcVZSvvTwnhvh5ufrDAYUMOlJ8l8zq", "https://web.archive.org/web/20150701150124/https://mtc.cdn.vine.co/r/videos/6DC42E79261073770993631264768_1d9f0813dde.4.8.2082851988603612069.mp4?versionId=nbJemx0c3_WMAjhuGpmOZh_ve6ua.W4g", "https://web.archive.org/web/20150701150124/https://mtc.cdn.vine.co/r/videos/EF525D17971073767949237690368_1d74a845449.4.8.9927954159405586613.mp4?versionId=.lMbRvzGlhGsNYACJpBkZz2GLOA7G2UX", "https://web.archive.org/web/20150701150124/https://mtc.cdn.vine.co/r/videos/43302C05F21073766630884069376_1cd460a2e69.4.8.11252618507601440583.mp4?versionId=_wcJ2Sf40cfcaoWAqyzUFHZXezX1cEbl", "https://web.archive.org/web/20150701150124/https://mtc.cdn.vine.co/r/videos/A6CB665FFF1073765978959220737_190be0e8c00.4.8.16607753051795547315.mp4?versionId=j0h49c6ryfMEpiatWVPdhU7SS7Uontzi", "https://web.archive.org/web/20150701150124/https://mtc.cdn.vine.co/r/videos/F249BBF6891073764390274207744_1a224fb6db2.4.8.6070314678789153093.mp4?versionId=_HZROMfHrzr2aCFARWWuATAAXK4f3BRG", "https://web.archive.org/web/20150701150124/https://mtc.cdn.vine.co/r/videos/FADF6BE6081073761582389014528_10439229194.4.8.12823928395475489744.mp4?versionId=luaSzpy3den4zB5KuzLk7FhQsGH0I9iH", "https://web.archive.org/web/20150701150124/https://mtc.cdn.vine.co/r/videos/D32802CAC81073760358512091136_1f1830856ad.4.8.2254993320843893827.mp4?versionId=hN2m_AVdyhRjbUphrvLMP2ApxsXlOiKl", "https://web.archive.org/web/20150701150124/https://mtc.cdn.vine.co/r/videos/04498650531073759458808721408_185c162781a.4.8.18069663439159702994.mp4?versionId=PzAyLfAGwPzT9tUTfVd.Fr96l7VqtBFX", "https://web.archive.org/web/20150701150124/https://mtc.cdn.vine.co/r/videos/3BF557DA591073757179141595136_1d25f2c264f.4.8.11012766796705522078.mp4?versionId=NCQzxbnJv33IyhpnCUAIcw9.r6FCjK12", "https://web.archive.org/web/20150701150124/https://mtc.cdn.vine.co/r/videos/AC460603421073753489198460928_18b96555641.4.8.2028982647884399532.mp4?versionId=4xs3OPiOMtChdqSutpWs.nB4kh0qJ5Lr", "https://web.archive.org/web/20150701150124/https://mtc.cdn.vine.co/r/videos/B641E7EF701073750449578205184_1898b3a3b7b.4.8.11901994143864519766.mp4?versionId=epJcFM69BuVAEmrYRb4j3aGW_ohKC.FQ", "https://web.archive.org/web/20150701150124/https://mtc.cdn.vine.co/r/videos/48D1F987FF1073749304683941888_1ec75ea3eac.4.8.13237661542258433957.mp4?versionId=2qM0SPGlYnOajjtGCpwSPSkQ1Kd_TFjJ", "https://web.archive.org/web/20150701150124/https://mtc.cdn.vine.co/r/videos/EDF80319681073748724851036160_18e0a9a79a0.4.8.9237106156714910877.mp4?versionId=oqNuuq5mp30bzB.rhpIo03kK4ehudLuO", "https://web.archive.org/web/20150701150124/https://mtc.cdn.vine.co/r/videos/7E4FC67C2C1073748191188504576_15a4e1a92cc.4.8.4651574225934811078.mp4?versionId=mogRRUm6RFcbNKSr2DBTg76xv21EJZFR", "https://web.archive.org/web/20150701150124/https://mtc.cdn.vine.co/r/videos/2582AEC9041073720145618280448_1082dcd0fc6.4.8.17799149377186404048.mp4?versionId=Mi2tG_ycFmy2B5usrIbhRLE2YHUjC9OR", "https://web.archive.org/web/20150701150124/https://mtc.cdn.vine.co/r/videos/6D523655C21073718878686875648_1bc4941a37c.4.8.2685998083489828362.mp4?versionId=vMn3E1Yd_aopLqsTbf37Ko2aj2yHB8lm"],
        rawEmployeeGifs: ["images/jobs/employee-gifs/Mr1UQjDmhLi-8c7da40b374fac8e9c9918857a617b14.gif", "images/jobs/employee-gifs/Mr1I3O9uq1P-03f42cebecb7e1b75d6b4cae6624edd2.gif", "images/jobs/employee-gifs/Mr1pXa2lh1q-21a5414b2ea6f02bc40242402bd521a6.gif", "images/jobs/employee-gifs/Mr1wb0XBaPE-cba94b7368c67aa53f74aaa47ffd0906.gif", "images/jobs/employee-gifs/Mr1rA3LumOK-863efd75d6b5c00effa8b6c70ec3dadb.gif", "images/jobs/employee-gifs/Mr15jwxeBnZ-1a591b178c1acc602f164730a4a866b9.gif", "images/jobs/employee-gifs/Mr1etb5HTu5-692326914efadd80e196b5eac64fae8f.gif", "images/jobs/employee-gifs/Mr1OUA96Z6I-8e55cdbb48875db43399dcbd6c2d5d56.gif", "images/jobs/employee-gifs/Mr1h1bUIV97-675e0bbcec1c3f65c79941d2783e3777.gif", "images/jobs/employee-gifs/Mr1Kh16UzT7-8d60277872eeb01b61993c31443c66c3.gif", "images/jobs/employee-gifs/Mr1ZvLQajLg-382176955261239cc1aecfc56f2fada9.gif", "images/jobs/employee-gifs/Mr17Z7QtBLJ-557fa4bcddc8d0ee99ecdb057ba0d608.gif", "images/jobs/employee-gifs/Mr1uP5XLLhI-84b998cc7dc6b45a6430a68cfc72c57f.gif", "images/jobs/employee-gifs/MrJYeQ6dWYv-32f9bfc0da11aba8aae57e261a66b54e.gif", "images/jobs/employee-gifs/MrJ20qDr11Z-c243111bf833acf1b4316118211422e1.gif", "images/jobs/employee-gifs/MrJQmdxunXp-9a5fdfc21df77f44c9e683d169e6146e.gif", "images/jobs/employee-gifs/MrJxODBO9Ud-8c1a12a955d405d1aac8c6fc9cb58993.gif", "images/jobs/employee-gifs/MrJPXZBJ1wQ-a768c0df11114e153ec4d010c17c796b.gif", "images/jobs/employee-gifs/Mr5YmU62551-cd35d25f89e795d8cf22b9baf1e7ee8b.gif", "images/jobs/employee-gifs/Mr59OhdhLTe-ad7b76e1eefd06e3150ba3b93e1e0915.gif"],
        init: function () {
            this._super(), this.send("resumePerkAnimation")
        },
        isMacFirefox: !!navigator.userAgent.match(/Macintosh.*Firefox/),
        currentPerkIndex: 0,
        currentPerk: function () {
            return this.get("perks")[this.get("currentPerkIndex")]
        }.property("currentPerkIndex"),
        currentPerkClassName: function () {
            return this.get("currentPerk").className
        }.property("currentPerk"),
        useEmployeeGifs: function () {
            return this.get("isMobile") || this.get("isMacFirefox")
        }.property("isMobile"),
        employeeVines: function () {
            for (var e = this.get("rawEmployeeVines").slice(0, this.get("rawEmployeeVines").length), t = [], a = 0; 12 > a; a++) t.push(e.splice(Math.round(Math.random() * (e.length - 1)), 1)[0]);
            return t
        }.property("rawEmployeeVines"),
        employeeGifs: function () {
            for (var e = this.get("rawEmployeeGifs").slice(0, this.get("rawEmployeeGifs").length), t = [], a = 0; 16 > a; a++) t.push(e.splice(Math.round(Math.random() * (e.length - 1)), 1)[0]);
            return t
        }.property("rawEmployeeGifs"),
        allJobsColumns: function () {
            for (var e = this.get("all"), t = 3, a = [], n = 0; n < e.length; n++) a.length - 1 < n % t && a.push([]), a[n % t].push(e[n]);
            return a
        }.property("all"),
        nonEngineeringJobs: function () {
            return this.get("all").filter(function (e) {
                return "Software Engineering" !== e.category
            })
        }.property("all"),
        engineeringJobs: function () {
            return this.get("all").filter(function (e) {
                return "Software Engineering" === e.category
            })
        }.property("all"),
        currentJobChanged: function () {
            var e = this.get("current");
            e && this.send("openModalForJobId", e.id)
        }.observes("current"),
        perkSliderStyle: function () {
            return "left:" + this.get("currentPerkIndex") * $("section.perks").width() * -1 + "px"
        }.property("currentPerkIndex"),
        actions: {
            openModalForJobId: function (e) {
                this.send("showModal", "job", {
                    content: this.get("all"),
                    applying: !1,
                    jobIdToShow: e,
                    routeAfterClose: "jobs"
                }), this.send("scrollToTop")
            },
            nextPerk: function () {
                var e = this.get("currentPerkIndex") + 1;
                e > this.get("perks").length - 1 && (e = 0), this.set("currentPerkIndex", e)
            },
            prevPerk: function () {
                var e = this.get("currentPerkIndex") - 1;
                0 > e && (e = this.get("perks").length - 1), this.set("currentPerkIndex", e)
            },
            pausePerkAnimation: function () {
                window.clearInterval(this.perkSliderTimer)
            },
            resumePerkAnimation: function () {
                window.clearInterval(this.perkSliderTimer), this.perkSliderTimer = window.setInterval(this.send.bind(this, "nextPerk"), 4e3)
            },
            toggleCredits: function () {
                $(".hero-overlay").toggleClass("showing-credits")
            }
        }
    });
    e["default"] = a
}), define("vine-ember/controllers/login", ["exports", "ember", "vine-ember/services/authentication/mixins/login_controller_mixin"], function (e, t, a) {
    "use strict";
    var n = t["default"].Controller.extend(a["default"], {
        needs: "application",
        isMobile: t["default"].computed.alias("controllers.application.isMobile"),
        message: null,
        actions: {
            twitterSignin: function () {
                this.send("gaq", ["_trackEvent", "Login", "twitter"]);
                var e = this;
                window.createOauthSession = function (t) {
                    e.get("services.user").authTwitter(t.access_token, t.access_token_secret).then(function (t) {
                        e.send("setupSession", t)
                    }, function (t) {
                        e.send("oauthAuthFailed", t)
                    })
                }, window.createOauthError = function (t) {
                    e.send("loginFailed", "An error occured while connecting with Twitter.\n Please try logging in again.")
                }, /CriOS/.test(window.navigator.userAgent) && this.send("bindSessionPolling");
                var t = 550,
                    a = 590,
                    n = "",
                    r = (window.screen.height - a) / 2,
                    i = (window.screen.width - t) / 2;
                window.open(n + "/twitter/oauth/redirect", "twitterOauthWindow", "width=" + t + ",height=" + a + ",top=" + r + ",left=" + i)
            },
            bindSessionPolling: function () {
                var e = window.setInterval(function () {
                    window.localStorage.userId && (this.get("session").init(), this.send("loginSucceeded"), this.send("cleanupSessionPolling"))
                }.bind(this), 500);
                this.set("sessionPoller", e)
            },
            cleanupSessionPolling: function () {
                window.clearInterval(this.get("sessionPoller"))
            },
            setupSession: function (e) {
                this.get("session").setup(e.data).then(function () {
                    this.send("loginSucceeded")
                }.bind(this))
            },
            loginFailed: function (e) {
                var t = "That username and password is incorrect.";
                return "object" == typeof e ? t = e.response.error : e && (t = e), this.set("message", {
                    text: t,
                    type: "error"
                }), !0
            },
            oauthAuthFailed: function () {
                this.send("loginFailed", "We couldn't find a Vine account linked to that Twitter account.")
            },
            resetForm: function () {
                this.setProperties({
                    message: void 0,
                    identification: void 0,
                    password: void 0
                })
            }
        }
    });
    e["default"] = n
}), define("vine-ember/controllers/modal/embed", ["exports", "ember"], function (e, t) {
    "use strict";
    var a = t["default"].ObjectController.extend({
        needs: ["application"],
        isMobile: t["default"].computed.alias("controllers.application.isMobile"),
        modalSelector: ".embed-modal",
        embedSize: 600,
        embedType: "simple",
        audioEnabled: !1,
        locationOrigin: function () {
            return window.location.protocol + "//" + window.location.hostname + (window.location.port ? ":" + window.location.port : "")
        }.property(),
        hostScriptSrc: function () {
            return ("vine.co" === window.location.host ? "https://web.archive.org/web/20150701150124/https://platform.vine.co" : this.get("locationOrigin")) + "/static/scripts/embed.js"
        }.property(),
        embedSrc: function () {
            var e = {},
                t = this.get("locationOrigin") + "/v/" + this.get("shortId") + "/embed/" + this.get("embedType");
            return this.get("audioEnabled") && (e.audio = 1), e = $.param(e), e && (t += "?" + e), t
        }.property("embedType", "shortId", "audioEnabled"),
        isPostcardEmbed: t["default"].computed.equal("embedType", "postcard"),
        isSimpleEmbed: t["default"].computed.equal("embedType", "simple"),
        isSize600: t["default"].computed.equal("embedSize", 600),
        isSize480: t["default"].computed.equal("embedSize", 480),
        isSize300: t["default"].computed.equal("embedSize", 300),
        iframeHtml: function () {
            return ['<iframe src="', this.get("embedSrc"), '" width="', this.get("embedSize"), '" height="', this.get("embedSize"), '" frameborder="0"></iframe>'].join("")
        }.property("embedSrc", "embedSize"),
        embedCode: function () {
            return this.get("iframeHtml") + '<script src="' + this.get("hostScriptSrc") + '"></script>'
        }.property("iframeHtml", "hostScriptSrc"),
        actions: {
            toggleAudio: function () {
                this.toggleProperty("audioEnabled")
            },
            setEmbedType: function (e) {
                this.set("embedType", e)
            },
            setEmbedSize: function (e) {
                this.set("embedSize", e)
            }
        }
    });
    e["default"] = a
}), define("vine-ember/controllers/modal/flash-error", ["exports", "ember"], function (e, t) {
    "use strict";
    var a = t["default"].ObjectController.extend();
    e["default"] = a
}), define("vine-ember/controllers/modal/job", ["exports", "ember"], function (e, t) {
    "use strict";
    var a = t["default"].ObjectController.extend({
        needs: ["application"],
        isMobile: t["default"].computed.alias("controllers.application.isMobile"),
        modalSelector: ".job-modal",
        job: function () {
            return this.get("content").findBy("id", this.get("jobIdToShow"))
        }.property("jobIdToShow"),
        secureApplyUrl: function () {
            return this.get("job.apply-url").replace(/http/, "https")
        }.property("job"),
        escapedShareUrl: function () {
            return encodeURIComponent(document.location.protocol + "//" + document.location.host + "/jobs/" + this.get("jobIdToShow"))
        }.property("jobIdToShow"),
        escapedShareTitle: function () {
            return encodeURIComponent("Vine is hiring a " + this.get("job.title") + ". Apply now.")
        }.property("job.title"),
        twitterShareUrl: function () {
            return "https://twitter.com/share?text=" + this.get("escapedShareTitle") + "&url=" + this.get("escapedShareUrl")
        }.property("escapedShareUrl", "escapedShareTitle"),
        facebookShareUrl: function () {
            return "http://www.facebook.com/sharer.php?s=100&p[url]=" + this.get("escapedShareUrl")
        }.property("escapedShareUrl"),
        linkedInShareUrl: function () {
            return "http://www.linkedin.com/shareArticle?mini=true&url=" + this.get("escapedShareUrl") + "&title=" + this.get("escapedShareTitle")
        }.property("escapedShareUrl", "escapedShareTitle"),
        emailShareUrl: function () {
            return "mailto:?subject=" + this.get("escapedShareTitle") + "&body=" + this.get("escapedShareUrl")
        }.property("escapedShareUrl", "escapedShareTitle"),
        actions: {
            apply: function () {
                this.set("applying", !0)
            }
        }
    });
    e["default"] = a
}), define("vine-ember/controllers/modal/login", ["exports", "ember"], function (e, t) {
    "use strict";
    var a = t["default"].Controller.extend({
        needs: ["login", "application"],
        actions: {
            doSuccessEvent: function () {
                this.get("successEvent") && (this.get("successEvent")(), this.set("successEvent", void 0))
            },
            hideModal: function () {
                return this.set("successEvent", void 0), !0
            }
        }
    });
    e["default"] = a
}), define("vine-ember/controllers/modal/post", ["exports", "ember", "vine-ember/mixins/fullscreen"], function (e, t, a) {
    "use strict";
    var n = t["default"].ArrayController.extend(a["default"], {
        itemController: "post",
        modalSelector: ".modal.post-navigator",
        isModal: !0
    });
    e["default"] = n
}), define("vine-ember/controllers/modal/report", ["exports", "ember"], function (e, t) {
    "use strict";
    var a = t["default"].ObjectController.extend({
        needs: ["application"],
        isMobile: t["default"].computed.alias("controllers.application.isMobile"),
        action: "block",
        reason: null,
        error: null,
        isBlock: !0,
        isReport: !1,
        isConfirmation: !1,
        confirmation: "Thanks for your feedback.",
        init: function () {
            this._super(), this.get("services.complaint").getCategory("post").then(function (e) {
                this.setProperties({
                    prompt: e.prompt,
                    choices: e.choices
                })
            }.bind(this))
        },
        actionChanged: function () {
            this.set("error", null)
        }.observes("isBlock", "isReport"),
        submitText: function () {
            return this.get("isReport") ? "Report" : "Block"
        }.property("isBlock", "isReport"),
        disableSubmit: function () {
            return !this.get("isBlock") && !this.get("isReport")
        }.property("isBlock", "isReport"),
        _blockUser: function () {
            return this.get("services.user").blockUser(this.get("userIdStr"), this.get("session.userId")).then(function () {
                this.send("gaq", ["_trackEvent", "User", "block"])
            }.bind(this))
        },
        _reportPost: function () {
            return this.get("services.post").report(this.get("postIdStr"), this.get("reason")).then(function () {
                this.send("gaq", ["_trackEvent", "Post", "report"])
            }.bind(this))
        },
        actions: {
            selectReason: function (e, t) {
                this.setProperties({
                    error: null,
                    reason: e,
                    confirmation: t
                })
            },
            submitReport: function () {
                this.set("error", null);
                var e = [];
                return this.get("isBlock") && e.push(this._blockUser()), this.get("isReport") && e.push(this._reportPost()), e.length ? void t["default"].RSVP.all(e).then(function () {
                    this.send("handleSuccess")
                }.bind(this))["catch"](function (e) {
                    this.send("handleError", e)
                }.bind(this)) : void this.set("error", {
                    message: "No action selected."
                })
            },
            handleSuccess: function (e) {
                this.set("isConfirmation", !0), t["default"].run.later(this, function () {
                    this.get("timeline") ? this.get("isBlock") ? this.get("timeline").send("removeUsersPostsFromTimeline", this.get("userIdStr")) : this.get("isReport") && this.get("timeline").send("removePostFromTimeline", this.get("userIdStr")) : this.transitionToRoute("index"), this.send("hideModal")
                }, 1e3)
            },
            handleError: function (e) {
                e && e.response && e.response.error ? this.set("error", {
                    message: e.response.error
                }) : this.set("error", !0)
            },
            reset: function () {
                this.setProperties({
                    action: "block",
                    reason: null,
                    error: null,
                    isBlock: !0,
                    isReport: !1,
                    isConfirmation: !1,
                    confirmation: "Thanks for your feedback."
                })
            }
        }
    });
    e["default"] = a
}), define("vine-ember/controllers/modal/vm", ["exports", "ember"], function (e, t) {
    "use strict";
    var a = t["default"].Controller.extend({
        needs: ["application"],
        isMobile: t["default"].computed.alias("controllers.application.isMobile"),
        modalSelector: ".vm-modal",
        categorizedRecipients: [],
        autocompleteRecipients: [],
        loadedUsers: {},
        recipients: [],
        anchor: void 0,
        error: void 0,
        confirmation: !1,
        _addRecipientsToList: function (e, t) {
            this.set("anchor", t), e.forEach(function (e) {
                (0 === this.get("categorizedRecipients").length || this.get("categorizedRecipients.lastObject.category") !== e.section) && this.get("categorizedRecipients").pushObject({
                    category: e.section,
                    users: []
                }), this.get("categorizedRecipients.lastObject.users").pushObject(this._getUserModel(e))
            }.bind(this))
        },
        _getUserModel: function (e) {
            if (!this.get("loadedUsers")[e.userIdStr]) {
                var t = e.get("backgroundColor");
                "#00bf8f" === t && (t = "#333333"), e.set("textColor", t), this.get("loadedUsers")[e.userIdStr] = e
            }
            return this.get("loadedUsers")[e.userIdStr]
        },
        recipientChanged: $.debounce(300, function () {
            return this.get("recipient") ? void this.send("loadAutocompleteResults", !0) : void this.send("resetAutocomplete")
        }).observes("recipient"),
        isAutocomplete: function () {
            return !!this.get("autocompleteRecipients.length")
        }.property("autocompleteRecipients.length"),
        sendDisabled: function () {
            return t["default"].isEmpty(this.get("recipients")) || this.get("sendingVm")
        }.property("recipients.length", "sendingVm"),
        actions: {
            reloadRecipients: function () {
                this.get("services.user").vmRecipients().then(function (e) {
                    this._addRecipientsToList(e.posts, e.pagination.anchor)
                }.bind(this))
            },
            paginateRecipients: function () {
                this.set("paginating", !0), this.get("services.user").vmRecipients({
                    anchor: this.get("anchor")
                }).then(function (e) {
                    this._addRecipientsToList(e.posts, e.pagination.anchor)
                }.bind(this))["finally"](function () {
                    t["default"].run.scheduleOnce("afterRender", function () {
                        this.set("paginating", !1)
                    }.bind(this))
                }.bind(this))
            },
            loadAutocompleteResults: function (e) {
                this.set("paginating", !0), e && this.set("autocompletePagination", void 0), this.get("services.conversation").searchRecipients(this.get("recipient"), this.get("autocompletePagination")).then(function (t) {
                    this.set("autocompletePagination", t.pagination);
                    var a = t.posts.map(function (e) {
                        return this._getUserModel(e)
                    }.bind(this));
                    e ? this.set("autocompleteRecipients", a) : this.get("autocompleteRecipients").pushObjects(a)
                }.bind(this))["finally"](function () {
                    t["default"].run.scheduleOnce("afterRender", function () {
                        this.set("paginating", !1)
                    }.bind(this))
                }.bind(this))
            },
            addRecipient: function (e) {
                return e.get("selected") ? void this.send("removeRecipient", e) : (e.set("selected", !0), this.get("recipients").pushObject(e), void this.send("resetAutocomplete"))
            },
            removeRecipient: function (e) {
                for (var t = -1, a = 0; a < this.get("recipients").length; a++)
                    if (this.get("recipients").objectAt(a).userIdStr === e.userIdStr) {
                        t = a;
                        break
                    } t >= 0 && this.get("recipients").removeAt(t), e.set("selected", !1)
            },
            vmShare: function () {
                if (this.get("recipients.length") && !this.get("sendingVm")) {
                    this.set("sendingVm", !0);
                    var e = this.get("recipients").map(function (e) {
                        return e.userIdStr
                    });
                    this.get("services.conversation").vmPost(this.get("post.postIdStr"), e).then(function (e) {
                        this.set("confirmation", !0), this.send("gaq", ["_trackEvent", "Post", "vm"]), t["default"].run.later(this, function () {
                            this.send("hideModal"), this.send("reset")
                        }, 1e3)
                    }.bind(this))["catch"](function (e) {
                        e && e.response && e.response.error ? this.set("error", e.response.error) : this.set("error", !0)
                    }.bind(this))["finally"](function () {
                        this.set("sendingVm", !1)
                    }.bind(this))
                }
            },
            resetAutocomplete: function () {
                this.setProperties({
                    recipient: void 0,
                    autocompletePagination: void 0
                }), this.get("autocompleteRecipients").length > 0 && this.set("autocompleteRecipients", [])
            },
            reset: function () {
                this.get("recipients").forEach(function (e) {
                    e.set("selected", !1)
                }), this.send("resetAutocomplete"), this.setProperties({
                    recipients: [],
                    categorizedRecipients: [],
                    anchor: void 0,
                    confirmation: !1,
                    error: void 0
                })
            }
        }
    });
    e["default"] = a
}), define("vine-ember/controllers/permalink-post", ["exports", "ember", "vine-ember/controllers/post"], function (e, t, a) {
    "use strict";
    var n = a["default"].extend({
        queryParams: ["quality"],
        quality: null,
        needs: "related-videos/playing-vine",
        relatedVideosPlayer: t["default"].computed.alias("controllers.related-videos/playing-vine"),
        commentsExpanded: !1,
        isPermalink: !0,
        isModal: t["default"].computed.alias("parentController.isModal"),
        transitioningRelatedVideos: !1,
        selectedPost: void 0,
        canShowRelatedVideos: !1,
        relatedVideosDataReady: !1,
        shouldOpenEmbedModalChanged: function () {
            this.get("shouldOpenEmbedModal") && this.send("openEmbedModal", this.get("shortId"))
        }.observes("shouldOpenEmbedModal"),
        shouldShowMobileInterstitial: function () {
            var e;
            try {
                e = JSON.parse(window.localStorage.getItem("hideMobileInterstitialUntil"))
            } catch (t) {}
            return this.get("isMobile") && (!e || Date.now() > e)
        }.property("isMobile"),
        onShare: "showRelatedVideos",
        fetchRelatedVideos: function () {
            if (!this.get("isModal") && this.get("postIdStr") && !this.get("transitioningRelatedVideos")) {
                this.set("relatedVideosDataReady", !1);
                var e;
                this.get("isMobile") && (e = {
                    mobile: 1
                });
                var t = {
                    post_id: this.get("postIdStr")
                };
                return this.get("services.timeline").relatedVideos(t, {
                    size: 5
                }, e).then(function (e) {
                    this.setProperties({
                        relatedPosts: e.posts,
                        relatedPagination: e.pagination,
                        relatedParams: t,
                        relatedVideosDataReady: !0
                    })
                }.bind(this))
            }
        }.observes("postIdStr", "transitioningRelatedVideos").on("init"),
        relatedVideosVisible: function () {
            return this.get("isModal") ? !1 : this.get("canShowRelatedVideos") && this.get("relatedVideosDataReady")
        }.property("canShowRelatedVideos", "relatedVideosDataReady", "isModal"),
        actions: {
            openEmbedModal: function (e) {
                this.send("showModal", "embed", {
                    content: {
                        shortId: this.get("shortId"),
                        embedType: "simple"
                    },
                    routeAfterClose: "permalink-post"
                }), this.send("scrollToTop")
            },
            showRelatedVideos: function () {
                this.get("canShowRelatedVideos") || this.set("canShowRelatedVideos", !0)
            },
            like: function () {
                this._super(), this.send("showRelatedVideos")
            },
            revine: function () {
                this._super(), this.send("showRelatedVideos")
            },
            comment: function () {
                this._super(), this.send("showRelatedVideos")
            },
            facebookShare: function () {
                this._super(), this.send("showRelatedVideos")
            },
            tweet: function () {
                this._super(), this.send("showRelatedVideos")
            },
            resetRelatedVideosState: function () {
                this.setProperties({
                    selectedPost: void 0,
                    canShowRelatedVideos: !1
                })
            },
            transitionToRelatedVideo: function (e, t) {
                var a = {
                    pos: t
                };
                this.get("isMobile") && (a.mobile = 1, this.send("resetRelatedVideosState")), this.get("services.timeline").post({
                    short_id: e.get("shortId")
                }, a).then(function (e) {
                    this.transitionToRoute("permalink-post", e)
                }.bind(this));
                var n = e.get("secureThumbnailUrl");
                n === this.get("secureThumbnailUrl") || this.get("isMobile") || this.setProperties({
                    triggerRelatedVideosTransition: !0
                })
            },
            trackRelatedVideoEvent: function (e, t) {
                t = t || {}, this.send("gaq", ["_trackEvent", "Related Videos", e, t.label, t.value, !!t.nonInteraction])
            },
            hideMobileInterstitial: function () {
                try {
                    var e = window.moment().add(3, "days").valueOf();
                    window.localStorage.setItem("hideMobileInterstitialUntil", e)
                } catch (t) {}
            },
            downloadVine: function () {
                this.send("goToStore", null, "mobile interstitial", {
                    apple: "https://web.archive.org/web/20150701150124/https://itunes.apple.com/app/apple-store/id592447445?pt=1613620&ct=interstitialdownload&mt=8"
                })
            },
            openPostInApp: function () {
                window.location.href = "vine://post/" + this.get("postIdStr") + "?src=openInApp"
            }
        }
    });
    e["default"] = n
}), define("vine-ember/controllers/playing-vine", ["exports", "ember", "vine-ember/services/video-preload-queue", "vine-ember/services/loop-tracker"], function (e, t, a, n) {
    "use strict";
    var r = .5,
        i = t["default"].Controller.extend({
            needs: ["application"],
            isMobile: t["default"].computed.alias("controllers.application.isMobile"),
            name: "main",
            forceFallback: !1,
            mediaSourceEnabledBrowsers: {
                Chrome: 30
            },
            vines: t["default"].A([]),
            visuallySortedVines: t["default"].computed.sort("vines", function (e, t) {
                var a = e.el.offset(),
                    n = t.el.offset();
                return a.top === n.top ? a.left - n.left : a.top - n.top
            }),
            continuous: !1,
            forceMute: !1,
            forceUnmute: !1,
            defaultVideoSize: 535,
            recordedLoop: !1,
            player: null,
            playing: null,
            loading: !0,
            videoPreloadQueue: a["default"],
            checkViewportScheduled: !1,
            shouldLoop: function () {
                return !this.get("continuous")
            }.property("continuous"),
            visibilityDidChange: function () {
                if (!this.get("manuallyPaused")) {
                    var e = this.get("controllers.application.isVisible"),
                        t = this.get("player");
                    if (t) {
                        var a = this.get("playing");
                        e && a && a.el.is(":visible") ? t.play() : t.pause()
                    }
                }
            }.observes("controllers.application.isVisible"),
            isMediaSourceEnabledBrowser: function () {
                if (/OPR\/\d+/.test(window.navigator.userAgent)) return !1;
                var e = this.get("mediaSourceEnabledBrowsers"),
                    t = new RegExp("(" + Object.keys(e).join("|") + ")/[0-9]+", "i"),
                    a = window.navigator.userAgent.match(t),
                    n = !1;
                if (a && a.length) {
                    var r = a[0].split("/"),
                        i = e[r[0]],
                        d = parseInt(r[1], 10);
                    n = d > i
                }
                return n
            }.property("mediaSourceEnabledBrowsers"),
            _canPlayMediaSource: function (e) {
                window.MediaSource = window.MediaSource || window.WebKitMediaSource;
                var t = e.get("secureVideoUrls").findBy("format", "dash"),
                    a = this.get("isMediaSourceEnabledBrowser"),
                    n = this.get("player");
                return !this.get("forceFallback") && a && "native" === n.pluginType && !this.get("continuous") && t && window.MediaSource
            },
            _getVideoData: function (e, t) {
                return t = t || {}, t.forceHd = "hd" === (e.get("quality") || "").toLowerCase(), t.needsUrl = !!window.navigator.userAgent.match(/MSIE [1-9][^0-9]/) || "native" !== this.get("player").pluginType, this.get("videoPreloadQueue").getVideoData(e.get("secureVideoUrls"), t)
            },
            _getVideoObject: function (e, t) {
                return t = t || {}, t.forceHd = "hd" === (e.get("quality") || "").toLowerCase(), this.get("videoPreloadQueue").getVideoObject(e.get("secureVideoUrls"), t)
            },
            _getVinesInViewport: function () {
                var e, t, a, n = this.get("visuallySortedVines"),
                    r = $(window).scrollTop(),
                    i = r + $(window).height(),
                    d = 0,
                    s = n.length - 1;
                for (100 > r && (s = d = 0); s > d;) a = d + ~~((s - d) / 2), e = n.objectAt(a).el, t = e.offset().top + e.height(), t >= r ? s = a : d = a + 1;
                for (var c, o, l, h = [], u = [], p = 0, m = d; m < n.length && (o = n.objectAt(m), l = o.el.offset().top, t = l + o.el.height(), !(l > i)); m++)
                    if (h.push(o), !o.preventAutoplay && !o.post.get("explicitContent")) {
                        var v = Math.min(t, i) - Math.max(l, r);
                        v > p && (c = o, p = v), u.push(o)
                    } return {
                    all: h,
                    playable: u,
                    mostInViewport: c
                }
            },
            _onEnded: function (e, t) {
                e = e || this.get("player"), e && (this.set("recordedLoop", !1), this.get("shouldLoop") && !t && (e.setCurrentTime(0), "native" !== e.pluginType && e.pause(), e.play(), this.get("loopSuccessChecker") && this.get("loopSuccessChecker")()), this.get("endedEvent") && this.get("endedEvent")())
            },
            _onTimeUpdate: function (e) {
                if (!this.get("recordedLoop") && e.currentTime > r) {
                    var t = this.get("playing");
                    t && t.post.get("postIdStr") && this.get("loopTracker").recordLoop(t.post.get("postIdStr")), this.set("recordedLoop", !0)
                }
            },
            _onVolumeChange: function () {
                var e = this.get("player");
                if (e) try {
                    if (!e.muted && e.volume > 0) {
                        if (this.get("forceMute")) return e.setMuted(!0), void this.set("audioClass", "off");
                        this.set("audioClass", "on")
                    } else this.set("audioClass", "off")
                } catch (t) {
                    this.get("config.CLIENT_LOGGING") && console.error(t)
                }
            },
            _onForceMuteChanged: function () {
                if (this.get("player") && this.get("player").setMuted) try {
                    if (this.get("forceMute")) this.get("player").setMuted(!0);
                    else {
                        var e = "true" === window.localStorage.post_page_volume;
                        this.get("player").setMuted(!e)
                    }
                } catch (t) {
                    this.get("config.CLIENT_LOGGING") && console.error(t)
                }
            }.observes("forceMute"),
            _onForceUnmuteChanged: function () {
                if (this.get("player") && this.get("player").setMuted) try {
                    if (this.get("forceUnmute")) this.get("player").setMuted(!1), this.set("audioClass", "on");
                    else {
                        var e = "true" === window.localStorage.post_page_volume;
                        this.get("player").setMuted(!e)
                    }
                } catch (t) {
                    this.get("config.CLIENT_LOGGING") && console.error(t)
                }
            }.observes("forceUnmute"),
            _isCurrentlyPlayingVine: function (e) {
                return this.get("playing.post.postIdStr") === e.post.get("postIdStr")
            },
            actions: {
                playerInitialized: function (e, t) {
                    this.get("isMobile") || this.setProperties({
                        player: e,
                        el: t
                    }), this.set("loopTracker", n["default"].create({
                        name: this.get("name")
                    })), $(e).unbind("ended"), $(e).unbind("timeupdate"), $(e).unbind("volumechange"), $(e).bind("ended", function () {
                        this._onEnded(e)
                    }.bind(this)), $(e).bind("timeupdate", function () {
                        this._onTimeUpdate(e)
                    }.bind(this)), $(e).bind("volumechange", function () {
                        this._onVolumeChange(e)
                    }.bind(this)), this.get("attemptedPlay") && this.send("play", this.get("attemptedPlay")), this._onForceMuteChanged(), this._onForceUnmuteChanged(), this._onVolumeChange()
                },
                queuePreload: function (e) {
                    this.get("videoPreloadQueue").queueUrl(e.get("secureVideoUrls"), {
                        isSeamless: this._canPlayMediaSource(e)
                    })
                },
                videoRendered: function (e) {
                    var a = e.post && e.el && e.el.length && e.view;
                    a && (this.get("vines").pushObject(e), this.get("isMobile") || this.get("checkViewportScheduled") || (this.set("checkViewportScheduled", !0), t["default"].run.scheduleOnce("afterRender", this, function () {
                        this.send("checkViewport")
                    })))
                },
                checkViewport: function () {
                    var e = this._getVinesInViewport(),
                        t = e.playable;
                    if (this.get("isMobile")) return void t.forEach(function (e) {
                        this.send("initMobile", e)
                    }.bind(this));
                    var a = e.mostInViewport;
                    a && a !== this.get("playing") && this.send("play", a), this.get("isMobile") || e.all.forEach(function (e) {
                        this.send("queuePreload", e.post)
                    }.bind(this))
                },
                initMobile: function (e) {
                    if (!e.view.get("player")) {
                        var t = e.el.find(".vine-video-container"),
                            a = e.video || t.find("video"),
                            n = t.width(),
                            r = {
                                defaultVideoWidth: n,
                                defaultVideoHeight: n,
                                features: [],
                                plugins: ["flash"],
                                pluginPath: "/assets/swf/",
                                enablePluginSmoothing: !0,
                                flashName: "flashmediaelement.2.swf",
                                startVolume: 1,
                                success: function (t) {
                                    e.view.set("player", t), $(t).bind("webkitendfullscreen", function () {
                                        e.view.send("pause")
                                    }), this.get("initMobileEvent") && this.get("initMobileEvent")(t), this.send("playerInitialized", t, e.el)
                                }.bind(this),
                                error: function (e) {
                                    window.console.log("Player initialization failed.", e), this.send("gaq", ["_trackEvent", "Post", "video initialization error"])
                                }
                            },
                            i = this.get("mediaElement") || window.MediaElement;
                        i(a[0], r)
                    }
                },
                play: function (e) {
                    if (!e) {
                        if (!this.get("playing")) return;
                        e = this.get("playing")
                    }
                    if (this.get("isMobile")) return void this.send("playMobile", e);
                    if (e.post.get("explicitContent")) return this.send("pause"), t["default"].$("#outer-wrapper").before(this.get("el")), void this.set("attemptedPlay", e);
                    var a = this.get("player"),
                        n = this.get("el");
                    if (!n || !a) return void this.set("attemptedPlay", e);
                    this.send("gaq", ["_trackEvent", "Post", "play"]);
                    var r = Math.max(e.el.width(), e.el.height());
                    a.setVideoSize(r, r);
                    var i = n.parent()[0] !== e.el[0];
                    i && e.el.append(n), this.get("continuous") || n.addClass("almost-invisible"), this.get("loopTracker").startPlaying(e.post.get("postIdStr")), this.get("loadingTimeout") && t["default"].run.cancel(this.get("loadingTimeout"));
                    var d = 300;
                    this.set("loadingTimeout", t["default"].run.later(null, function () {
                        this.send("showLoading", e)
                    }.bind(this), d)), this.get("mediaSourceEndedTrigger") && $(a).unbind("timeupdate", this.get("mediaSourceEndedTrigger")), this._canPlayMediaSource(e.post) ? this.send("loadMediaSource", e) : this.send("playFallback", e)
                },
                loadMediaSource: function (e) {
                    var t = this.get("player");
                    if (this._isCurrentlyPlayingVine(e)) try {
                        return t.setCurrentTime(0), t.play(), void $(t).one("playing", function () {
                            this.send("setVisible", e)
                        }.bind(this))
                    } catch (a) {
                        this.get("config.CLIENT_LOGGING") && console.error(a)
                    }
                    this.set("playing", e), this.send("clearMediaSource"), this._getVideoData(e.post, {
                        isSeamless: !0
                    }).then(function (t) {
                        this.send("mediaSourceLoaded", t, e)
                    }.bind(this))["catch"](function (t) {
                        this.send("playFallback", e)
                    }.bind(this))["finally"](function () {
                        this.get("videoPreloadQueue").set("paused", !1)
                    }.bind(this))
                },
                mediaSourceLoaded: function (e, t) {
                    if (this._isCurrentlyPlayingVine(t)) {
                        var a, n = this.get("player"),
                            r = .05,
                            i = 25,
                            d = new window.MediaSource;
                        this.set("currentMediaSource", d), $(n).attr("poster", t.post.get("secureThumbnailUrl")), n.setSrc(window.URL.createObjectURL(d));
                        var s = new Uint8Array(e),
                            c = this;
                        d.addEventListener("sourceopen", function () {
                            function o() {
                                var e = a.buffered.length > 0 ? a.buffered.end(a.buffered.length - 1) : r;
                                return u && u - m > e ? (a.removeEventListener("updateend", g), void c.send("playFallback", t)) : (a.timestampOffset = e - r, a.appendWindowEnd = e + h - 2 * r, a.appendWindowStart = e, a.appendBuffer(s), void(u = a.appendWindowEnd))
                            }
                            try {
                                a = d.addSourceBuffer('video/mp4; codecs="avc1.4d401e, mp4a.40.2"'), c.set("currentSourceBuffer", a)
                            } catch (l) {
                                return c.get("config.CLIENT_LOGGING") && console.error(l), void c.send("playFallback", t)
                            }
                            for (var h, u, p = [], m = .5, v = 0; i > v; v++) p.push(function () {
                                if (c.get("playing") !== t) return void a.removeEventListener("updateend", g);
                                try {
                                    o()
                                } catch (e) {
                                    return c.get("config.CLIENT_LOGGING") && console.error(e), a.removeEventListener("updateend", g), void c.send("playFallback", t)
                                }
                            });
                            p.push(function () {
                                function e() {
                                    Math.floor(n.currentTime / h) > a && (a++, c._onEnded(n, !0))
                                }
                                $(n).one("playing", function () {
                                    c.send("setVisible", t)
                                });
                                var a = 0;
                                $(n).bind("timeupdate", e), c.set("mediaSourceEndedTrigger", e), d.endOfStream(), n.currentTime = r + .011, n.play()
                            });
                            var g = function () {
                                p.length && p.shift()()
                            };
                            a.addEventListener("updateend", g), window.mp4({
                                file: e,
                                type: "arraybuffer"
                            }, function (e, a) {
                                return e ? void c.send("playFallback", t) : (h = parseFloat(a["com.vineapp.duration"]), void p.shift()())
                            })
                        })
                    }
                },
                playFallback: function (e) {
                    var t = this.get("player");
                    this.set("playing", e), $(t).one("canplay", function () {
                        this.get("playing") === e && ($(t).one("playing", function () {
                            this.send("setVisible", e)
                        }.bind(this)), t.play())
                    }.bind(this)), $(t).attr("poster", e.post.get("secureThumbnailUrl"));
                    try {
                        this._getVideoData(e.post, {
                            isSeamless: !1
                        }).then(function (a) {
                            if (this._isCurrentlyPlayingVine(e)) {
                                var n = "string" == typeof a ? a : window.URL.createObjectURL(a);
                                t.setSrc([{
                                    src: n,
                                    type: "video/mp4"
                                }]), t.play()
                            }
                        }.bind(this))
                    } catch (a) {
                        this.get("config.CLIENT_LOGGING") && console.error(a)
                    }
                },
                clearMediaSource: function () {
                    if (this.get("player") && this.get("currentMediaSource") && this.get("currentSourceBuffer")) {
                        $(this.get("player")).removeAttr("src");
                        try {
                            this.get("currentMediaSource").removeSourceBuffer(this.get("currentSourceBuffer"))
                        } catch (e) {
                            this.get("config.CLIENT_LOGGING") && console.error(e)
                        }
                    }
                },
                pause: function () {
                    if (this.get("isMobile")) return void this.send("pauseMobile");
                    try {
                        this.get("player").pause()
                    } catch (e) {}
                    this.set("playing", null)
                },
                playMobile: function (e) {
                    if (0 !== e.el.length && e.view && e.view.get("player")) {
                        e.controlEls && e.controlEls.hide(), e.playerEls && e.playerEls.show(), this.send("pauseMobile"), this.send("gaq", ["_trackEvent", "Post", "play"]), this.send("gaq", ["_trackEvent", "Post", "mobile play"]);
                        var t = e.view.get("player");
                        t || (e.view.$("video").attr("loop", "true"), t = e.view.$("video")[0]), $(t).one("webkitbeginfullscreen", function () {
                            t.play()
                        }), t.setSrc([{
                            src: e.post.get("secureSDVideoUrl"),
                            type: "video/mp4"
                        }]), t.play(), this.setProperties({
                            playing: e,
                            player: t
                        }), this.get("loopTracker").startPlaying(e.post.get("postIdStr"))
                    }
                },
                pauseMobile: function () {
                    var e = this.get("player");
                    e && (e.pause(), this.set("player", null));
                    var t = this.get("playing");
                    t && (t.controlEls.show(), t.playerEls.hide(), this.set("playing", null))
                },
                toggleMute: function () {
                    var e = this.get("player");
                    e && (e.muted ? (window.localStorage.post_page_volume = !0, e.setMuted(!1)) : (delete window.localStorage.post_page_volume, e.setMuted(!0)))
                },
                togglePlay: function () {
                    var e = this.get("player");
                    e && (e.paused ? e.play() : e.pause(), this.set("manuallyPaused", e.paused))
                },
                explicitChanged: function (e) {
                    e ? (this.send("pause"), t["default"].$("#outer-wrapper").before(this.get("el"))) : this.get("attemptedPlay") && this.send("play", this.get("attemptedPlay"))
                },
                removePlayer: function () {
                    this.get("playing") && this.send("pause"), this.get("isMobile") || (t["default"].$("#outer-wrapper").before(this.get("el")), this.get("player") && this.get("player").setVideoSize(this.get("defaultVideoSize"), this.get("defaultVideoSize"))), this.set("playing", null)
                },
                reset: function () {
                    this.send("removePlayer"), this.setProperties({
                        continuous: !1,
                        attemptedPlay: null,
                        endedEvent: null,
                        checkViewportScheduled: !1,
                        currentSourceBuffer: void 0,
                        currentMediaSource: void 0,
                        forceFallback: !1
                    }), this.set("vines", []), this.get("videoPreloadQueue").reset()
                },
                setVisible: function (e) {
                    this.get("el").removeClass("almost-invisible"), t["default"].run.cancel(this.get("loadingTimeout")), this.send("hideLoading", e)
                },
                showLoading: function (e) {
                    var t = e.el.find(".loading-bar");
                    if (!t.is(":visible") && !this.get("loadingInterval")) {
                        t.show();
                        var a = 70 + 10 * Math.random(),
                            n = e.el.width();
                        t.width(a / 100 * n);
                        var r = setInterval(function () {
                            a += 10 * Math.random(), t.width(a / 100 * n)
                        }, 100);
                        this.setProperties({
                            loading: !0,
                            loadingInterval: r
                        })
                    }
                },
                hideLoading: function (e) {
                    t["default"].run.cancel(this.get("loadingTimeout")), clearInterval(this.get("loadingInterval"));
                    var a = e.el.find(".loading-bar");
                    a.width(e.el.width()), t["default"].run.later(function () {
                        a.fadeOut(400, function () {
                            a.width(0)
                        })
                    }, 1200), this.setProperties({
                        loading: !1,
                        loadingTimeout: null,
                        loadingInterval: null
                    })
                }
            }
        });
    e["default"] = i
}), define("vine-ember/controllers/playlists", ["exports", "ember", "vine-ember/controllers/timeline"], function (e, t, a) {
    "use strict";
    var n = a["default"].extend({
        timelineName: function () {
            return this.get("currentPost.context.list.title")
        }.property("currentPost.context.list"),
        _appendObjects: function (e) {
            this.get("lists").pushObjects(e);
            var t = [];
            e.forEach(function (e) {
                t = t.concat(e.map(function (t, a) {
                    return t.context = {
                        list: e.list,
                        positionIndex: a + 1,
                        totalPosts: e.length
                    }, t
                }))
            }), this.get(this.get("paginatedProperty")).pushObjects(t)
        },
        positionIndex: t["default"].computed.alias("currentPost.context.positionIndex"),
        totalPosts: t["default"].computed.alias("currentPost.context.listLength"),
        shareObject: function () {
            return {
                shareUrl: this.get("config.SECURE_HOSTNAME") + "/lists/" + this.get("vanityUrl"),
                description: this.get("title") + " #NowWatching"
            }
        }.property("title", "description"),
        tweetUrl: function () {
            var e = {
                url: this.get("shareObject.shareUrl"),
                text: this.get("shareObject.description"),
                related: "vine"
            };
            return "https://twitter.com/share?" + $.param(e)
        }.property("shareObject.description", "shareObject.shareUrl"),
        fbUrl: t["default"].computed.alias("shareObject.shareUrl")
    });
    e["default"] = n
}), define("vine-ember/controllers/playlists/grid-list", ["exports", "vine-ember/controllers/explore/list"], function (e, t) {
    "use strict";
    var a = t["default"].extend();
    e["default"] = a
}), define("vine-ember/controllers/post", ["exports", "ember", "vine-ember/services/post"], function (e, t, a) {
    "use strict";
    var n = t["default"].ObjectController.extend({
        needs: ["current-user", "playing-vine", "application"],
        currentUser: t["default"].computed.alias("controllers.current-user"),
        playingVine: t["default"].computed.alias("controllers.playing-vine"),
        isMobile: t["default"].computed.alias("controllers.application.isMobile"),
        isIos: /iphone|ipod|ipad/i.test(window.navigator.userAgent),
        hasModal: t["default"].computed.alias("controllers.application.modal"),
        audioEnabledBinding: "controllers.playing-vine.audioEnabled",
        videoHeight: 0,
        videoContainerStyle: function () {
            var e = this.get("backgroundImageStyle");
            return this.get("videoHeight") && (e += " height: " + this.get("videoHeight") + "px;"), e
        }.property("backgroundImageStyle", "videoHeight"),
        postIdClass: function () {
            return "post-" + this.get("postIdStr")
        }.property("postIdStr"),
        shouldHideRevine: function () {
            return this.get("isCurrentUser") && !this.get("reposts.count")
        }.property("isCurrentUser", "reposts.count"),
        _doLike: function () {
            var e = this.get("postIdStr");
            this.get("liked") ? (this.set("liked", 0), a["default"].unLike(e).then(function () {
                this.set("likes.count", this.get("likes.count") - 1), this.decrementProperty("currentUser.likeCount")
            }.bind(this), function () {
                this.set("liked", 1)
            }.bind(this)), this.send("gaq", ["_trackEvent", "Post", "unlike"])) : (this.set("liked", 1), a["default"].like(e).then(function () {
                this.set("likes.count", this.get("likes.count") + 1), this.incrementProperty("currentUser.likeCount")
            }.bind(this), function () {
                this.set("liked", 0)
            }.bind(this)), this.send("gaq", ["_trackEvent", "Post", "like"]))
        },
        _doRevine: function () {
            if (!this.get("session").isCurrentUser(this.get("userIdStr"))) {
                var e = this.get("postIdStr");
                this.get("myRepostId") ? (a["default"].unRevine(this.get("postIdStr"), this.get("myRepostIdStr")).then(function () {
                    this.set("reposts.count", this.get("reposts.count") - 1), this.setProperties({
                        myRepostId: void 0,
                        myRepostIdStr: void 0,
                        repost: void 0
                    })
                }.bind(this)), this.send("gaq", ["_trackEvent", "Post", "unrevine"])) : (a["default"].revine(e).then(function (e) {
                    this.set("reposts.count", this.get("reposts.count") + 1), this.setProperties({
                        myRepostId: 1,
                        myRepostIdStr: e.repostIdStr,
                        repost: {
                            userIdStr: this.get("currentUser.userIdStr"),
                            username: this.get("currentUser.username")
                        }
                    })
                }.bind(this)), this.send("gaq", ["_trackEvent", "Post", "revine"]))
            }
        },
        _doComment: function () {
            var e = this.get("commentText");
            this.set("commentText", void 0), a["default"].comment(this.get("postIdStr"), e).then(function (t) {
                var a = t;
                a.comment = e, a.avatarUrl = this.get("currentUser.avatarUrl"), a.userIdStr = this.get("currentUser.userIdStr"), a.username = this.get("currentUser.username"), this.get("paginatedComments.posts").pushObject(a), this.incrementProperty("paginatedComments.pagination.count"), this.set("comments.dirty", !0)
            }.bind(this)), this.send("gaq", ["_trackEvent", "Post", "comment"])
        },
        _doUnfollowUser: function () {
            this.get("following") && (this.get("services.user").unFollow(this.get("userIdStr")).then(function () {
                this.set("following", 0), this.get("parentController.isTimeline") ? this.send("removeUsersPostsFromTimeline", this.get("userIdStr")) : this.transitionToRoute("index")
            }.bind(this)), this.send("gaq", ["_trackEvent", "User", "unfollow"]))
        },
        _doShowReportModal: function () {
            var e = this.get("model"),
                t = this.get("parentController.isTimeline") ? this.get("parentController") : null;
            this.send("showModal", "report", {
                model: e,
                timeline: t
            })
        },
        actions: {
            like: function () {
                this.send("doAuthenticatedAction", "like this post", function () {
                    this._doLike()
                }.bind(this))
            },
            revine: function () {
                this.send("doAuthenticatedAction", "revine this post", this._doRevine.bind(this))
            },
            comment: function () {
                this.send("doAuthenticatedAction", "comment on this post", this._doComment.bind(this))
            },
            viewExplicit: function () {
                this.toggleProperty("explicitContent"), this.get("playingVine").send("explicitChanged", !1), this.send("gaq", ["_trackEvent", "Post", "view explicit"])
            },
            unfollowUser: function () {
                this.send("doAuthenticatedAction", "unfollow this user", this._doUnfollowUser.bind(this))
            },
            deletePost: function () {
                if (window.confirm("Are you sure you want to delete this post?")) {
                    var e = this.get("postIdStr");
                    a["default"].deletePost(e).then(function () {
                        this.send("removePostFromTimeline", e)
                    }.bind(this))
                }
            },
            openModalView: function (e) {
                return this.get("isMobile") && this.get("shortId") ? void this.transitionTo("permalink-post", this.get("shortId")) : void this.send("showModal", "post", {
                    content: e,
                    videoIndex: e.indexOf(this.get("model"))
                })
            },
            share: function () {
                this.toggleProperty("shareSheetOpen"), this.send("startShareCloseTimer")
            },
            startShareCloseTimer: function () {
                this.send("stopShareCloseTimer"), this.set("shareCloseTimer", window.setTimeout(function () {
                    this.set("shareSheetOpen", !1)
                }.bind(this), 2e3))
            },
            stopShareCloseTimer: function () {
                window.clearTimeout(this.get("shareCloseTimer"))
            },
            facebookShare: function () {
                var e = 670,
                    t = 350,
                    a = window.open(this.get("facebookUrl"), "fbWindow", "width=" + e + ",height=" + t);
                a.moveTo((window.screen.width - e) / 2, (window.screen.height - t) / 2)
            },
            tweet: function () {
                var e = 550,
                    t = 380,
                    a = window.open(this.get("tweetUrl"), "tweetWindow", "width=" + e + ",height=" + t);
                a.moveTo((window.screen.width - e) / 2, (window.screen.height - t) / 2)
            },
            vm: function () {
                var e = this.get("model");
                this.send("doAuthenticatedAction", "share this post with a friend", function () {
                    this.send("showModal", "vm", {
                        post: e
                    })
                }.bind(this))
            },
            showReportModal: function () {
                this.send("doAuthenticatedAction", "block or report", function () {
                    this._doShowReportModal()
                }.bind(this))
            }
        }
    });
    e["default"] = n
}), define("vine-ember/controllers/promo/camera", ["exports", "ember"], function (e, t) {
    "use strict";
    var a = t["default"].Controller.extend({
        needs: ["application"],
        isPlaying: !1,
        heros: new Array(10),
        actions: {
            playVideo: function () {
                this.set("isPlaying", !0)
            },
            stopVideo: function () {
                this.set("isPlaying", !1)
            }
        }
    });
    e["default"] = a
}), define("vine-ember/controllers/related-videos/playing-vine", ["exports", "vine-ember/controllers/playing-vine"], function (e, t) {
    "use strict";
    var a = t["default"].extend({
        name: "related-videos"
    });
    e["default"] = a
}), define("vine-ember/controllers/reset-password", ["exports", "ember", "vine-ember/services/password"], function (e, t, a) {
    "use strict";
    var n = t["default"].Controller.extend({
        queryParams: ["token"],
        token: null,
        message: {
            text: "Enter a new password in the fields below."
        },
        actions: {
            resetPassword: function () {
                var e = this.getProperties("password1", "password2");
                if (e.password1 && e.password2) {
                    if (e.password1 !== e.password2) return void this.set("message", {
                        text: "The passwords do not match.",
                        type: "error"
                    });
                    var t = this.get("token");
                    return t ? void a["default"].resetPassword(t, e.password1).then(function () {
                        this.send("resetPasswordSuccess")
                    }.bind(this), function (e) {
                        this.send("resetPasswordError", e.response)
                    }.bind(this)) : void this.set("message", {
                        text: "Your reset password token is invalid.",
                        type: "error"
                    })
                }
            },
            resetPasswordSuccess: function () {
                this.setProperties({
                    message: {
                        text: "Your password has been reset!"
                    },
                    submitted: !0
                })
            },
            resetPasswordError: function (e) {
                var t = "That's not a valid password.  Please try again.";
                e.error && (t = e.error), this.set("message", {
                    text: t,
                    type: "error"
                })
            }
        }
    });
    e["default"] = n
}), define("vine-ember/controllers/search", ["exports", "ember"], function (e, t) {
    "use strict";
    var a = t["default"].ObjectController.extend({
        displayQuery: function () {
            return decodeURIComponent(this.get("query"))
        }.property("query"),
        actions: {
            search: function () {
                var e = this.get("query");
                e && this.target.send("search", e)
            }
        }
    });
    e["default"] = a
}), define("vine-ember/controllers/search/index", ["exports", "vine-ember/controllers/timeline"], function (e, t) {
    "use strict";
    var a = t["default"].extend({
        timelineName: function () {
            return "Search: " + this.get("params.query")
        }.property("params.query"),
        iconStyle: function () {
            return "background-image: url('" + this.get("config.ASSETS_CDN_PREFIX") + "images/sidebar/search.svg'); background-size: 50%;"
        }.property("config.ASSETS_CDN_PREFIX"),
        _getModuleObject: function (e, t, a) {
            if (!e || !e.posts || 0 !== e.posts.length) {
                var n = e.pagination;
                n && n.set("size", a || t);
                var r = [];
                e && e.posts && (r = e.posts.slice(0, t));
                var i = encodeURIComponent(this.get("params").query).replace(/%20/g, "+");
                return {
                    posts: r,
                    pagination: n,
                    params: this.get("params"),
                    query: i
                }
            }
        },
        moduleUsers: function () {
            return this.get("isMobile") ? this._getModuleObject(this.get("users"), 3, 3) : this._getModuleObject(this.get("users"), 7, 9)
        }.property("users"),
        moduleTags: function () {
            return this.get("isMobile") ? this._getModuleObject(this.get("tags"), 3, 3) : this._getModuleObject(this.get("tags"), 12, 16)
        }.property("tags"),
        moduleVenues: function () {
            return this.get("isMobile") ? this._getModuleObject(this.get("venues"), 3, 3) : this._getModuleObject(this.get("venues"), 12, 16)
        }.property("venues")
    });
    e["default"] = a
}), define("vine-ember/controllers/search/modules/tags", ["exports", "ember", "vine-ember/mixins/pagination"], function (e, t, a) {
    "use strict";
    var n = t["default"].ObjectController.extend(a["default"], {
        paginatedProperty: "posts",
        endpoint: function () {
            return this.get("services.search").tags
        }.property()
    });
    e["default"] = n
}), define("vine-ember/controllers/search/modules/users", ["exports", "ember", "vine-ember/mixins/pagination"], function (e, t, a) {
    "use strict";
    var n = t["default"].ObjectController.extend(a["default"], {
        paginatedProperty: "posts",
        endpoint: function () {
            return this.get("services.search").users
        }.property()
    });
    e["default"] = n
}), define("vine-ember/controllers/search/modules/venues", ["exports", "ember", "vine-ember/mixins/pagination"], function (e, t, a) {
    "use strict";
    var n = t["default"].ObjectController.extend(a["default"], {
        paginatedProperty: "posts",
        endpoint: function () {
            return this.get("services.search").venues
        }.property()
    });
    e["default"] = n
}), define("vine-ember/controllers/search/user", ["exports", "ember"], function (e, t) {
    "use strict";
    var a = t["default"].ObjectController.extend({
        borderColorStyle: function () {
            if (this.get("profileBackground")) {
                var e = "#" + this.get("profileBackground").substr(2);
                return "box-shadow: 0 0 0 2px " + e
            }
        }.property("profileBackground")
    });
    e["default"] = a
}), define("vine-ember/controllers/search/users", ["exports", "ember", "vine-ember/mixins/pagination"], function (e, t, a) {
    "use strict";
    var n = t["default"].ObjectController.extend(a["default"], {
        paginatedProperty: "posts"
    });
    e["default"] = n
}), define("vine-ember/controllers/settings", ["exports", "ember", "vine-ember/services/password", "vine-ember/services/user", "vine-ember/mixins/url-reserve"], function (e, t, a, n, r) {
    "use strict";
    var i = t["default"].Controller.extend(r["default"], {
        needs: ["current-user", "modal/login"],
        currentUser: t["default"].computed.alias("controllers.current-user"),
        passwordReset: null,
        editingProfile: !1,
        editingEmail: !1,
        profileColors: function () {
            var e = ["0xff5967", "0xff794d", "0xffaf40", "0x68bf60", "0x33ccbf", "0x6db0f2", "0x5082e5", "0x7870cc", "0xf279ac"],
                t = this.get("currentUser.profileBackground");
            return e.map(function (e) {
                return {
                    color: e,
                    isCurrentColor: t === e
                }
            })
        }.property("currentUser.profileBackground"),
        actions: {
            toggleEditProfile: function () {
                this.setProperties({
                    locationText: this.get("currentUser.location"),
                    descriptionText: this.get("currentUser.description"),
                    usernameText: this.get("currentUser.username")
                }), this.toggleProperty("editingProfile")
            },
            saveProfile: function () {
                var e = {
                    description: this.get("descriptionText"),
                    location: this.get("locationText"),
                    username: this.get("usernameText")
                };
                this.set("editingProfile", !1), this.get("currentUser").setProperties({
                    description: e.description,
                    location: e.location,
                    username: e.username
                }), n["default"].setProfile(this.get("currentUser.userIdStr"), e)
            },
            resetPassword: function () {
                a["default"].forgotPassword(this.get("currentUser.email")).then(function () {
                    this.set("passwordReset", "Please check your email for instructions.")
                }.bind(this))
            },
            toggleEditEmail: function () {
                this.setProperties({
                    emailText: this.get("currentUser.email"),
                    emailError: void 0
                }), this.toggleProperty("editingEmail"), this.get("editingEmail") && t["default"].run.scheduleOnce("afterRender", function () {
                    $(".setting.email input").focus()
                })
            },
            setEmail: function () {
                return this.get("emailText") === this.get("currentUser.email") ? void this.send("toggleEditEmail") : (this.get("controllers.modal/login").set("successEvent", function () {
                    n["default"].setEmail(this.get("currentUser.userIdStr"), this.get("emailText")).then(function () {
                        this.get("currentUser").set("email", this.get("emailText")), this.set("editingEmail", !1)
                    }.bind(this), function (e) {
                        this.set("emailError", e.response.error)
                    }.bind(this))
                }.bind(this)), void this.send("showModal", "login", {
                    attemptedAction: "change your email"
                }))
            },
            togglePrivate: function () {
                var e, t = this.get("currentUser.private");
                e = t ? 0 : 1;
                var a;
                a = e ? "Are you sure you want to mark your posts as private?" : "Are you sure you want to mark your posts as public?", window.confirm(a) && (this.get("currentUser").set("private", e), n["default"].setPrivate(this.get("currentUser.userIdStr"), e).then(null, function () {
                    this.get("currentUser").set("private", t)
                }.bind(this)))
            },
            toggleHiddenTwitter: function () {
                var e = this.get("currentUser.hiddenTwitter"),
                    t = e ? 0 : 1;
                this.get("currentUser").set("hiddenTwitter", t), this.get("services.user").setHiddenTwitter(this.get("currentUser.userIdStr"), t)["catch"](function () {
                    this.get("currentUser").set("hiddenTwitter", e)
                }.bind(this))
            },
            setProfileBackground: function (e) {
                var t = this.get("currentUser.profileBackground");
                this.get("currentUser").set("profileBackground", e), this.get("services.user").setProfileBackground(this.get("currentUser.userIdStr"), e)["catch"](function () {
                    this.get("currentUser").set("profileBackground", t)
                }.bind(this))
            }
        }
    });
    e["default"] = i
}), define("vine-ember/controllers/splash", ["exports", "ember", "vine-ember/mixins/fullscreen", "vine-ember/mixins/pagination", "vine-ember/mixins/shuffle"], function (e, t, a, n, r) {
    "use strict";
    var i = t["default"].ArrayController.extend(n["default"], a["default"], r["default"], {
        itemController: "splash/post",
        needs: ["application", "splash/playing-vine"],
        playingVine: t["default"].computed.alias("controllers.splash/playing-vine"),
        isMobile: t["default"].computed.alias("controllers.application.isMobile"),
        isFullscreen: !0,
        videoIndex: 0,
        init: function () {
            this._super(), this.fetchData()
        },
        fetchData: function () {
            var e = this.get("services.list");
            e.homepage().then(function (t) {
                this.setProperties({
                    content: this.shuffle(t.posts),
                    pagination: t.pagination,
                    endpoint: e.homepage.bind(e)
                })
            }.bind(this))
        },
        actions: {
            forceMute: function () {
                this.get("playingVine").set("forceMute", !0)
            },
            restoreMute: function () {
                this.get("playingVine").set("forceMute", !1)
            }
        }
    });
    e["default"] = i
}), define("vine-ember/controllers/splash/playing-vine", ["exports", "vine-ember/controllers/playing-vine"], function (e, t) {
    "use strict";
    var a = t["default"].extend({
        name: "splash",
        checkViewPort: function () {}
    });
    e["default"] = a
}), define("vine-ember/controllers/splash/post", ["exports", "ember"], function (e, t) {
    "use strict";
    var a = t["default"].ObjectController.extend({
        needs: "splash/playing-vine",
        playingVine: t["default"].computed.alias("controllers.splash/playing-vine")
    });
    e["default"] = a
}), define("vine-ember/controllers/timeline", ["exports", "ember", "vine-ember/mixins/pagination", "vine-ember/mixins/fullscreen"], function (e, t, a, n) {
    "use strict";
    var r = t["default"].ArrayController.extend(a["default"], n["default"], {
        queryParams: ["mode"],
        itemController: "post",
        needs: ["application", "playing-vine"],
        playingVine: t["default"].computed.alias("controllers.playing-vine"),
        isMobile: t["default"].computed.alias("controllers.application.isMobile"),
        isTimeline: !0,
        hasHeader: !1,
        hasGridMode: !1,
        hideSidebar: !1,
        mode: "",
        placeholderTemplate: function () {
            return this.get("isEmpty") ? "timelines/placeholders/empty" : void 0
        }.property("isEmpty"),
        playingChanged: function () {
            var e = this.indexOf(this.get("playingVine.playing.post"));
            e && e > 0 && this.set("videoIndex", e)
        }.observes("playingVine.playing"),
        modeChanged: function () {
            this.get("playingVine").send("reset"), this.get("isTvMode") ? this.send("bindFullscreenListener") : this.send("unbindFullscreenListener")
        }.observes("mode").on("init"),
        isListMode: function () {
            return !this.get("isTvMode") && !this.get("isGridMode")
        }.property("isTvMode", "isGridMode"),
        isTvMode: function () {
            return "tv" === this.get("mode")
        }.property("mode"),
        isGridMode: function () {
            return this.get("hasGridMode") && "grid" === this.get("mode")
        }.property("mode", "hasGridMode"),
        disableSidebar: function () {
            return !this.get("isMobile") && this.get("hideSidebar")
        }.property("isMobile", "hideSidebar"),
        actions: {
            removePostFromTimeline: function (e) {
                var t = this.get("content").findBy("postIdStr", e);
                this.get("content").removeObject(t)
            },
            removeUsersPostsFromTimeline: function (e) {
                var t = this.get("content").filterBy("userIdStr", e);
                this.get("content").removeObjects(t)
            }
        }
    });
    e["default"] = r
}), define("vine-ember/controllers/timelines/headers/venue", ["exports", "ember"], function (e, t) {
    "use strict";
    var a = t["default"].ObjectController.extend({
        backgroundImageUrl: function () {
            var e = 3e3,
                t = 300,
                a = {
                    size: [e, t].join(","),
                    key: this.get("config.MAPQUEST_API_KEY"),
                    zoom: 16,
                    center: [this.get("lat"), this.get("lng")].join(","),
                    scalebar: !1
                },
                n = [];
            Object.keys(a).forEach(function (e) {
                n.push(e + "=" + a[e])
            });
            var r = "https://web.archive.org/web/20150701150124/https://open.mapquestapi.com/staticmap/v4/getmap?" + n.join("&");
            return r
        }.property("lat", "lng"),
        backgroundImageStyle: function () {
            return 'background-image: url("' + this.get("backgroundImageUrl") + '")'
        }.property("backgroundImageUrl")
    });
    e["default"] = a
}), define("vine-ember/controllers/unsubscribe-vm", ["exports", "ember"], function (e, t) {
    "use strict";
    var a = t["default"].ObjectController.extend({
        actions: {
            unsubscribe: function () {
                this.get("services.conversation").unsubscribeEmail(this.get("token")).then(function () {
                    this.setProperties({
                        confirmed: !0,
                        unsubscribed: !0
                    })
                }.bind(this), function () {
                    this.set("confirmed", !0)
                }.bind(this))
            }
        }
    });
    e["default"] = a
}), define("vine-ember/controllers/user", ["exports", "vine-ember/controllers/timeline"], function (e, t) {
    "use strict";
    var a = t["default"].extend({
        isUserTimeline: !0,
        placeholderTemplate: function () {
            return this.get("user.blocked") ? "timelines/placeholders/blocked" : this.get("user.private") && !this.get("user.hasAccess") ? "timelines/placeholders/private" : this._super();
        }.property("user.blocked", "user.private", "user.hasAccess"),
        hideUserStats: function () {
            return this.get("user.blocked") || this.get("user.private")
        }.property("user.blocked", "user.private"),
        sessionChanged: function () {
            this.get("services.user").profile({
                user_id: this.get("user.userIdStr")
            }).then(function (e) {
                this.set("user", e)
            }.bind(this))
        }.observes("session.userId"),
        noPostsMessage: function () {
            return this.get("user.isCurrentUser") ? "You haven't posted anything yet." : void 0
        }.property("user.isCurrentUser"),
        isUnfollowedPrivateAccount: function () {
            return !this.get("isCurrentUserOrFollowing") && !!this.get("user.private")
        }.property("isCurrentUserOrFollowing", "user.private"),
        isBlocked: function () {
            return !!this.get("user.blocked")
        }.property("user.blocked"),
        showStats: function () {
            return !this.get("user.blocked") && !this.get("isUnfollowedPrivateAccount")
        }.property("user.blocked", "isUnfollowedPrivateAccount"),
        isCurrentUserOrFollowing: function () {
            return this.get("session.userId") === this.get("user.userIdStr") || this.get("user.following") && !this.get("user.followRequested")
        }.property("session.userId", "user.userIdStr", "user.isFollowing", "user.isFollowRequested")
    });
    e["default"] = a
}), define("vine-ember/controllers/vm-post", ["exports", "ember", "vine-ember/services/conversation"], function (e, t, a) {
    "use strict";
    var n = t["default"].ObjectController.extend({
        needs: ["playing-vine", "application"],
        playingVine: t["default"].computed.alias("controllers.playing-vine"),
        isMobile: t["default"].computed.alias("controllers.application.isMobile"),
        isPermalink: !0,
        profileColor: function () {
            return this.get("user") ? this.get("user.backgroundColor") ? this.get("user.backgroundColor") : "#333333" : "#00bf8f"
        }.property("user.backgroundColor"),
        textColorStyle: function () {
            return "color: " + this.get("profileColor")
        }.property("profileColor"),
        backgroundColorStyle: function () {
            return "background-color: " + this.get("profileColor")
        }.property("profileColor"),
        canOpenInApp: function () {
            var e = /android|iphone|ipod|ipad/i.test(window.navigator.userAgent);
            return !this.get("expired") && !this.get("error") && this.get("session.isAuthenticated") && e
        }.property("expired", "error", "session.isAuthenticated"),
        recipientUser: function () {
            return {
                username: this.get("recipient")
            }
        }.property("recipient"),
        actions: {
            resendLink: function () {
                a["default"].refreshToken(this.get("token")).then(function () {
                    this.set("confirmation", {
                        resent: !0
                    })
                }.bind(this), function (e) {
                    this.set("confirmation", {
                        error: {
                            message: e.response.error
                        }
                    })
                }.bind(this))
            }
        }
    });
    e["default"] = n
}), define("vine-ember/helpers/commaize-number", ["exports", "ember"], function (e, t) {
    "use strict";
    var a = new RegExp("\\B(?=(\\d{3})+(?!\\d))", "g"),
        n = t["default"].Handlebars.makeBoundHelper(function (e) {
            return Math.round(e).toString().replace(a, ",")
        });
    e["default"] = n
}), define("vine-ember/helpers/format-count", ["exports", "ember"], function (e, t) {
    "use strict";
    var a = new RegExp("\\B(?=(\\d{3})+(?!\\d))", "g"),
        n = t["default"].Handlebars.makeBoundHelper(function (e, t) {
            if (t = t && t.hash ? t.hash : {}, t.pluralText = t.pluralText ? " " + t.pluralText : "", t.singleText = t.singleText ? " " + t.singleText : "", e) {
                if (1 === e) return "1" + t.singleText;
                if (1e3 > e) return e + t.pluralText;
                if (1e4 > e) return Math.round(e).toString().replace(a, ",") + t.pluralText;
                if (1e6 > e) return Math.floor(e / 100) / 10 + "K" + t.pluralText;
                var n = e / 1e6;
                return Math.floor(10 * n) / 10 + "M" + t.pluralText
            }
            return t.zeroText ? t.zeroText : 0
        });
    e["default"] = n
}), define("vine-ember/helpers/format-date", ["exports", "ember"], function (e, t) {
    "use strict";
    var a = t["default"].Handlebars.makeBoundHelper(function (e, t) {
        var a = moment().utcOffset(),
            n = moment(e).utc(a),
            r = n.format("ll");
        return moment.locale("en", {
            relativeTime: {
                future: "in %s",
                past: "%s ago",
                s: "%ds ago",
                m: "%dm ago",
                mm: "%dm ago",
                h: "%dh ago",
                hh: "%dh ago",
                d: "%dd ago",
                dd: "%dd ago",
                M: r,
                MM: r,
                y: r,
                yy: r
            }
        }), n.fromNow(!0)
    });
    e["default"] = a
}), define("vine-ember/helpers/html-linebreak", ["exports", "ember"], function (e, t) {
    "use strict";
    var a = t["default"].Handlebars.makeBoundHelper(function (e) {
        if (e) {
            var a = t["default"].Handlebars.Utils.escapeExpression(e).replace(/(\r\n|\n|\r)/gm, "<br>");
            return new t["default"].Handlebars.SafeString(a)
        }
    });
    e["default"] = a
}), define("vine-ember/helpers/max-count", ["exports", "ember"], function (e, t) {
    "use strict";
    var a = t["default"].Handlebars.makeBoundHelper(function (e, t) {
        var a, n = "";
        e ? !t.hash.max || e < t.hash.max ? a = e : t.hash.display ? (a = t.hash.display, n = "+") : (a = t.hash.max, n = "+") : a = 0;
        var r = "";
        return t.hash.unit && (r = t.hash.unit, a > 1 && (r = t.hash.unit + "s")), a + n + " " + r
    });
    e["default"] = a
}), define("vine-ember/helpers/replace-emoji", ["exports", "ember", "vine-ember/utils/emojify"], function (e, t, a) {
    "use strict";
    var n = t["default"].Handlebars.makeBoundHelper(function (e) {
        return new t["default"].Handlebars.SafeString(a["default"](t["default"].Handlebars.Utils.escapeExpression(e)))
    });
    e["default"] = n
}), define("vine-ember/initializers/app-version", ["exports", "vine-ember/config/environment", "ember"], function (e, t, a) {
    "use strict";
    var n = a["default"].String.classify,
        r = !1;
    e["default"] = {
        name: "App Version",
        initialize: function (e, i) {
            if (!r) {
                var d = n(i.toString());
                a["default"].libraries.register(d, t["default"].APP.version), r = !0
            }
        }
    }
}), define("vine-ember/initializers/authentication", ["exports", "vine-ember/services/authentication/main"], function (e, t) {
    "use strict";
    e["default"] = {
        name: "authentication",
        initialize: function (e, a) {
            t["default"].setup(e, a, {
                serverTokenEndpoint: "/users/authenticate",
                routeAfterLogin: "index"
            })
        }
    }
}), define("vine-ember/initializers/export-application-global", ["exports", "ember", "vine-ember/config/environment"], function (e, t, a) {
    "use strict";

    function n(e, n) {
        var r = t["default"].String.classify(a["default"].modulePrefix);
        a["default"].exportApplicationGlobal && !window[r] && (window[r] = n)
    }
    e.initialize = n, e["default"] = {
        name: "export-application-global",
        initialize: n
    }
}), define("vine-ember/initializers/scribe", ["exports", "vine-scribe"], function (e, t) {
    "use strict";
    e["default"] = {
        name: "scribe",
        initialize: function (e, a) {
            var n = new t.client({
                host: "/api",
                client: window.APP_CONFIG.VINE_CLIENT
            });
            a.register("scribe:client", n, {
                instantiate: !1,
                singleton: !0
            }), Ember.$.each(["model", "controller", "view", "component", "route"], function (e, t) {
                a.inject(t, "scribe", "scribe:client")
            })
        }
    }
}), define("vine-ember/initializers/server-config", ["exports"], function (e) {
    "use strict";
    e["default"] = {
        name: "serverconfig",
        initialize: function (e, t) {
            var a = Ember.Object.extend(window.APP_CONFIG);
            t.register("app_config:config", a.create(), {
                instantiate: !1,
                singleton: !0
            }), Ember.$.each(["model", "controller", "view", "route", "component"], function (e, a) {
                t.inject(a, "config", "app_config:config")
            })
        }
    }
}), define("vine-ember/initializers/services", ["exports", "vine-ember/utils/service-loader"], function (e, t) {
    "use strict";
    e["default"] = {
        name: "services",
        initialize: function (e, a) {
            var n = t["default"].create();
            a.register("services:loader", n, {
                instantiate: !1,
                singleton: !0
            }), Ember.$.each(["model", "controller", "view", "component", "route"], function (e, t) {
                a.inject(t, "services", "services:loader")
            })
        }
    }
}), define("vine-ember/mixins/color-brightener", ["exports", "ember"], function (e, t) {
    "use strict";
    var a = t["default"].Mixin.create({
        brightenColor: function (e, t) {
            var a = parseInt(e, 16),
                n = (a >> 16) + t,
                r = (a >> 8 & 255) + t,
                i = (255 & a) + t;
            return (16777216 + 65536 * (255 > n ? 1 > n ? 0 : n : 255) + 256 * (255 > r ? 1 > r ? 0 : r : 255) + (255 > i ? 1 > i ? 0 : i : 255)).toString(16).slice(1)
        }
    });
    e["default"] = a
}), define("vine-ember/mixins/continuous-play-view", ["exports", "ember"], function (e, t) {
    "use strict";
    var a = t["default"].Mixin.create({
        postChanged: function () {
            this.send("playCurrentVine")
        }.observes("post.postIdStr"),
        _getVideoObject: function () {
            return {
                post: this.get("post"),
                el: this.$(".video-container")
            }
        },
        actions: {
            playCurrentVine: function () {
                if (this.get("post") && this._getVideoObject().el) {
                    var e = this.get("controller.playingVine") || this.get("post.playingVine");
                    e.send("play", this._getVideoObject())
                }
            }
        }
    });
    e["default"] = a
}), define("vine-ember/mixins/fullscreen", ["exports", "ember"], function (e, t) {
    "use strict";
    var a = t["default"].Mixin.create({
        needs: ["application", "playing-vine"],
        isMobile: t["default"].computed.alias("controllers.application.isMobile"),
        playingVine: t["default"].computed.alias("controllers.playing-vine"),
        fullscreenAvailable: !0,
        videoIndex: 0,
        currentPost: function () {
            var e = this.objectAt(this.get("videoIndex"));
            if (e) return e
        }.property("content.length", "videoIndex"),
        positionIndex: function () {
            return this.get("videoIndex") + 1
        }.property("videoIndex"),
        totalPosts: function () {
            return this.get("pagination.count")
        }.property("pagination.count"),
        prevAvailable: function () {
            return this.get("content") ? this.get("videoIndex") > 0 || 0 === this.get("videoIndex") && !this.get("pagination.nextPage") : !1
        }.property("videoIndex"),
        nextAvailable: function () {
            return this.get("content") ? this.get("videoIndex") < this.get("content").length - 1 || !this.get("pagination.nextPage") && this.get("videoIndex") === this.get("content").length - 1 : !1
        }.property("videoIndex"),
        indexChanged: function () {
            for (var e = 2, t = 1; e >= t; ++t) {
                var a = this.objectAt(this.get("videoIndex") + t);
                a && (this.get("playingVine").send("queuePreload", a), $('<img src="' + a.get("secureThumbnailUrl") + '">'))
            }
            this.get("pagination.nextPage") && this.get("videoIndex") === Math.floor(this.get("content").length / 2) && this.send("nextPage")
        }.observes("videoIndex"),
        actions: {
            openFullscreen: function () {
                this.transitionToRoute({
                    queryParams: {
                        mode: "tv"
                    }
                })
            },
            closeFullscreen: function () {
                this.transitionToRoute({
                    queryParams: {
                        mode: ""
                    }
                })
            },
            navLeft: function () {
                return this.send("gaq", ["_trackEvent", "TV Mode", "navigate left"]), this.get("pagination.nextPage") || 0 !== this.get("videoIndex") ? void(this.get("videoIndex") > 0 && this.decrementProperty("videoIndex")) : void this.set("videoIndex", this.get("content").length - 1)
            },
            navRight: function () {
                return this.send("gaq", ["_trackEvent", "TV Mode", "navigate right"]), this.get("pagination.nextPage") || this.get("videoIndex") !== this.get("content").length - 1 ? void(this.get("videoIndex") < this.get("content").length - 1 && this.incrementProperty("videoIndex")) : void this.set("videoIndex", 0)
            },
            like: function () {
                this.send("gaq", ["_trackEvent", "TV Mode", "like post"]), this.get("currentPost").send("like")
            },
            viewExplicit: function () {
                this.get("currentPost").send("viewExplicit")
            },
            togglePlay: function () {
                this.get("playingVine").send("togglePlay")
            },
            toggleMute: function () {
                this.get("playingVine").send("toggleMute")
            },
            bindFullscreenListener: function () {
                this.get("playingVine").set("endedEvent", function () {
                    this.send("navRight")
                }.bind(this)), this.get("playingVine").set("continuous", !0)
            },
            unbindFullscreenListener: function () {
                this.get("playingVine").setProperties({
                    endedEvent: void 0,
                    continuous: !1
                })
            }
        }
    });
    e["default"] = a
}), define("vine-ember/mixins/pagination", ["exports", "ember"], function (e, t) {
    "use strict";
    var a = t["default"].Mixin.create({
        paginationLoading: !1,
        paginatedProperty: "content",
        page: 1,
        shouldShowPaginationLoading: !0,
        pageClass: function () {
            return "page-" + this.get("page")
        }.property("page"),
        isEmpty: function () {
            return this.get(this.get("paginatedProperty")) ? 0 === this.get(this.get("paginatedProperty")).length : !0
        }.property("paginatedProperty"),
        modelChanged: function () {
            this.set("page", 1)
        }.observes("model"),
        _appendObjects: function (e) {
            this.get(this.get("paginatedProperty")).pushObjects(e)
        },
        actions: {
            nextPage: function () {
                if (!this.get("paginationLoading")) {
                    var e = this.get("pagination"),
                        t = this.get("params");
                    this.set("paginationLoading", !0), this.get("shouldShowPaginationLoading") && this.send("showLoading");
                    var a = {
                        page: e.nextPage,
                        anchor: e.anchorStr,
                        size: e.size
                    };
                    this.get("endpoint")(t, a).then(function (e) {
                        this._appendObjects(e.posts), this.set("pagination", e.pagination), this.incrementProperty("page"), this.get("shouldShowPaginationLoading") && this.send("hideLoading")
                    }.bind(this))["finally"](function () {
                        this.set("paginationLoading", !1)
                    }.bind(this))
                }
            }
        }
    });
    e["default"] = a
}), define("vine-ember/mixins/shuffle", ["exports", "ember"], function (e, t) {
    "use strict";
    var a = t["default"].Mixin.create({
        shuffle: function (e) {
            for (var t, a, n = e.length; n; t = Math.floor(Math.random() * n), a = e[--n], e[n] = e[t], e[t] = a);
            return e
        }
    });
    e["default"] = a
}), define("vine-ember/mixins/url-reserve", ["exports", "ember", "vine-ember/services/url"], function (e, t, a) {
    "use strict";
    var n = t["default"].Mixin.create({
        message: {
            text: "Enter your desired custom URL.  Please note,\nyou will not be able to change this."
        },
        urlNotReady: function () {
            return this.get("available") && this.get("url") ? void 0 : "disabled"
        }.property("available", "url"),
        needsFaq: function () {
            if (!this.get("error")) return !1;
            var e = this.get("errorCode");
            return 256 === e || 258 === e
        }.property("error"),
        actions: {
            setUrl: function () {
                a["default"].suggestions(this.get("session.userId")).then(function (e) {
                    var t = e.reservations,
                        a = e.suggestions;
                    t.length > 0 ? this.set("reservations", t) : a.length > 0 ? (this.set("url", a[0]), this.set("available", !0)) : this.set("url", void 0), this.set("reservingUrl", !0)
                }.bind(this))
            },
            hideUrlForm: function () {
                this.set("reservingUrl", !1), this.send("resetForm"), this.send("resetMessages")
            },
            urlAvailable: function () {
                this.set("available", !0)
            },
            loadSuggestion: function (e) {
                this.set("url", e), this.setProperties({
                    url: e,
                    suggestion: void 0,
                    reservations: void 0
                })
            },
            fetchSuggestion: function () {
                var e = "Sorry! This URL is not available.  Please try another.";
                a["default"].suggestions(this.get("session.userId")).then(function (t) {
                    t.suggestions.length > 0 ? (e += " Or use one of the suggestions below", this.setProperties({
                        suggestions: t.suggestions,
                        error: e
                    })) : this.set("error", e)
                }.bind(this))
            },
            reserveUrl: function () {
                this.get("url") && a["default"].reserveUrl(this.get("session.userId"), encodeURIComponent(this.get("url"))).then(function () {
                    this.send("reserveUrlSuccess")
                }.bind(this), function (e) {
                    this.send("reserveUrlError", e)
                }.bind(this))
            },
            reserveUrlSuccess: function () {
                this.get("currentUser.vanityUrls").push(this.get("url")), this.get("currentUser").set("vanityUrl", this.get("url")), this.get("vanityUrls").push(this.get("url"))
            },
            reserveUrlError: function (e) {
                if (this.set("available", !1), this.set("errorCode", e.response.code), 255 === e.response.code) this.send("fetchSuggestion");
                else if ("NOT FOUND" === e.error) {
                    var t = "The URL provided is invalid. You must use at least 3 letter or numbers and at least 1 letter. Only letters, numbers, periods and dashes are allowed.";
                    this.set("error", t)
                } else this.set("error", e.response.error)
            },
            resetForm: function () {
                this.setProperties({
                    url: void 0,
                    error: void 0,
                    available: void 0
                })
            },
            resetMessages: function () {
                this.setProperties({
                    error: void 0,
                    available: void 0,
                    suggestions: void 0
                })
            },
            setTyping: function (e) {
                this.set("typing", e)
            }
        }
    });
    e["default"] = n
}), define("vine-ember/models/channel", ["exports", "ember", "vine-ember/mixins/color-brightener"], function (e, t, a) {
    "use strict";
    var n = t["default"].Object.extend(a["default"], {
        channelIconUrl: function () {
            return this.get("exploreRetinaIconFullUrl") || this.get("exploreIconUrl")
        }.property("exploreRetinaIconFullUrl", "exploreIconUrl"),
        backgroundColorStyle: function () {
            var e = "background-color: #" + this.get("backgroundColor"),
                t = this.get("backgroundImageUrl") || this.get("exploreBackgroundImageUrl");
            return t && (e += "; background-image: url('" + t.replace("http://", "https://") + "')"), e
        }.property("backgroundImageUrl", "backgroundColor", "exploreBackgroundImageUrl"),
        featuredTitle: function () {
            return this.get("rawChannelTitle") || "Featured in " + this.get("channel")
        }.property("channel", "rawChannelTitle"),
        backgroundColorHover: function () {
            return this.get("backgroundColor") ? this.brightenColor("0x" + this.get("backgroundColor"), 20) : void 0
        }.property("backgroundColor"),
        fontColorStyle: function () {
            return "color: #" + this.get("fontColor")
        }.property("fontColor")
    });
    e["default"] = n
}), define("vine-ember/models/list", ["exports", "ember"], function (e, t) {
    "use strict";
    var a = t["default"].Object.extend({
        backgroundStyle: function () {
            var e = "";
            return this.get("backgroundColor") && (e += "background-color: #" + this.get("backgroundColor") + ";"), this.get("secureSplashImageUrl") && (e += "background-image: url('" + this.get("secureSplashImageUrl") + "');"), e
        }.property("secureSplashImageUrl", "backgroundColor"),
        secureSplashImageUrl: function () {
            return this.get("splashImageUrl") ? this.get("splashImageUrl").replace("http://", "https://") : void 0
        }.property("splashImageUrl"),
        fontColorStyle: function () {
            return this.get("fontColor") ? "color: #" + this.get("fontColor") : ""
        }.property("fontColor"),
        headerContentStyle: function () {
            return this.get("backgroundStyle") + this.get("fontColorStyle")
        }.property("backgroundStyle", "fontColorStyle"),
        shareObject: function () {
            return {
                shareUrl: window.APP_CONFIG.SECURE_HOSTNAME + "/playlists/" + this.get("vanityUrl"),
                description: this.get("title") + " #NowWatching"
            }
        }.property("title", "description"),
        shareUrl: t["default"].computed.alias("shareObject.shareUrl"),
        facebookUrl: function () {
            return "https://www.facebook.com/sharer/sharer.php?u=" + encodeURIComponent(this.get("shareObject.shareUrl"))
        }.property("shareObject.shareUrl"),
        tweetUrl: function () {
            var e = {
                url: this.get("shareObject.shareUrl"),
                text: this.get("shareObject.description"),
                related: "vine"
            };
            return "https://twitter.com/share?" + $.param(e)
        }.property("shareObject.description", "shareObject.shareUrl"),
        emailUrl: function () {
            var e = encodeURIComponent("Check out this video on Vine"),
                t = encodeURIComponent(this.get("shareObject.description")),
                a = encodeURIComponent(this.get("shareObject.shareUrl"));
            return "mailto:?subject=" + e + "&body=" + t + " " + a
        }.property("shareObject.shareUrl", "shareObject.description")
    });
    e["default"] = a
}), define("vine-ember/models/post", ["exports", "ember", "vine-ember/services/pagination"], function (e, t, a) {
    "use strict";
    var n = 200,
        r = t["default"].Object.extend({
            isCurrentUser: function () {
                return localStorage.userId === this.get("userIdStr")
            }.property("userIdStr"),
            shortId: function () {
                if (this.get("permalinkUrl")) {
                    var e = this.get("permalinkUrl").split("/");
                    return e[e.length - 1]
                }
            }.property("permalinkUrl"),
            paginatedComments: function () {
                if (this.get("comments")) {
                    var e = a["default"]({
                        data: this.get("comments")
                    });
                    return delete e.pagination.anchorStr, e.postIdStr = this.get("postIdStr"), e
                }
            }.property("comments"),
            secureSDVideoUrl: function () {
                var e = this.get("secureVideoUrls").filterBy("format", "h264").reduce(function (e, t) {
                    return e || (e = t.rate <= n ? t.videoUrl : null)
                }, null);
                return e
            }.property("secureVideoUrls"),
            secureThumbnailUrl: function () {
                return this.get("thumbnailUrl") ? this.get("thumbnailUrl").replace("http://", "https://") : void 0
            }.property("thumbnailUrl"),
            secureVideoUrls: function () {
                if (this.get("videoUrls")) return this.get("videoUrls").map(function (e) {
                    return e.videoUrl = e.videoUrl.replace("http://", "https://"), e
                });
                var e = [];
                return this.get("videoUrl") && e.push({
                    format: "h264",
                    rate: 0,
                    videoUrl: this.get("videoUrl").replace("http://", "https://")
                }), this.get("videoDashUrl") && e.push({
                    format: "dash",
                    rate: 0,
                    videoUrl: this.get("videoDashUrl").replace("http://", "https://")
                }), e
            }.property("videoUrls", "videoUrl", "videoDashUrl"),
            backgroundImageStyle: function () {
                return this.get("secureThumbnailUrl") ? 'background-image: url("' + this.get("secureThumbnailUrl") + '");' : void 0
            }.property("secureThumbnailUrl"),
            backgroundColor: function () {
                return this.get("profileBackground") ? "#" + this.get("profileBackground").substr(2) : void 0
            }.property("profileBackground"),
            tweetUrl: function () {
                var e = {
                    url: this.get("shareUrl"),
                    text: this.get("description"),
                    related: "vine"
                };
                return "https://twitter.com/share?" + $.param(e)
            }.property("shareUrl", "description"),
            facebookUrl: function () {
                return "https://www.facebook.com/sharer/sharer.php?u=" + encodeURIComponent(this.get("shareUrl"))
            }.property("shareUrl"),
            emailUrl: function () {
                var e = encodeURIComponent("Check out this video on Vine"),
                    t = encodeURIComponent(this.get("description")),
                    a = encodeURIComponent(this.get("shareUrl"));
                return "mailto:?subject=" + e + "&body=" + t + " " + a
            }.property("shareUrl", "description")
        });
    e["default"] = r
}), define("vine-ember/models/tag", ["exports", "ember"], function (e, t) {
    "use strict";
    var a = t["default"].Object.extend({
        hashtag: function () {
            return "#" + this.get("tag")
        }.property("tag")
    });
    e["default"] = a
}), define("vine-ember/models/user", ["exports", "ember", "vine-ember/mixins/color-brightener"], function (e, t, a) {
    "use strict";
    var n = t["default"].Object.extend(a["default"], {
        defaultBackgroundColor: "#00bf8f",
        isCurrentUser: function () {
            return localStorage.userId === this.get("userIdStr")
        }.property("userIdStr", "session"),
        backgroundColor: function () {
            return this.get("profileBackground") ? "#" + this.get("profileBackground").replace(/^0x/, "") : this.get("defaultBackgroundColor")
        }.property("profileBackground"),
        backgroundColorHover: function () {
            return this.get("profileBackground") ? "#" + this.brightenColor(this.get("profileBackground"), 20) : void 0
        }.property("profileBackground"),
        linkColor: function () {
            return "#333333" === this.get("backgroundColor") ? "#00bf8f" : this.get("backgroundColor")
        }.property("backgroundColor"),
        linkColorHover: function () {
            return "#333333" === this.get("backgroundColor") ? "#00d9a3" : this.get("backgroundColorHover")
        }.property("backgroundColor", "backgroundColorHover"),
        backgroundColorStyle: function () {
            return "background-color: " + this.get("backgroundColor")
        }.property("backgroundColor"),
        vanityUrl: function () {
            var e = this.get("vanityUrls");
            return e && e.length > 0 ? e[0] : void 0
        }.property("vanityUrls"),
        hasVanityUrls: t["default"].computed.notEmpty("vanityUrls"),
        secureAvatarUrl: function () {
            return this.get("avatarUrl").replace("http://", "https://")
        }.property("avatarUrl")
    });
    e["default"] = n
}), define("vine-ember/router", ["exports", "ember", "vine-ember/config/environment"], function (e, t, a) {
    "use strict";
    var n = t["default"].Router.extend({
        location: a["default"].locationType
    });
    e["default"] = n.map(function () {
        this.route("login"), this.route("login/oauth", {
            path: "/login/oauth"
        }), this.route("login/oauth-callback", {
            path: "/login/oauth-callback"
        }), this.route("forgot-password"), this.route("reset-password", {
            path: "/passwordReset"
        }), this.route("confirm-email", {
            path: "/confirmEmail/:token"
        }), this.route("settings"), this.route("profiles"), this.resource("jobs", function () {
            this.route("job", {
                path: ":jobvite_id"
            })
        }), this.route("index", {
            path: "/"
        }), this.resource("permalink-post", {
            path: "/v/:short_id"
        }, function () {
            this.route("embed")
        }), this.route("vm-post", {
            path: "/m/:token"
        }), this.route("unsubscribe-vm", {
            path: "/unsubscribe/vm/:token"
        }), this.route("feed"), this.route("popular-now"), this.route("channel", {
            path: "/channels/:channel_name"
        }), this.route("tag", {
            path: "/tags/:tag"
        }), this.route("venue", {
            path: "/venues/:venue_id"
        }), this.route("editors-picks"), this.route("playlists"), this.route("list", {
            path: "/playlists/:vanity"
        }), this.resource("search", {
            path: "/search/:query"
        }, function () {
            this.route("users"), this.route("tags"), this.route("venues")
        }), this.route("promo/camera", {
            path: "/camera"
        }), this.route("user-fallback", {
            path: "/u/:user_id"
        }), this.route("user", {
            path: "/:vanity"
        }), this.route("not-found", {
            path: "*path"
        })
    })
}), define("vine-ember/routes/application", ["exports", "ember", "vine-ember/services/authentication/mixins/application_route_mixin", "vine-ember/services/errors"], function (e, t, a, n) {
    "use strict";
    var r, i, d = t["default"].Route.extend(a["default"], {
        mobileFormattedModals: ["job", "embed", "vm"],
        storeUrls: {
            apple: "https://web.archive.org/web/20150701150124/https://itunes.apple.com/us/app/vine/id592447445?mt=8&uo=4&at=10lmBm&ct=Vine_Homepage_Download",
            android: "https://web.archive.org/web/20150701150124/https://play.google.com/store/apps/details?id=co.vine.android",
            windows: "https://web.archive.org/web/20150701150124/http://www.windowsphone.com/s?appid=f9e6f07e-e47e-47f5-806d-55d4f79f2b60"
        },
        actions: {
            doAuthenticatedAction: function (e, t) {
                if (!this.get("session.isAuthenticated")) {
                    var a;
                    return e && (a = {
                        attemptedAction: e
                    }), this.controllerFor("modal/login").set("successEvent", t), void this.send("showModal", "login", a)
                }
                t()
            },
            showModal: function (e, t) {
                var a = this.controllerFor("application");
                if (a.get("isMobile")) {
                    if ("login" === e) {
                        var n = a.get("lastTransition");
                        return this.set("session.attemptedTransition", n), void this.send("login")
                    }
                    if (!this.mobileFormattedModals.contains(e)) return
                }
                var r = {};
                r[e] = !0, t && this.controllerFor("modal/" + e).setProperties(t), this.controllerFor("application").set("modal", r)
            },
            hideModal: function () {
                var e = this.controllerFor("application"),
                    a = e.get("modal"),
                    n = [],
                    r = Object.keys(a);
                r.forEach(function (e) {
                    if (a[e]) {
                        var t = this.controllerFor("modal/" + e).get("modalSelector");
                        t ? n.push(t) : n.push(".modal." + e)
                    }
                }.bind(this)), t["default"].$(n.join()).animate({
                    opacity: 0
                }, 250, function () {
                    r.forEach(function (t) {
                        e.set("modal." + t, void 0);
                        var a = this.controllerFor("modal/" + t).get("routeAfterClose");
                        a && this.transitionTo(a)
                    }.bind(this))
                }.bind(this))
            },
            loading: function (e, t) {
                e.send("showLoading"), this.router.one("didTransition", function () {
                    this.send("hideLoading")
                }.bind(this))
            },
            showLoading: function () {
                var e = t["default"].$("#loading-bar");
                if (!(e.is(":visible") || r || i)) {
                    e.show();
                    var a = 70 + 10 * Math.random(),
                        n = $(window).width();
                    e.width(a / 100 * n), i = setTimeout(function () {
                        r = setInterval(function () {
                            a += 10 * Math.random(), e.width(a / 100 * n)
                        }, 100)
                    }, 900)
                }
            },
            hideLoading: function () {
                clearInterval(r), clearTimeout(i), i = null, r = null;
                var e = t["default"].$("#loading-bar");
                e.width($(window).width()), t["default"].run.later(function () {
                    e.fadeOut(400, function () {
                        e.width(0)
                    })
                }, 1200)
            },
            scrollToTop: function () {
                $("html, body").animate({
                    scrollTop: 0
                })
            },
            setAppUrl: function (e) {
                this.set("appUrl", e)
            },
            clearAppUrl: function () {
                this.set("appUrl", void 0)
            },
            search: function (e) {
                if (e) {
                    var t = encodeURIComponent(e).replace(/%20/g, "+");
                    this.transitionTo("search.index", t)
                }
            },
            gaq: function (e) {
                t["default"].isNone(window._gaq) || window._gaq.push(e)
            },
            setHeaderVisible: function (e) {
                this.controllerFor("application").set("headerVisible", e)
            },
            goToStore: function (e, t, a) {
                var n = this.controllerFor("application");
                if (e = e || n.get("deviceType")) {
                    a && a[e] ? window.open(a[e]) : window.open(this.storeUrls[e]), t = t || n.get("currentPath");
                    var r = n.get("isMobile") ? 1 : 0;
                    this.send("gaq", ["_trackEvent", "App Button", e, t, r])
                }
            },
            error: function (e, t) {
                var a = e && e.response && e.response.code,
                    r = [n["default"].REQUIRES_LOGIN, n["default"].INVALID_SESSION];
                return a && this.get("session.isAuthenticated") && r.contains(a) ? (this.get("session").destroy(), t.retry(), !1) : !0
            }
        }
    });
    e["default"] = d
}), define("vine-ember/routes/base", ["exports", "ember"], function (e, t) {
    "use strict";
    var a = t["default"].Route.extend({
        beforeModel: function (e) {
            this.controllerFor("application").set("lastTransition", e), this.controllerFor("playing-vine").send("reset")
        },
        activate: function () {
            t["default"].run.once("afterRender", function () {
                $(window).scrollTop(0)
            }), this._setTitle()
        },
        deactivate: function () {
            $("title").text("Vine")
        },
        titleChanged: function () {
            this._setTitle()
        }.observes("title"),
        _setTitle: function () {
            if (this.get("title")) {
                var e = new t["default"].Handlebars.SafeString(this.get("title"));
                $("title").text(e)
            }
        },
        actions: {
            willTransition: function (e) {
                return this.send("clearAppUrl"), this.controllerFor("application").send("resetPageStates"), !0
            },
            videoRendered: function (e) {
                this.controllerFor("playing-vine").send("videoRendered", e)
            }
        }
    });
    e["default"] = a
}), define("vine-ember/routes/channel", ["exports", "vine-ember/routes/timeline", "vine-ember/services/channels", "vine-ember/services/timeline"], function (e, t, a, n) {
    "use strict";
    var r = t["default"].extend({
        model: function (e) {
            return a["default"].findByVanityUrl(decodeURI(e.channel_name)).then(function (e) {
                return n["default"].channel({
                    channel_id: e.channelIdStr
                }).then(function (t) {
                    return t.channel = e, t
                })
            })
        },
        afterModel: function (e, t) {
            var a = e.channel;
            this.setProperties({
                timelineName: a.channel,
                appUrl: "vine://channels/" + a.get("channelIdStr")
            }), this._super(e, t)
        },
        setupController: function (e, t) {
            this._super(e, t);
            var a = t.channel;
            e.setProperties({
                endpoint: n["default"].channel.bind(n["default"]),
                params: {
                    channel_id: a.get("channelIdStr")
                },
                routeParam: a.get("vanityUrl"),
                channel: a,
                hasHeader: !0,
                sidebarOptions: {
                    cssClass: "channel",
                    iconStyle: a.get("backgroundColorStyle"),
                    iconUrl: a.get("channelIconUrl")
                }
            })
        },
        renderTemplate: function (e, t) {
            this._super(e, t), this.render("timelines/custom-styles/channel", {
                into: "timeline",
                outlet: "customStyles"
            }), this.render("timelines/headers/channel", {
                into: "timeline",
                outlet: "timelineHeader"
            })
        }
    });
    e["default"] = r
}), define("vine-ember/routes/confirm-email", ["exports", "vine-ember/routes/base"], function (e, t) {
    "use strict";
    var a = t["default"].extend({
        model: function (e) {
            return this.get("services.user").verifyEmail(e.token).then(function () {
                return {
                    showContinue: !0
                }
            })["catch"](function (e) {
                return {
                    error: e.response
                }
            })
        }
    });
    e["default"] = a
}), define("vine-ember/routes/editors-picks", ["exports", "vine-ember/routes/timeline"], function (e, t) {
    "use strict";
    var a = t["default"].extend({
        model: function () {
            return this.get("services.timeline").promoted()
        },
        afterModel: function (e, t) {
            this.setProperties({
                timelineName: "Editor's Picks",
                appUrl: "vine://editors-picks"
            }), this._super(e, t)
        },
        setupController: function (e, t) {
            this._super(e, t);
            var a = this.get("services.timeline");
            e.setProperties({
                endpoint: a.graph.bind(a),
                hasHeader: !0,
                sidebarOptions: {
                    cssClass: "editors-picks"
                }
            })
        },
        renderTemplate: function (e, t) {
            this._super(e, t), this.render("timelines/headers/editors-picks", {
                into: "timeline",
                outlet: "timelineHeader"
            })
        }
    });
    e["default"] = a
}), define("vine-ember/routes/error", ["exports", "vine-ember/routes/base", "vine-ember/services/errors"], function (e, t, a) {
    "use strict";
    var n = t["default"].extend({
        setupController: function (e, t) {
            this._super(e, t), this.send("hideLoading");
            var n = t && t.response,
                r = n && n.code;
            this.set("errorCode", r);
            var i = [a["default"].DELETED, a["default"].DMCA].contains(r);
            i && n && n.error && e.set("message", n.error)
        },
        renderTemplate: function (e, t) {
            var n = [a["default"].DOES_NOT_EXIST, a["default"].DELETED, a["default"].DMCA];
            n.contains(this.get("errorCode")) ? (this.send("gaq", ["_trackPageview", "404"]), this.render("not-found")) : (this.send("gaq", ["_trackPageview", "error"]), this._super(e, t))
        }
    });
    e["default"] = n
}), define("vine-ember/routes/feed", ["exports", "vine-ember/routes/timeline", "vine-ember/services/authentication/mixins/authenticated_route_mixin"], function (e, t, a) {
    "use strict";
    var n = t["default"].extend(a["default"], {
        timelineName: "Home Feed",
        scribeAppState: {
            section: "home",
            timeline_api_url: "/timelines/graph"
        },
        model: function (e) {
            return this.get("services.timeline").graph(e)
        },
        setupController: function (e, t) {
            this._super(e, t);
            var a = this.get("services.timeline");
            e.setProperties({
                endpoint: a.graph.bind(a),
                sidebarOptions: {
                    cssClass: "home-feed"
                },
                hasGridMode: !0
            })
        }
    });
    e["default"] = n
}), define("vine-ember/routes/index", ["exports", "vine-ember/routes/base"], function (e, t) {
    "use strict";
    var a = t["default"].extend({
        beforeModel: function () {
            this.controllerFor("explore/popular-now"), this.controllerFor("explore/lists"), this.controllerFor("explore")
        },
        afterModel: function (e, t) {
            t.send("gaq", ["_setCustomVar", 1, "Posttype", "homepage"])
        },
        setupController: function (e, t) {
            var a = this.controllerFor("index").get("content");
            e.setProperties({
                model: a,
                pagination: {
                    count: a.length
                }
            })
        }
    });
    e["default"] = a
}), define("vine-ember/routes/jobs", ["exports", "vine-ember/routes/base", "vine-ember/services/jobs"], function (e, t, a) {
    "use strict";
    var n = t["default"].extend({
        model: function () {
            return a["default"].allJobs().then(function (e) {
                return {
                    all: e,
                    current: null
                }
            })
        },
        afterModel: function (e, t) {
            var a = "Jobs at Vine";
            this.set("title", a), this.controllerFor("application").set("mobileTitle", a)
        }
    });
    e["default"] = n
}), define("vine-ember/routes/jobs/job", ["exports", "vine-ember/routes/base", "vine-ember/services/jobs"], function (e, t, a) {
    "use strict";
    var n = t["default"].extend({
        controllerName: "jobs",
        model: function (e) {
            return a["default"].allJobs().then(function (t) {
                return {
                    all: t,
                    current: t.findBy("id", e.jobvite_id)
                }
            })
        },
        renderTemplate: function (e, t) {
            this.render("jobs")
        }
    });
    e["default"] = n
}), define("vine-ember/routes/list", ["exports", "vine-ember/routes/timeline"], function (e, t) {
    "use strict";
    var a = t["default"].extend({
        model: function (e) {
            var t = this.get("services.list");
            return t.listVanityPosts(e).then(function (a) {
                return t.listVanity(e).then(function (e) {
                    return a.list = e, a
                })
            })
        },
        afterModel: function (e, t) {
            this.setProperties({
                timelineName: e.list.title,
                appUrl: "vine://timelines/lists/" + e.list.timelineIdStr + "/posts?title=" + encodeURIComponent(e.list.title)
            }), this._super(e, t)
        },
        setupController: function (e, t) {
            this._super(e, t);
            var a = t.list.vanityUrl;
            e.setProperties({
                endpoint: this.get("services.list").listVanityPosts,
                params: {
                    vanity: a
                },
                routeParam: a,
                list: t.list,
                hasHeader: !0,
                sidebarOptions: {
                    cssClass: "list",
                    iconStyle: t.list.get("backgroundStyle"),
                    mobileStyle: t.list.get("backgroundStyle") + t.list.get("fontColorStyle")
                },
                sidebarContentTemplate: "timelines/sidebars/list",
                hideSidebar: !0
            })
        },
        renderTemplate: function (e, t) {
            this._super(e, t), this.render("timelines/headers/list", {
                into: "timeline",
                outlet: "timelineHeader"
            }), this.render("timelines/footers/list", {
                into: "timeline",
                outlet: "timelineFooter"
            })
        }
    });
    e["default"] = a
}), define("vine-ember/routes/login", ["exports", "vine-ember/routes/base"], function (e, t) {
    "use strict";
    var a = t["default"].extend({
        title: "Login",
        beforeModel: function (e) {
            this.get("session.isAuthenticated") && this.transitionTo("feed")
        },
        afterModel: function (e, t) {
            this.set("title", "Login - Vine"), this.controllerFor("application").set("mobileTitle", "Login")
        },
        setupController: function (e, t) {
            window.loginController = e, e.send("resetForm")
        }
    });
    e["default"] = a
}), define("vine-ember/routes/login/oauth-callback", ["exports", "ember", "vine-ember/services/twitter"], function (e, t, a) {
    "use strict";
    var n = t["default"].Route.extend({
        model: function (e, t) {
            var n = this;
            a["default"].accessToken().then(function (e) {
                return e.denied ? void window.close() : e.error ? (window.opener.createOauthError(), void window.close()) : void(window.opener ? (window.opener.createOauthSession(e), window.close()) : n.send("createOauthSession", e))
            })
        },
        renderTemplate: function () {
            this.render("loading-fullscreen")
        },
        actions: {
            createOauthSession: function (e) {
                var t = this;
                this.get("services.user").authTwitter(e.access_token, e.access_token_secret).then(function (e) {
                    t.get("session").setup(e.data)
                })["finally"](function () {
                    window.close()
                })
            }
        }
    });
    e["default"] = n
}), define("vine-ember/routes/login/oauth", ["exports", "vine-ember/services/twitter"], function (e, t) {
    "use strict";
    var a = Ember.Route.extend({
        model: function () {
            t["default"].authUrl().then(function (e) {
                window.location.href = e
            }, function () {
                this.transitionTo("error")
            })
        },
        renderTemplate: function () {
            this.render("loading-fullscreen")
        }
    });
    e["default"] = a
}), define("vine-ember/routes/not-found", ["exports", "vine-ember/routes/base"], function (e, t) {
    "use strict";
    var a = t["default"].extend({
        afterModel: function (e, t) {
            t.send("gaq", ["_trackPageview", "404"])
        }
    });
    e["default"] = a
}), define("vine-ember/routes/permalink-post", ["exports", "vine-ember/routes/base"], function (e, t) {
    "use strict";
    var a = t["default"].extend({
        model: function (e) {
            return this.get("services.timeline").post(e)
        },
        serialize: function (e) {
            return {
                short_id: e.get("shortId")
            }
        },
        afterModel: function (e, t) {
            t.send("gaq", ["_setCustomVar", 1, "Posttype", "permalink"]), e.description ? this.set("title", "Watch " + e.username + "'s Vine, \"" + e.description + '"') : this.set("title", e.username + "'s post on Vine"), t.send("setAppUrl", "vine://post/" + e.postIdStr)
        },
        setupController: function (e, t) {
            this._super(e, t), e.set("isInitiallyFollowing", t.following)
        },
        renderTemplate: function (e, t) {
            this.controllerFor("application").get("isMobile") ? this.render("permalink-mobile") : (e.set("autoplay", !0), this.render("permalink-post"))
        }
    });
    e["default"] = a
}), define("vine-ember/routes/permalink-post/embed", ["exports", "vine-ember/routes/base"], function (e, t) {
    "use strict";
    var a = t["default"].extend({
        controllerName: "permalink-post",
        setupController: function (e, t) {
            t.set("shouldOpenEmbedModal", !0)
        }
    });
    e["default"] = a
}), define("vine-ember/routes/permalink-post/index", ["exports", "vine-ember/routes/base"], function (e, t) {
    "use strict";
    var a = t["default"].extend({
        controllerName: "permalink-post",
        afterModel: function (e) {
            e.set("shouldOpenEmbedModal", !1)
        }
    });
    e["default"] = a
}), define("vine-ember/routes/playlists", ["exports", "vine-ember/routes/base"], function (e, t) {
    "use strict";
    var a = t["default"].extend({
        model: function (e) {
            return this.get("services.list").editorialWithPosts(null, {
                size: 9
            }).then(function (e) {
                var t = [];
                return e.posts.forEach(function (e) {
                    t = t.concat(e.map(function (t, a) {
                        return t.context = {
                            list: e.list,
                            positionIndex: a + 1,
                            listLength: e.length
                        }, t
                    }))
                }), {
                    lists: e,
                    allPosts: t
                }
            })
        },
        afterModel: function (e, t) {
            this.set("title", "Playlists - Vine"), this.controllerFor("application").set("mobileTitle", "Playlists")
        },
        setupController: function (e, t) {
            var a = this.get("services.list");
            e.setProperties({
                model: t.allPosts,
                pagination: t.lists.pagination,
                lists: t.lists.posts,
                endpoint: a.editorialWithPosts.bind(a)
            })
        }
    });
    e["default"] = a
}), define("vine-ember/routes/popular-now", ["exports", "vine-ember/routes/timeline"], function (e, t) {
    "use strict";
    var a = t["default"].extend({
        model: function (e) {
            return this.get("services.timeline").popular(null, {
                size: 18
            })
        },
        afterModel: function (e, t) {
            this.setProperties({
                timelineName: "Popular Now",
                appUrl: "vine://popular-now"
            }), this._super(e, t)
        },
        setupController: function (e, t) {
            this._super(e, t);
            var a = this.get("services.timeline");
            e.setProperties({
                endpoint: a.popular.bind(a),
                hasHeader: !0,
                sidebarOptions: {
                    cssClass: "popular-now"
                },
                hasGridMode: !0
            }), "" === e.get("mode") && e.set("mode", "grid")
        },
        renderTemplate: function (e, t) {
            this._super(e, t), this.render("timelines/headers/popular-now", {
                into: "timeline",
                outlet: "timelineHeader"
            })
        }
    });
    e["default"] = a
}), define("vine-ember/routes/profiles", ["exports", "ember"], function (e, t) {
    "use strict";
    var a = t["default"].Route.extend({
        beforeModel: function (e) {
            this._super(e), this.transitionTo("settings")
        }
    });
    e["default"] = a
}), define("vine-ember/routes/promo/camera", ["exports", "vine-ember/routes/base"], function (e, t) {
    "use strict";
    var a = t["default"].extend({
        afterModel: function (e, t) {
            this.set("title", "The new Vine camera")
        }
    });
    e["default"] = a
}), define("vine-ember/routes/search", ["exports", "ember", "vine-ember/routes/base"], function (e, t, a) {
    "use strict";
    var n = a["default"].extend({
        _processQuery: function (e) {
            return e = e.replace(/\+/g, " "), decodeURIComponent(e)
        },
        model: function (e) {
            return e.query = this._processQuery(e.query), t["default"].RSVP.hash({
                posts: this.get("services.search").posts(e, {
                    size: 18
                }),
                users: this.get("services.search").users(e),
                tags: this.get("services.search").tags(e, {
                    size: 35
                }),
                venues: this.get("services.search").venues(e, {
                    size: 35
                })
            }).then(function (t) {
                return t.query = e.query, t
            })
        },
        afterModel: function (e, t) {
            this.set("title", 'Results for "' + e.query + '" - Vine'), this.controllerFor("application").set("mobileTitle", 'Results for "' + e.query + '"')
        }
    });
    e["default"] = n
}), define("vine-ember/routes/search/index", ["exports", "vine-ember/routes/base"], function (e, t) {
    "use strict";
    var a = t["default"].extend({
        model: function () {
            return this.modelFor("search")
        },
        setupController: function (e, t) {
            var a = this.get("services.search"),
                n = t.query;
            e.setProperties({
                users: t.users,
                tags: t.tags,
                venues: t.venues,
                model: t.posts.posts,
                pagination: t.posts.pagination,
                endpoint: a.posts.bind(a),
                params: {
                    query: n
                },
                routeParam: n
            })
        }
    });
    e["default"] = a
}), define("vine-ember/routes/search/tags", ["exports", "ember", "vine-ember/routes/base"], function (e, t, a) {
    "use strict";
    var n = a["default"].extend({
        model: function () {
            var e = this.modelFor("search").tags;
            e.query = this.modelFor("search").query;
            var a = this.get("services.timeline"),
                n = e.posts.slice(0, 2).map(function (e) {
                    return a.tag({
                        tag: e.tag
                    }, {
                        size: 6
                    }).then(function (t) {
                        return {
                            tag: e.tag,
                            hashtag: e.get("hashtag"),
                            rows: [t.posts.slice(0, 3), t.posts.slice(3)],
                            pagination: t.pagination
                        }
                    })
                });
            return t["default"].RSVP.all(n).then(function (t) {
                return e.timelines = t, e
            })
        },
        setupController: function (e, t) {
            this._super(e, t);
            var a = this.controllerFor("application").get("isMobile");
            e.set("isMobile", a)
        }
    });
    e["default"] = n
}), define("vine-ember/routes/search/users", ["exports", "vine-ember/routes/base"], function (e, t) {
    "use strict";
    var a = t["default"].extend({
        model: function () {
            return this.modelFor("search").users
        },
        setupController: function (e, t) {
            this._super(e, t);
            var a = this.get("services.search");
            e.setProperties({
                endpoint: a.users.bind(a),
                params: {
                    query: this.modelFor("search").query
                }
            })
        }
    });
    e["default"] = a
}), define("vine-ember/routes/search/venues", ["exports", "ember", "vine-ember/routes/base"], function (e, t, a) {
    "use strict";
    var n = a["default"].extend({
        model: function (e) {
            var a = this.modelFor("search").venues;
            a.query = this.modelFor("search").query;
            var n = this.get("services.timeline"),
                r = a.posts.slice(0, 2).map(function (e) {
                    return n.venue({
                        venue_id: e.foursquareVenueId
                    }, {
                        size: 6
                    }).then(function (t) {
                        return {
                            venueName: e.venueName,
                            foursquareVenueId: e.foursquareVenueId,
                            rows: [t.posts.slice(0, 3), t.posts.slice(3)],
                            pagination: t.pagination
                        }
                    })
                });
            return t["default"].RSVP.all(r).then(function (e) {
                return a.timelines = e, a
            })
        },
        setupController: function (e, t) {
            this._super(e, t);
            var a = this.controllerFor("application").get("isMobile");
            e.set("isMobile", a)
        }
    });
    e["default"] = n
}), define("vine-ember/routes/settings", ["exports", "vine-ember/routes/base", "vine-ember/services/authentication/mixins/authenticated_route_mixin"], function (e, t, a) {
    "use strict";
    var n = t["default"].extend(a["default"], {
        afterModel: function (e, t) {
            t.send("setAppUrl", "vine://user/settings"), this.set("title", "Settings - Vine"), this.controllerFor("application").set("mobileTitle", "Settings")
        }
    });
    e["default"] = n
}), define("vine-ember/routes/tag", ["exports", "vine-ember/routes/timeline", "vine-ember/services/timeline"], function (e, t, a) {
    "use strict";
    var n = t["default"].extend({
        model: function (e) {
            return a["default"].tag(e)
        },
        afterModel: function (e, t) {
            this.setProperties({
                timelineName: "#" + e.tag.tag,
                appUrl: "vine://tag/" + e.tag.tag
            }), this._super(e, t)
        },
        setupController: function (e, t) {
            this._super(e, t), e.setProperties({
                endpoint: a["default"].tag.bind(a["default"]),
                params: {
                    tag: t.tag.tag
                },
                routeParam: t.tag.tag,
                hashtag: t.tag.get("hashtag"),
                hasHeader: !0,
                sidebarOptions: {
                    cssClass: "tag",
                    totalPosts: t.pagination.count
                }
            })
        },
        renderTemplate: function (e, t) {
            this._super(e, t), this.render("timelines/headers/tag", {
                into: "timeline",
                outlet: "timelineHeader"
            })
        }
    });
    e["default"] = n
}), define("vine-ember/routes/timeline", ["exports", "vine-ember/routes/base"], function (e, t) {
    "use strict";
    var a = t["default"].extend({
        controllerName: "timeline",
        hasGridMode: !1,
        setupController: function (e, t) {
            e.setProperties({
                model: t.posts,
                pagination: t.pagination,
                timelineName: this.get("timelineName"),
                hasGridMode: this.get("hasGridMode"),
                hasHeader: !1,
                hideSidebar: !1,
                sidebarOptions: void 0,
                sidebarContentTemplate: void 0
            })
        },
        afterModel: function (e, t) {
            if (t.send("gaq", ["_setCustomVar", 1, "Posttype", "timeline"]), this.get("timelineName") && (this.set("title", this.get("timelineName") + " - Vine"), this.controllerFor("application").set("mobileTitle", this.get("timelineName"))), this.get("appUrl") && t.send("setAppUrl", this.get("appUrl")), this.get("scribeAppState")) {
                var a = this.get("scribeAppState");
                a.view = a.view || "timeline", this.get("scribe").setAppNavigation(a), this.get("scribe").scribeEvent("view_impression", this.get("scribeDetails"))
            }
        },
        renderTemplate: function (e, t) {
            this.render("timeline", {
                controller: this.get("controllerName")
            })
        }
    });
    e["default"] = a
}), define("vine-ember/routes/unsubscribe-vm", ["exports", "vine-ember/routes/base"], function (e, t) {
    "use strict";
    var a = t["default"].extend({
        model: function (e) {
            return {
                token: e.token
            }
        }
    });
    e["default"] = a
}), define("vine-ember/routes/user-fallback", ["exports", "vine-ember/routes/user"], function (e, t) {
    "use strict";
    var a = t["default"].extend();
    e["default"] = a
}), define("vine-ember/routes/user", ["exports", "ember", "vine-ember/routes/timeline", "vine-ember/utils/emojify", "vine-scribe"], function (e, t, a, n, r) {
    "use strict";
    var i = a["default"].extend({
        controllerName: "user",
        scribeAppState: {
            section: "",
            view: "profile"
        },
        hasAccess: function (e) {
            return e.blocked ? !1 : e["private"] ? this.get("session").isCurrentUser(e.userIdStr) || e.following && !e.followRequested : !0
        },
        model: function (e) {
            this.set("params", e);
            var t = this.get("services.timeline");
            return this.get("services.user").profile(e).then(function (e) {
                if (!this.hasAccess(e)) return {
                    user: e
                };
                var a, n = {
                    user_id: e.userIdStr
                };
                return a = window.localStorage.suspended ? t.escUser(n) : t.user(n), a.then(function (t) {
                    return t.user = e, t
                })
            }.bind(this))
        },
        afterModel: function (e, a) {
            var i = e.user;
            this.set("scribeAppState.timeline_api_url", "/timeline/users/" + i.userIdStr), this.set("scribeDetails", {
                items: [this.get("scribe").generateItem(r.values.ITEM_TYPES.USER, i)]
            }), this.get("session").isCurrentUser(i.userIdStr) && this.set("scribeAppState.section", "my_profile");
            var d = new t["default"].Handlebars.SafeString(n["default"](t["default"].Handlebars.Utils.escapeExpression(i.username)));
            this.setProperties({
                timelineName: d,
                appUrl: "vine://tw/user/" + i.userIdStr
            }), this._super(e, a);
            var s = i.get("hasVanityUrls"),
                c = "replaceState" in window.history;
            if (c && s) {
                var o = i.get("vanityUrl");
                if (this.get("params").vanity !== o) {
                    var l = "/" + o;
                    window.history.replaceState({
                        path: l
                    }, "user", l)
                }
            }
        },
        setupController: function (e, t) {
            this._super(e, t);
            var a = t.user,
                n = this.get("services.timeline");
            a.set("hasAccess", this.hasAccess(a)), e.setProperties({
                user: a,
                endpoint: n.user.bind(n),
                params: {
                    user_id: a.userIdStr
                },
                routeParam: this.get("params.vanity") || this.get("params.user_id"),
                sidebarContentTemplate: "timelines/sidebars/user",
                sidebarOptions: {
                    cssClass: "user",
                    iconStyle: "background-image: url('" + a.get("secureAvatarUrl") + "')"
                },
                hasGridMode: !0
            })
        },
        renderTemplate: function (e, t) {
            this._super(e, t), this.render("timelines/custom-styles/user", {
                into: "timeline",
                outlet: "customStyles"
            });
            var a = this.get("session").isCurrentUser(t.user.userIdStr) && (this.get("session.suspended") || this.get("session.isEscUser"));
            a && this.render("timelines/sidebars/suspension-sidebar", {
                into: "timeline",
                outlet: "rightSidebar"
            })
        }
    });
    e["default"] = i
}), define("vine-ember/routes/venue", ["exports", "vine-ember/routes/timeline", "vine-ember/services/api"], function (e, t, a) {
    "use strict";
    var n = t["default"].extend({
        model: function (e) {
            return this.get("services.timeline").venue(e).then(function (t) {
                return t.posts.length && (t.venueName = t.posts[0].venueName, t.venueId = e.venue_id), t
            }).then(function (t) {
                return a["default"].ajax("/foursquare/venues/" + e.venue_id, "get").then(function (e) {
                    return t.lat = e.lat, t.lng = e.lng, t
                })["catch"](function () {
                    return t
                })
            })
        },
        afterModel: function (e, t) {
            this.setProperties({
                timelineName: e.venueName,
                appUrl: "vine://venue/" + e.venueId
            }), this._super(e, t)
        },
        setupController: function (e, t) {
            this._super(e, t);
            var a = this.get("services.timeline");
            e.setProperties({
                venue: t.venueName,
                endpoint: a.venue.bind(a),
                params: {
                    venue_id: t.venueId
                },
                routeParam: t.venueId,
                hasHeader: !0,
                sidebarOptions: {
                    cssClass: "venue",
                    totalPosts: t.pagination.count
                }
            }), this.controllerFor("timelines/headers/venue").set("model", t)
        },
        renderTemplate: function (e, t) {
            this._super(e, t), this.render("timelines/headers/venue", {
                into: "timeline",
                outlet: "timelineHeader",
                controller: "timelines/headers/venue"
            })
        }
    });
    e["default"] = n
}), define("vine-ember/routes/vm-post", ["exports", "vine-ember/routes/base"], function (e, t) {
    "use strict";
    var a = t["default"].extend({
        model: function (e) {
            return this.set("token", e.token), this.get("services.conversation").conversation(e.token)
        },
        afterModel: function (e, t) {
            t.send("gaq", ["_setCustomVar", 1, "Posttype", "vm-landing"]), e.conversationIdStr && t.send("setAppUrl", "vine://conversations/" + e.conversationIdStr)
        },
        setupController: function (e, t) {
            this._super(e, t), e.setProperties({
                token: this.get("token"),
                playing: !1,
                expired: !!t.expired
            })
        }
    });
    e["default"] = a
}), define("vine-ember/services/api", ["exports", "ember"], function (e, t) {
    "use strict";
    var a = t["default"].Object.extend({
            host: "/api",
            request: function (e, t, a, n) {
                var r = this.host,
                    i = r + t;
                return n = n || {}, n.data = a, this.ajax(i, e, n)
            },
            cachedRequest: function (e, a, n, r, i) {
                if (void 0 === i && (i = !0), i) {
                    var d = !!window.localStorage.authToken;
                    if (!d && r) return t["default"].RSVP.resolve({
                        data: r
                    })
                } else if (r) return t["default"].RSVP.resolve({
                    data: r
                });
                return this.request(e, a, n)
            },
            ajax: function (e, a, n) {
                return new t["default"].RSVP.Promise(function (r, i) {
                    n = n || {}, n.url = e, n.type = a, n.dataType = n.dataType || "json", n.success = function (e) {
                        t["default"].run(null, r, e)
                    }, n.error = function (e, a, n) {
                        var r = {};
                        if (e.responseText) try {
                            r = JSON.parse(e.responseText)
                        } catch (d) {
                            r = {
                                error: d
                            }
                        }
                        var s = {
                            xhr: e,
                            status: a,
                            error: n,
                            response: r
                        };
                        t["default"].run(null, i, s)
                    }, t["default"].$.ajax(n)
                })
            }
        }),
        n = a.create();
    e["default"] = n
}), define("vine-ember/services/authentication/core", ["exports", "ember"], function (e, t) {
    "use strict";
    var a = {};
    a.setup = function (e, a, n) {
        n = n || {}, this.routeAfterLogin = n.routeAfterLogin || "index", this.routeAfterLogout = n.routeAfterLogout || "index", this.loginRoute = n.loginRoute || "login", this.serverTokenEndpoint = n.serverTokenEndpoint || "/token", this.autoRefreshToken = t["default"].isEmpty(n.autoRefreshToken) ? !0 : !!n.autoRefreshToken;
        var r = this.Session.create();
        a.register("simple_auth:session", r, {
            instantiate: !1,
            singleton: !0
        }), t["default"].$.each(["controller", "view", "route", "component"], function (e, t) {
            a.inject(t, "session", "simple_auth:session")
        }), t["default"].$.ajaxPrefilter(function (e, a, n) {
            var i = /^\/api\//;
            e.url.match(i) && (n.setRequestHeader("x-vine-client", window.APP_CONFIG.VINE_CLIENT), t["default"].isEmpty(r.get("authToken")) || n.setRequestHeader("vine-session-id", r.get("authToken")), t["default"].isEmpty(r.get("guestId")) || n.setRequestHeader("vine-guest-id", r.get("guestId")))
        }), r.fetchFlags(), this.externalLoginSucceeded = function (t) {
            r.setup(t), e.lookup("route:application").send("loginSucceeded")
        }, this.externalLoginFailed = function (t) {
            e.lookup("route:application").send("loginFailed", t)
        }
    }, e["default"] = a
}), define("vine-ember/services/authentication/main", ["exports", "vine-ember/services/authentication/core", "vine-ember/services/authentication/session", "vine-ember/services/authentication/mixins/authenticated_route_mixin", "vine-ember/services/authentication/mixins/login_controller_mixin", "vine-ember/services/authentication/mixins/application_route_mixin"], function (e, t, a, n, r, i) {
    "use strict";
    var d = t["default"];
    d.Session = a["default"], d.AuthenticatedRouteMixin = n["default"], d.LoginControllerMixin = r["default"], d.ApplicationRouteMixin = i["default"], e["default"] = d
}), define("vine-ember/services/authentication/mixins/application_route_mixin", ["exports", "ember", "vine-ember/services/authentication/core"], function (e, t, a) {
    "use strict";
    var n = t["default"].Mixin.create({
        actions: {
            login: function () {
                this.transitionTo(a["default"].loginRoute)
            },
            loginSucceeded: function () {
                this.send("gaq", ["_trackEvent", "Login", "success"]);
                var e = this.get("session.attemptedTransition");
                this.get("session.suspended") || this.get("session.isEscUser") ? this.transitionTo("user-fallback", this.get("session.userId")) : e ? (e.retry(), this.set("session.attemptedTransition", void 0)) : this.controllerFor("application").get("modal.login") ? this.send("hideModal") : this.transitionTo(a["default"].routeAfterLogin), this.controllerFor("modal/login").send("doSuccessEvent")
            },
            loginFailed: function (e) {
                var t;
                "object" == typeof e ? t = e.response.error : e && (t = e), this.send("gaq", ["_trackEvent", "Login", "error", t])
            },
            logout: function (e) {
                this.get("services.user").unauthenticate()["finally"](function () {
                    this.get("session").destroy();
                    var t = e || a["default"].routeAfterLogout;
                    this.transitionTo(t)
                }.bind(this)), this.send("gaq", ["_trackEvent", "Login", "logout"])
            }
        }
    });
    e["default"] = n
}), define("vine-ember/services/authentication/mixins/authenticated_route_mixin", ["exports", "ember"], function (e, t) {
    "use strict";
    var a = t["default"].Mixin.create({
        beforeModel: function (e) {
            this._super(e), this.get("session.isAuthenticated") || this.triggerLogin(e)
        },
        triggerLogin: function (e) {
            this.set("session.attemptedTransition", e), e.send("login")
        }
    });
    e["default"] = a
}), define("vine-ember/services/authentication/mixins/login_controller_mixin", ["exports", "ember"], function (e, t) {
    "use strict";
    var a = t["default"].Mixin.create({
        actions: {
            login: function () {
                var e = this,
                    a = this.getProperties("identification", "password");
                t["default"].isEmpty(a.identification) || t["default"].isEmpty(a.password) || this.get("services.user").authenticate(a.identification, a.password).then(function (t) {
                    e.send("setupSession", t)
                })["catch"](function (t) {
                    e.send("loginFailed", t)
                })["finally"](function () {
                    e.set("password", void 0)
                })
            }
        }
    });
    e["default"] = a
}), define("vine-ember/services/authentication/session", ["exports", "ember", "vine-ember/services/api", "vine-ember/services/user"], function (e, t, a, n) {
    "use strict";
    var r = t["default"].Object.extend({
        init: function () {
            this._super(), this.setProperties({
                authToken: localStorage.authToken,
                userId: localStorage.userId,
                suspended: localStorage.suspended,
                isEscUser: localStorage.isEscUser,
                guestId: localStorage.guestId
            }), this.logAuthentication()
        },
        _doSetup: function (e, t) {
            this.setProperties({
                authToken: e.key,
                userId: e.userIdStr,
                suspended: e.suspended,
                isEscUser: e.isEscUser
            }), this.fetchFlags(), this.logAuthentication(), t.resolve()
        },
        setup: function (e) {
            e = e || {};
            var a = t["default"].RSVP.defer();
            return this.get("isAuthenticated") && this.get("authToken") !== e.key ? n["default"].unauthenticate()["finally"](function () {
                this._doSetup(e, a)
            }.bind(this)) : this._doSetup(e, a), a.promise
        },
        setupFlags: function (e) {
            e = e || {}, this.setProperties({
                guestId: e.guestId
            })
        },
        destroy: function () {
            this.setProperties({
                authToken: void 0,
                userId: void 0,
                suspended: void 0,
                isEscUser: void 0
            }), this.fetchFlags()
        },
        isCurrentUser: function (e) {
            return this.get("userId") ? e === this.get("userId") : !1
        },
        isAuthenticated: t["default"].computed("authToken", function () {
            return !t["default"].isEmpty(this.get("authToken"))
        }),
        handlePropertyChange: function (e) {
            var a = this.get(e);
            t["default"].isEmpty(a) ? delete localStorage[e] : localStorage[e] = a
        },
        fetchFlags: function () {
            a["default"].request("get", "/clientflags").then(function (e) {
                this.setupFlags(e.data)
            }.bind(this))
        },
        logAuthentication: function () {
            var e = this.get("isAuthenticated") ? "logged_in" : "logged_out";
            window._gaq && window._gaq.push(["_setCustomVar", 3, "authentication", e])
        },
        authTokenObserver: t["default"].observer(function () {
            this.handlePropertyChange("authToken")
        }, "authToken"),
        userIdObserver: t["default"].observer(function () {
            this.handlePropertyChange("userId")
        }, "userId"),
        suspendedObserver: t["default"].observer(function () {
            this.handlePropertyChange("suspended")
        }, "suspended"),
        isEscUserObserver: t["default"].observer(function () {
            this.handlePropertyChange("isEscUser")
        }, "isEscUser"),
        guestIdObserver: t["default"].observer(function () {
            this.handlePropertyChange("guestId")
        }, "guestId")
    });
    e["default"] = r
}), define("vine-ember/services/channels", ["exports", "ember", "vine-ember/services/api", "vine-ember/models/channel"], function (e, t, a, n) {
    "use strict";
    var r = t["default"].Object.extend({
            setup: function () {
                if (this.get("channels")) return t["default"].RSVP.resolve();
                var e;
                return window.CHANNELS_DATA && (e = window.CHANNELS_DATA, delete window.CHANNELS_DATA), t["default"].RSVP.hash({
                    channels: a["default"].cachedRequest("get", "/channels/featured?all=1", null, e, !1),
                    featuredTimelines: a["default"].request("get", "/timelines/lists/featured")
                }).then(function (e) {
                    var t = e.channels.data.records,
                        a = e.featuredTimelines.data.records,
                        r = t.concat(a).map(function (e) {
                            return n["default"].create(e)
                        });
                    return this.set("channels", r), r
                }.bind(this))
            },
            findAll: function () {
                return this.get("channels") ? t["default"].RSVP.resolve(this.get("channels")) : this.setup()
            },
            findById: function (e) {
                return this.findAll().then(function (t) {
                    return t.findBy("channelIdStr", e)
                })
            },
            findByVanityUrl: function (e) {
                return a["default"].request("get", "/timelines/channels/vanity/" + e).then(function (e) {
                    return n["default"].create(e.data.channel)
                })
            }
        }),
        i = r.create();
    e["default"] = i
}), define("vine-ember/services/complaint", ["exports", "ember", "vine-ember/services/api"], function (e, t, a) {
    "use strict";
    var n = t["default"].Object.extend({
            complaintData: void 0,
            setup: function () {
                return a["default"].request("get", "/complaints/menu").then(function (e) {
                    return this.set("complaintData", e.data), e.data
                }.bind(this))["catch"](function () {
                    return {}
                })
            },
            getCategory: function (e) {
                return this.get("complaintData") ? t["default"].RSVP.resolve(this.get("complaintData")[e] || {}) : this.setup().then(function (t) {
                    return t[e] || {}
                })
            }
        }),
        r = n.create();
    e["default"] = r
}), define("vine-ember/services/conversation", ["exports", "ember", "vine-ember/services/api", "vine-ember/models/post", "vine-ember/models/user", "vine-ember/services/pagination"], function (e, t, a, n, r, i) {
    "use strict";
    var d = t["default"].Object.extend({
        conversation: function (e) {
            return a["default"].request("get", "/conversations/messages/" + e).then(function (e) {
                var t = n["default"].create(e.data),
                    a = r["default"].create(t.user);
                return t.set("user", a), t.get("post") && t.setProperties(n["default"].create(t.get("post"))), t
            }, function (e) {
                if (e && e.response) {
                    var t = e.response.code;
                    switch (t) {
                    case 605:
                        return {
                            confirmation: {
                                error: {
                                    message: e.response.error
                                }
                            }
                        };
                    case 606:
                        return {
                            expired: !0, expiredMessage: e.response.error, resendable: !1
                        };
                    case 607:
                        return {
                            expired: !0, maxLoops: !0, expiredMessage: e.response.error
                        };
                    case 619:
                        return {
                            expired: !0, expiredMessage: e.response.error, resendable: !0
                        };
                    default:
                        return {
                            confirmation: {
                                error: !0
                            }
                        }
                    }
                }
            })
        },
        refreshToken: function (e) {
            return a["default"].request("get", "/conversations/tokens/" + e + "/resend")
        },
        unsubscribeEmail: function (e) {
            return a["default"].request("get", "/conversations/messages/" + e + "/unsubscribe")
        },
        vmPost: function (e, t) {
            var n = {
                postId: e,
                to: t.map(function (e) {
                    return {
                        userId: e
                    }
                }),
                created: moment().format()
            };
            return a["default"].request("post", "/conversations", JSON.stringify(n), {
                contentType: "application/json; charset=utf-8"
            })
        },
        searchRecipients: function (e, t) {
            var n = {};
            return t && (t.nextPage && (n.page = t.nextPage), t.anchorStr && (n.anchor = t.anchorStr)), n.st = "mention", a["default"].request("get", "/users/search/" + e, n).then(function (e) {
                return i["default"](e, r["default"])
            })
        }
    });
    e["default"] = d.create()
}), define("vine-ember/services/errors", ["exports"], function (e) {
    "use strict";
    e["default"] = {
        REQUIRES_LOGIN: 100,
        INVALID_SESSION: 103,
        DOES_NOT_EXIST: 900,
        DELETED: 903,
        DMCA: 904
    }
}), define("vine-ember/services/facebook", ["exports", "ember", "vine-ember/services/api", "vine-ember/services/video-preload-queue"], function (e, t, a, n) {
    "use strict";
    var r = t["default"].Object.extend({
            queue: [],
            getURLCount: function (e) {
                var a = t["default"].RSVP.defer();
                return this.queue.push({
                    url: e,
                    deferred: a
                }), t["default"].run.later(this, function () {
                    this._flushQueue()
                }, 500), a.promise
            },
            _flushQueue: function () {
                if (0 !== this.queue.length) {
                    if (!n["default"].get("canUnlockPreload")) return void t["default"].run.later(this, function () {
                        this._flushQueue()
                    }, 500);
                    var e = this.queue;
                    this.queue = [];
                    for (var r = [], i = 0; i < e.length; ++i) r.push(encodeURIComponent(e[i].url));
                    return a["default"].ajax("https://web.archive.org/web/20150701150124/https://graph.facebook.com/?ids=" + r.join(","), "get").then(function (t) {
                        for (var a = 0; a < e.length; ++a) {
                            var n = e[a].url,
                                r = e[a].deferred;
                            t && t[n] ? r.resolve(t[n].shares || 0) : r.reject("No page found")
                        }
                    }, function (t) {
                        for (var a = 0; a < e.length; ++a) e[a].deferred.reject("Failed to load")
                    })
                }
            }
        }),
        i = r.create();
    e["default"] = i
}), define("vine-ember/services/jobs", ["exports", "ember", "vine-ember/services/api"], function (e, t, a) {
    "use strict";
    var n = t["default"].Object.extend({
            jobPromise: null,
            allJobs: function () {
                var e = this.get("jobPromise");
                return e || (e = a["default"].ajax(window.APP_CONFIG.ASSETS_CDN_PREFIX + "json/jobs.json", "get"), this.set("jobPromise", e)), e
            }
        }),
        r = n.create();
    e["default"] = r
}), define("vine-ember/services/list", ["exports", "ember", "vine-ember/services/api", "vine-ember/services/timeline", "vine-ember/services/channels", "vine-ember/services/pagination", "vine-ember/models/list"], function (e, t, a, n, r, i, d) {
    "use strict";
    var s = 0,
        c = t["default"].Object.extend({
            list: function (e) {
                return a["default"].request("get", "/timelines/lists/" + e.list_id).then(function (e) {
                    return e.data
                })
            },
            listPosts: function (e, t, a) {
                var r;
                return window.TIMELINES_DATA && window.TIMELINES_DATA[e.list_id] && (r = window.TIMELINES_DATA[e.list_id], delete window.TIMELINES_DATA[e.list_id]), n["default"]._getWithUrl("/timelines/lists/" + e.list_id + "/posts", t, r, a)
            },
            listVanity: function (e) {
                return a["default"].request("get", "/timelines/lists/vanity/" + e.vanity).then(function (e) {
                    return d["default"].create(e.data)
                })
            },
            listVanityPosts: function (e, t) {
                return n["default"]._getWithUrl("/timelines/lists/vanity/" + e.vanity + "/posts", t)
            },
            pinnedBindings: function () {
                var e;
                return window.PINNED_BINDINGS_DATA && (e = window.PINNED_BINDINGS_DATA, delete window.PINNED_BINDINGS_DATA), a["default"].cachedRequest("get", "/timelines/lists/pinned", null, e, !1)
            },
            pinned: function (e, n, i) {
                var d, s = this,
                    c = i.timelineSize || 3,
                    o = this.pinnedBindings().then(function (e) {
                        var t = {},
                            a = e.data.channels;
                        return Object.keys(a).forEach(function (e) {
                            t[a[e].timelineIdStr] = a[e].channelIdStr
                        }), t
                    });
                window.PINNED_LISTS_DATA && (d = window.PINNED_LISTS_DATA, delete window.PINNED_LISTS_DATA);
                var l = a["default"].cachedRequest("get", "/timelines/lists/web", n, d, !1).then(function (e) {
                    return e.data.records
                });
                return t["default"].RSVP.hash({
                    channelBindings: o,
                    pinnedLists: l
                }).then(function (e) {
                    return t["default"].RSVP.all(e.pinnedLists.map(function (a) {
                        return t["default"].RSVP.hash({
                            channel: r["default"].findById(e.channelBindings[a.timelineIdStr]),
                            posts: s.listPosts({
                                list_id: a.timelineIdStr
                            }, {
                                size: 2 * c
                            }).then(function (e) {
                                return e.posts.slice(0, c)
                            })
                        })
                    }))
                })
            },
            editorial: function (e, t) {
                var n;
                return window.EDITORIAL_LISTS_DATA && (n = window.EDITORIAL_LISTS_DATA, s += 1, 2 === s && (delete window.EDITORIAL_LISTS_DATA, s = 0)), a["default"].cachedRequest("get", "/timelines/lists/editorial", t, n, !1).then(function (e) {
                    return i["default"](e, d["default"])
                })
            },
            editorialWithPosts: function (e, a, n) {
                var r = this;
                return this.editorial(e, a).then(function (e) {
                    return e.posts = e.posts.slice(n || 0, a.size), e.pagination.size = a.size, e.posts = t["default"].RSVP.all(e.posts.map(function (e) {
                        return r.listPosts({
                            list_id: e.timelineIdStr
                        }).then(function (t) {
                            var a = t.posts;
                            return a.pagination = t.pagination, a.list = e, a
                        }, function () {
                            return {
                                list: e
                            }
                        })
                    })), t["default"].RSVP.hash({
                        posts: e.posts,
                        pagination: e.pagination
                    })
                })
            },
            homepage: function (e, t) {
                var a = "1026801023840313344";
                return this.listPosts({
                    list_id: a
                }, t, !1).then(function (e) {
                    return e.posts = e.posts.filter(function (e) {
                        return !e.get("explicitContent")
                    }), e
                })
            }
        }),
        o = c.create();
    e["default"] = o
}), define("vine-ember/services/loop-tracker", ["exports", "ember", "vine-ember/services/api", "vine-ember/utils/loop-incrementor", "vine-ember/config/environment"], function (e, t, a, n, r) {
    "use strict";
    Date.now || (Date.now = function () {
        return (new Date).getTime()
    });
    var i = t["default"].Object.extend({
        name: "main",
        currentLoopSet: null,
        nextUpdateTimestamp: 0,
        enabled: !0,
        init: function () {
            var e = t["default"].A(JSON.parse(window.localStorage[this.get("pendingLoopLocalStorageKey")] || "[]"));
            this.set("pendingLoops", e), e.length && this._flush(!0), $(window).unload(this._flush.bind(this, !0))
        },
        pendingLoopLocalStorageKey: function () {
            return this.get("name") + "PendingLoops"
        }.property("name"),
        totalPendingLoops: function () {
            var e = 0;
            return this.get("pendingLoops").forEach(function (t) {
                e += t.count
            }), e
        }.property("pendingLoops", "pendingLoops.length", "pendingLoops.@each.count"),
        startPlaying: function (e) {
            this.get("currentLoopSet") && 0 === this.get("currentLoopSet.count") && this.get("pendingLoops").popObject(), this.set("currentLoopSet", t["default"].Object.create({
                postId: e,
                count: 0,
                ts: 0
            })), this.get("pendingLoops").pushObject(this.get("currentLoopSet"))
        },
        recordLoop: function (e) {
            n["default"].addLoopTo(e);
            var t = this.get("currentLoopSet");
            if (t && this.get("enabled")) {
                var a = Date.now() / 1e3;
                if (a - t.get("ts") < 2) return this.set("enabled", !1), this.set("currentLoopSet", null), void this.get("pendingLoops").clear();
                t.get("count") < 25 && t.incrementProperty("count"), t.set("ts", a), r["default"].LOOP_RECORDING_DISABLED && this._flush()
            }
        },
        _saveLoopsToLocalStorage: function () {
            window.localStorage[this.get("pendingLoopLocalStorageKey")] = JSON.stringify(this.get("pendingLoops"))
        }.observes("pendingLoops"),
        _flush: function (e) {
            if (!(!e && this.get("nextUpdateTimestamp") && Date.now() < this.get("nextUpdateTimestamp"))) {
                var t = this.get("pendingLoops").slice(0);
                this.get("pendingLoops").clear();
                var n = this.get("currentLoopSet");
                n && this.startPlaying(n.postId), this.incrementProperty("nextUpdateTimestamp", 3e4), a["default"].ajax("/api/loops", "post", {
                    async: !e,
                    headers: {
                        "X-Request-Id": this.generateRequestId()
                    },
                    contentType: "application/json",
                    data: JSON.stringify({
                        loops: t
                    })
                }).then(function (e) {
                    this.set("nextUpdateTimestamp", Date.now() + 1e3 * (e.nextAfter || 30))
                }.bind(this), function () {
                    this.get("pendingLoops").unshiftObjects(t)
                }.bind(this))
            }
        },
        generateRequestId: function () {
            return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function (e) {
                var t = 16 * Math.random() | 0,
                    a = "x" === e ? t : 3 & t | 8;
                return a.toString(16)
            })
        }
    });
    e["default"] = i
}), define("vine-ember/services/pagination", ["exports", "ember"], function (e, t) {
    "use strict";

    function a(e, t) {
        var a = e.data,
            r = a.records,
            i = a.context,
            d = n.create();
        d.setup(a), t && (r = r.map(function (e) {
            return t.create(e)
        }));
        var s = {
            posts: r,
            pagination: d
        };
        return i && (s.context = i), s
    }
    var n = t["default"].Object.extend({
        fields: ["anchor", "anchorStr", "count", "nextPage", "previousPage", "size"],
        setup: function (e) {
            this.get("fields").forEach(function (t) {
                this.set(t, e[t])
            }.bind(this))
        }
    });
    e["default"] = a
}), define("vine-ember/services/password", ["exports", "ember", "vine-ember/services/api"], function (e, t, a) {
    "use strict";
    var n = t["default"].Object.extend({
        forgotPassword: function (e) {
            return a["default"].request("get", "/users/forgotPassword", {
                email: e
            })
        },
        resetPassword: function (e, t) {
            return a["default"].request("post", "/users/resetPassword", {
                token: e,
                password: t
            })
        }
    });
    e["default"] = n.create()
}), define("vine-ember/services/post", ["exports", "ember", "vine-ember/services/api", "vine-ember/services/pagination"], function (e, t, a, n) {
    "use strict";
    var r = t["default"].Object.extend({
        like: function (e) {
            return a["default"].request("post", "/posts/" + e + "/likes")
        },
        unLike: function (e) {
            return a["default"].request("delete", "/posts/" + e + "/likes")
        },
        revine: function (e) {
            return a["default"].request("post", "/posts/" + e + "/repost").then(function (e) {
                return e.data
            })
        },
        unRevine: function (e, t) {
            return a["default"].request("delete", "/posts/" + e + "/repost/" + t)
        },
        comment: function (e, t) {
            return a["default"].request("post", "/posts/" + e + "/comments", {
                comment: t
            }).then(function (e) {
                return e.data
            })
        },
        comments: function (e, t) {
            return a["default"].request("get", "/posts/" + e + "/comments", t).then(n["default"])
        },
        report: function (e, t) {
            return a["default"].request("post", "/posts/" + e + "/complaints", {
                code: t
            })
        },
        deletePost: function (e) {
            return a["default"].request("delete", "/posts/" + e)
        }
    });
    e["default"] = r.create()
}), define("vine-ember/services/search", ["exports", "ember", "vine-ember/services/api", "vine-ember/services/pagination", "vine-ember/models/user", "vine-ember/models/post", "vine-ember/models/tag"], function (e, t, a, n, r, i, d) {
    "use strict";
    var s = t["default"].Object.extend({
            tags: function (e, t) {
                return a["default"].request("get", "/tags/search/" + encodeURIComponent(e.query), t).then(function (e) {
                    return n["default"](e, d["default"])
                })["catch"](function () {
                    return {
                        posts: []
                    }
                })
            },
            users: function (e, t) {
                return a["default"].request("get", "/users/search/" + encodeURIComponent(e.query), t).then(function (e) {
                    return n["default"](e, r["default"])
                })["catch"](function () {
                    return {
                        posts: []
                    }
                })
            },
            venues: function (e, t) {
                return a["default"].request("get", "/venues/search/" + encodeURIComponent(e.query), t).then(n["default"])["catch"](function () {
                    return {
                        posts: []
                    }
                })
            },
            posts: function (e, t) {
                return a["default"].request("get", "/posts/search/" + encodeURIComponent(e.query), t).then(function (e) {
                    return n["default"](e, i["default"])
                })["catch"](function () {
                    return {
                        posts: []
                    }
                })
            }
        }),
        c = s.create();
    e["default"] = c
}), define("vine-ember/services/timeline", ["exports", "ember", "vine-ember/services/api", "vine-ember/services/pagination", "vine-ember/models/post", "vine-ember/models/tag"], function (e, t, a, n, r, i) {
    "use strict";

    function d(e) {
        return n["default"](e, r["default"])
    }
    var s = t["default"].Object.extend({
            urlParser: document.createElement("a"),
            _updateUrlsForPrivateContent: function (e, a) {
                return t["default"].$.each(e.posts, function (e, t) {
                    (t["private"] || a) && (["videoUrl", "videoLowURL", "thumbnailUrl", "videoDashUrl"].forEach(function (e) {
                        t[e] && this._updateKeyWithSessionId(t, e)
                    }.bind(this)), t.videoUrls && (t.videoUrls = t.videoUrls.map(function (e) {
                        return this._updateKeyWithSessionId(e, "videoUrl"), e
                    }.bind(this))))
                }.bind(this)), e
            },
            _updateKeyWithSessionId: function (e, t) {
                var a = this.urlParser;
                a.href = e[t], "https:" === a.protocol && (a.search.length > 1 ? a.search += "&" : a.search = "?", a.search += "vine-session-id=" + encodeURIComponent(window.localStorage.authToken), e[t] = a.href)
            },
            _getWithUrl: function (e, t, n, r, i) {
                return a["default"].cachedRequest("get", e, t, n, r).then(d).then(function (e) {
                    return this._updateUrlsForPrivateContent(e, i)
                }.bind(this))
            },
            post: function (e, t) {
                var a;
                window.POST_DATA && window.POST_DATA[e.short_id] && (a = {
                    records: [window.POST_DATA[e.short_id]]
                }, delete window.POST_DATA[e.short_id], 0 === Object.keys(window.POST_DATA).length && delete window.POST_DATA);
                var n = "/timelines/posts/s/" + e.short_id;
                return t && (n += "?" + $.param(t)), this._getWithUrl(n, null, a).then(function (e) {
                    return e.posts[0]
                })
            },
            relatedVideos: function (e, t, a) {
                var n = "/timelines/recommended/post/" + e.post_id;
                return a && (n += "?" + $.param(a)), this._getWithUrl(n, t)
            },
            graph: function (e, t) {
                return this._getWithUrl("/timelines/graph", t)
            },
            user: function (e, t) {
                return this._getWithUrl("/timelines/users/" + e.user_id, t)
            },
            escUser: function (e, t) {
                return this._getWithUrl("/timelines/users/esc/" + e.user_id, t, null, null, !0)
            },
            userLikes: function (e, t) {
                return this._getWithUrl("/timelines/users/" + e.user_id + "/likes", t)
            },
            channel: function (e, t) {
                return this._getWithUrl("/timelines/channels/" + e.channel_id + "/popular", t)
            },
            tag: function (e, t) {
                return this._getWithUrl("/timelines/tags/" + e.tag, t).then(function (t) {
                    return t.tag = i["default"].create({
                        tag: decodeURIComponent(e.tag)
                    }), t
                })
            },
            venue: function (e, t) {
                return this._getWithUrl("/timelines/venues/" + e.venue_id, t)
            },
            popular: function (e, t) {
                var a;
                return window.POPULAR_NOW_DATA && (a = window.POPULAR_NOW_DATA, delete window.POPULAR_NOW_DATA), this._getWithUrl("/timelines/popular", t, a)
            },
            promoted: function (e, t) {
                var n;
                return window.EDITORS_PICKS_DATA && (n = window.EDITORS_PICKS_DATA, delete window.EDITORS_PICKS_DATA), a["default"].cachedRequest("get", "/timelines/promoted", t, n).then(d)
            },
            trendingTags: function (e, t) {
                var r;
                return window.TRENDING_TAGS_DATA && (r = window.TRENDING_TAGS_DATA, delete window.TRENDING_TAGS_DATA), a["default"].cachedRequest("get", "/tags/trending", null, r, !1).then(function (e) {
                    return n["default"](e, i["default"])
                })
            }
        }),
        c = s.create();
    e["default"] = c
}), define("vine-ember/services/twitter", ["exports", "ember", "vine-ember/services/api", "vine-ember/services/video-preload-queue"], function (e, t, a, n) {
    "use strict";
    var r = t["default"].Object.extend({
            queue: [],
            accessToken: function () {
                return a["default"].ajax("/twitter/oauth/token", "get")
            },
            getURLCount: function (e) {
                var a = t["default"].RSVP.defer();
                return this.queue.push({
                    url: e,
                    deferred: a
                }), t["default"].run.later(this, function () {
                    this._flushQueue()
                }, 500), a.promise
            },
            _flushQueue: function () {
                if (0 !== this.queue.length) {
                    if (!n["default"].get("canUnlockPreload")) return void t["default"].run.later(this, function () {
                        this._flushQueue()
                    }, 500);
                    var e = this.get("queue");
                    this.set("queue", []), e.forEach(function (e) {
                        this._doGetURLCount(e.url, e.deferred)
                    }.bind(this))
                }
            },
            _doGetURLCount: function (e, t) {
                return a["default"].ajax("https://web.archive.org/web/20150701150124/https://cdn.api.twitter.com/1/urls/count.json?url=" + e, "get", {
                    dataType: "jsonp"
                }).then(function (e) {
                    t.resolve(e.count || 0)
                }, function (e) {
                    t.reject(e)
                })
            }
        }),
        i = r.create();
    e["default"] = i
}), define("vine-ember/services/url", ["exports", "ember", "vine-ember/services/api"], function (e, t, a) {
    "use strict";
    var n = t["default"].Object.extend({
            reserveUrl: function (e, t) {
                return a["default"].request("put", "/users/" + e + "/vanity/" + t)
            },
            checkUrl: function (e, t) {
                return a["default"].request("get", "/users/" + e + "/vanityCheck/" + encodeURIComponent(t))
            },
            suggestions: function (e) {
                return a["default"].request("get", "/users/" + e + "/vanitySuggestions").then(function (e) {
                    return e.data
                })
            }
        }),
        r = n.create();
    e["default"] = r
}), define("vine-ember/services/user", ["exports", "ember", "vine-ember/services/api", "vine-ember/models/user", "vine-ember/services/authentication/core", "vine-ember/services/pagination"], function (e, t, a, n, r, i) {
    "use strict";
    var d = t["default"].Object.extend({
            me: function () {
                return a["default"].request("get", "/users/me").then(function (e) {
                    return n["default"].create(e.data)
                })
            },
            profile: function (e) {
                return e.vanity ? this.vanityProfile(e) : a["default"].request("get", "/users/profiles/" + e.user_id).then(function (e) {
                    return n["default"].create(e.data)
                })
            },
            vanityProfile: function (e) {
                return a["default"].request("get", "/users/profiles/vanity/" + e.vanity).then(function (e) {
                    return n["default"].create(e.data)
                })
            },
            follow: function (e) {
                return a["default"].request("post", "/users/" + e + "/followers")
            },
            unFollow: function (e) {
                return a["default"].request("delete", "/users/" + e + "/followers")
            },
            authTwitter: function (e, t) {
                return a["default"].request("post", "/users/authenticate/twitter", {
                    twitterOauthToken: e,
                    twitterOauthSecret: t
                })
            },
            authenticate: function (e, t) {
                return a["default"].request("post", r["default"].serverTokenEndpoint, {
                    username: e,
                    password: t
                })
            },
            unauthenticate: function () {
                return a["default"].request("delete", r["default"].serverTokenEndpoint)
            },
            setProfile: function (e, t) {
                var n = {};
                return t.description && (n.description = t.description), t.location && (n.location = t.location), t.username && (n.username = t.username), a["default"].request("put", "/users/" + e, n)
            },
            setLocation: function (e, t) {
                return a["default"].request("put", "/users/" + e, {
                    location: t
                })
            },
            setEmail: function (e, t) {
                return a["default"].request("put", "/users/" + e, {
                    email: t
                })
            },
            setPrivate: function (e, t) {
                return a["default"].request("put", "/users/" + e, {
                    "private": t
                })
            },
            verifyEmail: function (e) {
                return a["default"].request("post", "/users/verifyEmail", {
                    t: e
                })
            },
            sendEmailVerification: function () {
                return a["default"].request("post", "/users/verifyEmail")
            },
            restoreAccess: function (e) {
                return a["default"].request("delete", "/users/" + e + "/escSuspend")
            },
            markCompliant: function (e) {
                return a["default"].request("delete", "/users/" + e + "/esc")
            },
            setProfileBackground: function (e, t) {
                return a["default"].request("put", "/users/" + e, {
                    profileBackground: t
                })
            },
            setHiddenTwitter: function (e, t) {
                return a["default"].request("put", "/users/" + e + "/preferences", {
                    hiddenTwitter: t
                })
            },
            vmRecipients: function (e) {
                e = e || {}, e.type = "compose";
                var t = window.localStorage.userId;
                return a["default"].request("get", "/users/" + t + "/friends", e).then(function (e) {
                    return i["default"](e, n["default"])
                })
            },
            blockUser: function (e, t) {
                return a["default"].request("post", "/users/" + t + "/blocked/" + e)
            }
        }),
        s = d.create();
    e["default"] = s
}), define("vine-ember/services/video-preload-queue", ["exports", "ember"], function (e, t) {
    "use strict";
    var a = t["default"].Object.extend({
            queue: [],
            rates: [],
            rate: 1 / 0,
            rateBufferLength: 5,
            maxRateThreshold: 5e3,
            _alreadyPreloaded: {},
            _preloadedCount: 0,
            _queueInitialized: !1,
            _currentPlayerRequest: null,
            _currentlyPreloading: !1,
            reset: function () {
                this.setProperties({
                    canUnlockPreload: !1,
                    _preloadedCount: 0,
                    _queueInitialized: !1,
                    queue: []
                })
            },
            queueUrl: function (e, a) {
                if (a = a || {}, this.set("_queueInitialized", !0), !t["default"].isEmpty(e)) {
                    var n = this.getVideoObject(e, a);
                    this.get("_alreadyPreloaded")[n.url] || (this.get("_alreadyPreloaded")[n.url] = !0, this.get("queue").pushObject(n))
                }
            },
            getVideoData: function (e, t) {
                t = t || {}, this.set("_queueInitialized", !0);
                var a = this.getVideoObject(e, t);
                return this.get("_alreadyPreloaded")[a.url] = !0, this._fetchVideo(a, {
                    isPlayer: !0,
                    needsUrl: !!t.needsUrl
                })["finally"](function () {
                    this.set("_currentPlayerRequest", null)
                }.bind(this))
            },
            getVideoObject: function (e, t) {
                t = t || {};
                var a = t.isSeamless ? "dash" : "h264",
                    n = e.filterBy("format", a);
                n.sortBy("rate").reverse();
                var r;
                if (n.length)
                    if (t.forceHd) r = n[0].videoUrl;
                    else {
                        var i = this.get("rate"),
                            d = n.find(function (e) {
                                return e.rate <= i
                            });
                        r = d.videoUrl
                    } var s = {
                    url: r,
                    type: t.isSeamless ? "arraybuffer" : "blob",
                    isFirstLoad: !this.get("_alreadyPreloaded")[r]
                };
                return s
            },
            _preloadChanged: function () {
                if (this.get("_queueInitialized")) {
                    var e = 0 === this.get("queue").length || this.get("_preloadedCount") > 10;
                    this.set("canUnlockPreload", e)
                }
            }.observes("queue.length", "_preloadedCount"),
            _queueChanged: function () {
                if (!this.get("_currentPlayerRequest") && !this.get("_currentlyPreloading") && 0 !== this.get("queue.length")) {
                    this.set("_currentlyPreloading", !0);
                    var e = this.get("queue").shiftObject();
                    this._fetchVideo(e, !1)["finally"](function () {
                        this.set("_currentlyPreloading", !1)
                    }.bind(this))
                }
            }.observes("queue.length", "_currentlyPreloading", "_currentPlayerRequest"),
            _logRate: function (e) {
                var t = this.get("rates");
                t.push(e), t.length > this.get("rateBufferLength") && t.shift();
                var a = t.slice(0);
                if (a = a.filter(function (e) {
                        return e < this.get("maxRateThreshold")
                    }.bind(this)), a.length) {
                    var n = a.reduce(function (e, t) {
                        return e + t
                    }, 0);
                    this.set("rate", n / a.length)
                }
            },
            _fetchVideo: function (e, a) {
                a = a || {};
                var n = this.get("_currentPlayerRequest");
                if (a.isPlayer && n) {
                    if (n.url === e.url) return n.promise;
                    n.xhr && (n.xhr.abort(), this.set("_currentPlayerRequest", null))
                }
                return a.needsUrl ? t["default"].RSVP.resolve(e.url) : this._requestVideoData(e, a)["finally"](function () {
                    this.incrementProperty("_preloadedCount")
                }.bind(this))
            },
            _requestVideoData: function (e, a) {
                a = a || {};
                var n = new window.XMLHttpRequest,
                    r = new t["default"].RSVP.Promise(function (a, r) {
                        n.addEventListener("load", function () {
                            var d = n.response;
                            if (e.isFirstLoad) {
                                var s, c = ((new Date).getTime() - i) / 1e3,
                                    o = d instanceof Blob,
                                    l = d instanceof ArrayBuffer;
                                if (l ? s = d.byteLength : o && (s = d.size), s) {
                                    var h = s / 1024 / c;
                                    this._logRate(h)
                                }
                            }
                            200 === n.status ? t["default"].run(null, a, d) : t["default"].run(null, r)
                        }.bind(this)), n.addEventListener("error", function (e) {
                            t["default"].run(null, r, e)
                        });
                        var i = (new Date).getTime();
                        n.open("GET", e.url, !0), n.responseType = e.type || "blob", n.send()
                    }.bind(this));
                return a.isPlayer && this.set("_currentPlayerRequest", {
                    url: e.url,
                    promise: r,
                    xhr: n
                }), r
            }
        }),
        n = a.create();
    e["default"] = n
}), define("vine-ember/templates/application", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        var e = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("    ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.inline;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var s = n.createMorphAt(d, 1, 1, a);
                        return i(t, s, e, "render", ["current-user"], {}), d
                    }
                }
            }(),
            t = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("    ");
                        e.appendChild(t, a);
                        var a = e.createElement("button");
                        e.setAttribute(a, "class", "login-link small");
                        var n = e.createTextNode("Login");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.element;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var s = n.childAt(d, [1]);
                        return i(t, s, e, "action", ["showModal", "login"], {}), d
                    }
                }
            }(),
            a = function () {
                var e = function () {
                    var e = function () {
                            return {
                                isHTMLBars: !0,
                                revision: "Ember@1.11.3",
                                blockParams: 0,
                                cachedFragment: null,
                                hasRendered: !1,
                                build: function (e) {
                                    var t = e.createDocumentFragment(),
                                        a = e.createTextNode("            ");
                                    e.appendChild(t, a);
                                    var a = e.createElement("strong"),
                                        n = e.createTextNode("Introducing Vine Messages");
                                    e.appendChild(a, n), e.appendChild(t, a);
                                    var a = e.createTextNode("\n            ");
                                    e.appendChild(t, a);
                                    var a = e.createElement("span"),
                                        n = e.createTextNode("Learn More");
                                    e.appendChild(a, n), e.appendChild(t, a);
                                    var a = e.createTextNode("\n");
                                    return e.appendChild(t, a), t
                                },
                                render: function (e, t, a) {
                                    var n = t.dom;
                                    n.detectNamespace(a);
                                    var r;
                                    return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n), this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0), this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n), r
                                }
                            }
                        }(),
                        t = function () {
                            return {
                                isHTMLBars: !0,
                                revision: "Ember@1.11.3",
                                blockParams: 0,
                                cachedFragment: null,
                                hasRendered: !1,
                                build: function (e) {
                                    var t = e.createDocumentFragment(),
                                        a = e.createTextNode("            ");
                                    e.appendChild(t, a);
                                    var a = e.createElement("strong"),
                                        n = e.createTextNode("Introducing Vine Messages");
                                    e.appendChild(a, n), e.appendChild(t, a);
                                    var a = e.createTextNode(" Fun & easy video conversations with friends –\n            ");
                                    e.appendChild(t, a);
                                    var a = e.createElement("span"),
                                        n = e.createTextNode("Learn More\n            ");
                                    e.appendChild(a, n);
                                    var n = e.createComment("");
                                    e.appendChild(a, n), e.appendChild(t, a);
                                    var a = e.createTextNode("\n");
                                    return e.appendChild(t, a), t
                                },
                                render: function (e, t, a) {
                                    var n = t.dom,
                                        r = t.hooks,
                                        i = r.inline;
                                    n.detectNamespace(a);
                                    var d;
                                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                                    var s = n.createMorphAt(n.childAt(d, [3]), 1, 1);
                                    return i(t, s, e, "cdn-img", [], {
                                        src: "images/carrow.svg"
                                    }), d
                                }
                            }
                        }();
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null,
                        hasRendered: !1,
                        build: function (e) {
                            var t = e.createDocumentFragment(),
                                a = e.createTextNode("      ");
                            e.appendChild(t, a);
                            var a = e.createElement("div");
                            e.setAttribute(a, "class", "global-banner");
                            var n = e.createTextNode("\n        ");
                            e.appendChild(a, n);
                            var n = e.createElement("h3"),
                                r = e.createTextNode("\n");
                            e.appendChild(n, r);
                            var r = e.createComment("");
                            e.appendChild(n, r);
                            var r = e.createTextNode("        ");
                            e.appendChild(n, r), e.appendChild(a, n);
                            var n = e.createTextNode("\n        ");
                            e.appendChild(a, n);
                            var n = e.createElement("div");
                            e.setAttribute(n, "class", "share-close");
                            var r = e.createTextNode("\n          ");
                            e.appendChild(n, r);
                            var r = e.createComment("");
                            e.appendChild(n, r);
                            var r = e.createTextNode("\n        ");
                            e.appendChild(n, r), e.appendChild(a, n);
                            var n = e.createTextNode("\n      ");
                            e.appendChild(a, n), e.appendChild(t, a);
                            var a = e.createTextNode("\n");
                            return e.appendChild(t, a), t
                        },
                        render: function (a, n, r) {
                            var i = n.dom,
                                d = n.hooks,
                                s = d.get,
                                c = d.block,
                                o = d.element,
                                l = d.inline;
                            i.detectNamespace(r);
                            var h;
                            n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (h = this.build(i), this.hasRendered ? this.cachedFragment = h : this.hasRendered = !0), this.cachedFragment && (h = i.cloneNode(this.cachedFragment, !0))) : h = this.build(i);
                            var u = i.childAt(h, [1]),
                                p = i.childAt(u, [3]),
                                m = i.createMorphAt(i.childAt(u, [1]), 1, 1),
                                v = i.createMorphAt(p, 1, 1);
                            return c(n, m, a, "if", [s(n, a, "isMobile")], {}, e, t), o(n, p, a, "action", ["closeBanner", "vms"], {}), l(n, v, a, "cdn-img", [], {
                                src: "images/close_x_white.svg"
                            }), h
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createComment("");
                        return e.appendChild(t, a), t
                    },
                    render: function (t, a, n) {
                        var r = a.dom,
                            i = a.hooks,
                            d = i.block;
                        r.detectNamespace(n);
                        var s;
                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                        var c = r.createMorphAt(s, 0, 0, n);
                        return r.insertBoundary(s, null), r.insertBoundary(s, 0), d(a, c, t, "link-to", ["promo.vm"], {}, e, null), s
                    }
                }
            }(),
            n = function () {
                var e = function () {
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createComment("");
                                return e.appendChild(t, a), t
                            },
                            render: function (e, t, a) {
                                var n = t.dom,
                                    r = t.hooks,
                                    i = r.inline;
                                n.detectNamespace(a);
                                var d;
                                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                                var s = n.createMorphAt(d, 0, 0, a);
                                return n.insertBoundary(d, null), n.insertBoundary(d, 0), i(t, s, e, "render", ["modal/login"], {}), d
                            }
                        }
                    }(),
                    t = function () {
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createComment("");
                                return e.appendChild(t, a), t
                            },
                            render: function (e, t, a) {
                                var n = t.dom,
                                    r = t.hooks,
                                    i = r.inline;
                                n.detectNamespace(a);
                                var d;
                                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                                var s = n.createMorphAt(d, 0, 0, a);
                                return n.insertBoundary(d, null), n.insertBoundary(d, 0), i(t, s, e, "render", ["modal/post"], {}), d
                            }
                        }
                    }(),
                    a = function () {
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createComment("");
                                return e.appendChild(t, a), t
                            },
                            render: function (e, t, a) {
                                var n = t.dom,
                                    r = t.hooks,
                                    i = r.inline;
                                n.detectNamespace(a);
                                var d;
                                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                                var s = n.createMorphAt(d, 0, 0, a);
                                return n.insertBoundary(d, null), n.insertBoundary(d, 0), i(t, s, e, "render", ["modal/job"], {}), d
                            }
                        }
                    }(),
                    n = function () {
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createComment("");
                                return e.appendChild(t, a), t
                            },
                            render: function (e, t, a) {
                                var n = t.dom,
                                    r = t.hooks,
                                    i = r.inline;
                                n.detectNamespace(a);
                                var d;
                                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                                var s = n.createMorphAt(d, 0, 0, a);
                                return n.insertBoundary(d, null), n.insertBoundary(d, 0), i(t, s, e, "render", ["modal/embed"], {}), d
                            }
                        }
                    }(),
                    r = function () {
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createComment("");
                                return e.appendChild(t, a), t
                            },
                            render: function (e, t, a) {
                                var n = t.dom,
                                    r = t.hooks,
                                    i = r.inline;
                                n.detectNamespace(a);
                                var d;
                                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                                var s = n.createMorphAt(d, 0, 0, a);
                                return n.insertBoundary(d, null), n.insertBoundary(d, 0), i(t, s, e, "render", ["modal/flash-error"], {}), d
                            }
                        }
                    }(),
                    i = function () {
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createComment("");
                                return e.appendChild(t, a), t
                            },
                            render: function (e, t, a) {
                                var n = t.dom,
                                    r = t.hooks,
                                    i = r.inline;
                                n.detectNamespace(a);
                                var d;
                                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                                var s = n.createMorphAt(d, 0, 0, a);
                                return n.insertBoundary(d, null), n.insertBoundary(d, 0), i(t, s, e, "render", ["modal/vm"], {}), d
                            }
                        }
                    }(),
                    d = function () {
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createComment("");
                                return e.appendChild(t, a), t
                            },
                            render: function (e, t, a) {
                                var n = t.dom,
                                    r = t.hooks,
                                    i = r.inline;
                                n.detectNamespace(a);
                                var d;
                                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                                var s = n.createMorphAt(d, 0, 0, a);
                                return n.insertBoundary(d, null), n.insertBoundary(d, 0), i(t, s, e, "render", ["modal/report"], {}), d
                            }
                        }
                    }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("  ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n  ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n  ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n  ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n  ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n  ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n  ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (s, c, o) {
                        var l = c.dom,
                            h = c.hooks,
                            u = h.get,
                            p = h.block;
                        l.detectNamespace(o);
                        var m;
                        c.useFragmentCache && l.canClone ? (null === this.cachedFragment && (m = this.build(l), this.hasRendered ? this.cachedFragment = m : this.hasRendered = !0), this.cachedFragment && (m = l.cloneNode(this.cachedFragment, !0))) : m = this.build(l);
                        var v = l.createMorphAt(m, 1, 1, o),
                            g = l.createMorphAt(m, 3, 3, o),
                            b = l.createMorphAt(m, 5, 5, o),
                            C = l.createMorphAt(m, 7, 7, o),
                            f = l.createMorphAt(m, 9, 9, o),
                            F = l.createMorphAt(m, 11, 11, o),
                            N = l.createMorphAt(m, 13, 13, o);
                        return p(c, v, s, "if", [u(c, s, "modal.login")], {}, e, null), p(c, g, s, "if", [u(c, s, "modal.post")], {}, t, null), p(c, b, s, "if", [u(c, s, "modal.job")], {}, a, null), p(c, C, s, "if", [u(c, s, "modal.embed")], {}, n, null), p(c, f, s, "if", [u(c, s, "modal.flash-error")], {}, r, null), p(c, F, s, "if", [u(c, s, "modal.vm")], {}, i, null), p(c, N, s, "if", [u(c, s, "modal.report")], {}, d, null), m
                    }
                }
            }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createElement("div");
                e.setAttribute(a, "id", "fb-root"), e.appendChild(t, a);
                var a = e.createTextNode("\n");
                e.appendChild(t, a);
                var a = e.createComment("");
                e.appendChild(t, a);
                var a = e.createTextNode("\n\n");
                e.appendChild(t, a);
                var a = e.createElement("div");
                e.setAttribute(a, "id", "outer-wrapper");
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createTextNode("\n\n");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("div");
                e.setAttribute(n, "id", "main-content");
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createComment("");
                e.appendChild(n, r);
                var r = e.createTextNode("\n  ");
                e.appendChild(n, r), e.appendChild(a, n);
                var n = e.createTextNode("\n\n  ");
                e.appendChild(a, n);
                var n = e.createElement("footer"),
                    r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("ul"),
                    i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("li");
                e.setAttribute(i, "class", "twitter");
                var d = e.createElement("a");
                e.setAttribute(d, "href", "https://web.archive.org/web/20150701150124/http://twitter.com/vine"), e.setAttribute(d, "target", "_blank");
                var s = e.createElement("span");
                e.setAttribute(s, "class", "icon-twitter"), e.appendChild(d, s), e.appendChild(i, d), e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("li");
                e.setAttribute(i, "class", "facebook");
                var d = e.createElement("a");
                e.setAttribute(d, "href", "https://web.archive.org/web/20150701150124/https://www.facebook.com/vineapp"), e.setAttribute(d, "target", "_blank");
                var s = e.createElement("span");
                e.setAttribute(s, "class", "icon-facebook"), e.appendChild(d, s), e.appendChild(i, d), e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("li"),
                    d = e.createElement("a");
                e.setAttribute(d, "href", "/blog");
                var s = e.createTextNode("Blog");
                e.appendChild(d, s), e.appendChild(i, d), e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("li"),
                    d = e.createElement("a");
                e.setAttribute(d, "href", "/help");
                var s = e.createTextNode("Help");
                e.appendChild(d, s), e.appendChild(i, d), e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("li"),
                    d = e.createElement("a");
                e.setAttribute(d, "href", "/jobs");
                var s = e.createTextNode("Jobs");
                e.appendChild(d, s), e.appendChild(i, d), e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("li"),
                    d = e.createElement("a");
                e.setAttribute(d, "href", "/contact");
                var s = e.createTextNode("Contact");
                e.appendChild(d, s), e.appendChild(i, d), e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("li");
                e.setAttribute(i, "class", "terms");
                var d = e.createElement("a");
                e.setAttribute(d, "href", "/terms");
                var s = e.createTextNode("Terms");
                e.appendChild(d, s), e.appendChild(i, d), e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("li");
                e.setAttribute(i, "class", "privacy");
                var d = e.createElement("a");
                e.setAttribute(d, "href", "/privacy");
                var s = e.createTextNode("Privacy");
                e.appendChild(d, s), e.appendChild(i, d), e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("li"),
                    d = e.createElement("a");
                e.setAttribute(d, "href", "/rules");
                var s = e.createTextNode("Rules");
                e.appendChild(d, s), e.appendChild(i, d), e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("li");
                e.setAttribute(i, "class", "vm-faq");
                var d = e.createElement("strong"),
                    s = e.createElement("a");
                e.setAttribute(s, "href", "https://web.archive.org/web/20150701150124/https://support.twitter.com/articles/20171567");
                var c = e.createTextNode("Learn More");
                e.appendChild(s, c), e.appendChild(d, s), e.appendChild(i, d), e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("li");
                e.setAttribute(i, "class", "copy");
                var d = e.createTextNode("© ");
                e.appendChild(i, d);
                var d = e.createComment("");
                e.appendChild(i, d);
                var d = e.createTextNode(" Vine Labs, Inc.");
                e.appendChild(i, d), e.appendChild(r, i);
                var i = e.createTextNode("\n    ");
                e.appendChild(r, i), e.appendChild(n, r);
                var r = e.createTextNode("\n  ");
                e.appendChild(n, r), e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n), e.appendChild(t, a);
                var a = e.createTextNode("\n\n");
                e.appendChild(t, a);
                var a = e.createComment("");
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                e.appendChild(t, a);
                var a = e.createElement("div");
                e.setAttribute(a, "id", "loading-bar"), e.setAttribute(a, "class", "loading-bar"), e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a), t
            },
            render: function (r, i, d) {
                var s = i.dom,
                    c = i.hooks,
                    o = c.inline,
                    l = c.element,
                    h = c.get,
                    u = c.block,
                    p = c.content;
                s.detectNamespace(d);
                var m;
                i.useFragmentCache && s.canClone ? (null === this.cachedFragment && (m = this.build(s), this.hasRendered ? this.cachedFragment = m : this.hasRendered = !0), this.cachedFragment && (m = s.cloneNode(this.cachedFragment, !0))) : m = this.build(s);
                var v = s.childAt(m, [4]),
                    g = s.childAt(v, [9, 1]),
                    b = s.createMorphAt(m, 2, 2, d),
                    C = s.createMorphAt(v, 1, 1),
                    f = s.createMorphAt(v, 3, 3),
                    F = s.createMorphAt(v, 5, 5),
                    N = s.createMorphAt(s.childAt(v, [7]), 1, 1),
                    T = s.createMorphAt(s.childAt(g, [21]), 1, 1),
                    x = s.createMorphAt(m, 6, 6, d);
                return o(i, b, r, "render", ["playing-vine"], {}), l(i, v, r, "bind-attr", [], {
                    "class": "routeClass session.isAuthenticated:logged-in:logged-out hasNotification isMobile:mobile hasHeader:has-timeline-header headerVisible:header-visible"
                }), o(i, C, r, "partial", ["header"], {}), u(i, f, r, "if", [h(i, r, "session.isAuthenticated")], {}, e, t), u(i, F, r, "if", [h(i, r, "hasNotification")], {}, a, null), p(i, N, r, "outlet"), l(i, g, r, "bind-attr", [], {
                    "class": "session.isAuthenticated:logged-in"
                }), o(i, T, r, "unbound", [h(i, r, "currentYear")], {}), u(i, x, r, "if", [h(i, r, "modal")], {}, n, null), m
            }
        }
    }())
}), define("vine-ember/templates/components/animated-button", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createElement("span");
                e.appendChild(t, a);
                var a = e.createElement("span");
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                e.appendChild(t, a);
                var a = e.createComment("");
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a), t
            },
            render: function (e, t, a) {
                var n = t.dom,
                    r = t.hooks,
                    i = r.get,
                    d = r.element,
                    s = r.content;
                n.detectNamespace(a);
                var c;
                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n), this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0), this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                var o = n.childAt(c, [0]),
                    l = n.childAt(c, [1]),
                    h = n.createMorphAt(c, 3, 3, a);
                return d(t, o, e, "bind-attr", [], {
                    "class": i(t, e, "iconClass")
                }), d(t, l, e, "bind-attr", [], {
                    "class": i(t, e, "iconClass")
                }), s(t, h, e, "yield"), c
            }
        }
    }())
}), define("vine-ember/templates/components/channel-badge", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        var e = function () {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null,
                hasRendered: !1,
                build: function (e) {
                    var t = e.createDocumentFragment(),
                        a = e.createTextNode("  ");
                    e.appendChild(t, a);
                    var a = e.createComment("");
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a), t
                },
                render: function (e, t, a) {
                    var n = t.dom,
                        r = t.hooks,
                        i = r.get,
                        d = r.inline;
                    n.detectNamespace(a);
                    var s;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                    var c = n.createMorphAt(s, 1, 1, a);
                    return d(t, c, e, "secure-img", [], {
                        "class": "icon",
                        src: i(t, e, "iconUrl")
                    }), s
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createComment("");
                return e.appendChild(t, a), t
            },
            render: function (t, a, n) {
                var r = a.dom,
                    i = a.hooks,
                    d = i.get,
                    s = i.block;
                r.detectNamespace(n);
                var c;
                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r), this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0),
                    this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                var o = r.createMorphAt(c, 0, 0, n);
                return r.insertBoundary(c, null), r.insertBoundary(c, 0), s(a, o, t, "if", [d(a, t, "iconUrl")], {}, e, null), c
            }
        }
    }())
}), define("vine-ember/templates/components/comment-form", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createComment("");
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a), t
            },
            render: function (e, t, a) {
                var n = t.dom,
                    r = t.hooks,
                    i = r.get,
                    d = r.inline;
                n.detectNamespace(a);
                var s;
                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                var c = n.createMorphAt(s, 0, 0, a);
                return n.insertBoundary(s, 0), d(t, c, e, "my-input", [], {
                    name: "comment",
                    value: i(t, e, "value"),
                    placeholder: "Say something nice",
                    maxlength: "140"
                }), s
            }
        }
    }())
}), define("vine-ember/templates/components/custom-styles", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createElement("div");
                e.setAttribute(a, "class", "custom-styles");
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n), e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a), t
            },
            render: function (e, t, a) {
                var n = t.dom,
                    r = t.hooks,
                    i = r.content;
                n.detectNamespace(a);
                var d;
                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                var s = n.createMorphAt(n.childAt(d, [0]), 1, 1);
                return i(t, s, e, "yield"), d
            }
        }
    }())
}), define("vine-ember/templates/components/download-buttons", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createElement("div");
                e.setAttribute(a, "class", "download-button"), e.setAttribute(a, "data-device", "apple");
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("div");
                e.setAttribute(n, "class", "icon-apple"), e.appendChild(a, n);
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("span");
                e.setAttribute(n, "class", "download-text");
                var r = e.createTextNode("Get it for ");
                e.appendChild(n, r);
                var r = e.createElement("span");
                e.setAttribute(r, "class", "client-name");
                var i = e.createTextNode("iOS");
                e.appendChild(r, i), e.appendChild(n, r), e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n), e.appendChild(t, a);
                var a = e.createTextNode("\n");
                e.appendChild(t, a);
                var a = e.createElement("div");
                e.setAttribute(a, "class", "download-button"), e.setAttribute(a, "data-device", "android");
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("div");
                e.setAttribute(n, "class", "icon-android"), e.appendChild(a, n);
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("span");
                e.setAttribute(n, "class", "download-text");
                var r = e.createTextNode("Get it for ");
                e.appendChild(n, r);
                var r = e.createElement("span");
                e.setAttribute(r, "class", "client-name");
                var i = e.createTextNode("Android");
                e.appendChild(r, i), e.appendChild(n, r), e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n), e.appendChild(t, a);
                var a = e.createTextNode("\n");
                e.appendChild(t, a);
                var a = e.createElement("div");
                e.setAttribute(a, "class", "download-button"), e.setAttribute(a, "data-device", "windows");
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("div");
                e.setAttribute(n, "class", "icon-windows_phone"), e.appendChild(a, n);
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("span");
                e.setAttribute(n, "class", "download-text");
                var r = e.createTextNode("Get it for ");
                e.appendChild(n, r);
                var r = e.createElement("span");
                e.setAttribute(r, "class", "client-name");
                var i = e.createTextNode("Windows");
                e.appendChild(r, i), e.appendChild(n, r), e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n), e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a), t
            },
            render: function (e, t, a) {
                var n = t.dom,
                    r = t.hooks,
                    i = r.element;
                n.detectNamespace(a);
                var d;
                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                var s = n.childAt(d, [0]),
                    c = n.childAt(d, [2]),
                    o = n.childAt(d, [4]);
                return i(t, s, e, "action", ["goToStore", "apple"], {}), i(t, c, e, "action", ["goToStore", "android"], {}), i(t, o, e, "action", ["goToStore", "windows"], {}), d
            }
        }
    }())
}), define("vine-ember/templates/components/follow-button", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        var e = function () {
                var e = function () {
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createTextNode("    ");
                                e.appendChild(t, a);
                                var a = e.createElement("div");
                                e.setAttribute(a, "class", "button-icon");
                                var n = e.createElement("div");
                                e.setAttribute(n, "class", "icon-check_mark"), e.appendChild(a, n), e.appendChild(t, a);
                                var a = e.createTextNode("\n    Follow Requested\n");
                                return e.appendChild(t, a), t
                            },
                            render: function (e, t, a) {
                                var n = t.dom;
                                n.detectNamespace(a);
                                var r;
                                return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n), this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0), this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n), r
                            }
                        }
                    }(),
                    t = function () {
                        var e = function () {
                                return {
                                    isHTMLBars: !0,
                                    revision: "Ember@1.11.3",
                                    blockParams: 0,
                                    cachedFragment: null,
                                    hasRendered: !1,
                                    build: function (e) {
                                        var t = e.createDocumentFragment(),
                                            a = e.createTextNode("      ");
                                        e.appendChild(t, a);
                                        var a = e.createElement("div");
                                        e.setAttribute(a, "class", "button-icon");
                                        var n = e.createElement("div");
                                        e.setAttribute(n, "class", "icon-check_mark"), e.appendChild(a, n), e.appendChild(t, a);
                                        var a = e.createTextNode("\n      Following\n");
                                        return e.appendChild(t, a), t
                                    },
                                    render: function (e, t, a) {
                                        var n = t.dom;
                                        n.detectNamespace(a);
                                        var r;
                                        return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n), this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0), this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n), r
                                    }
                                }
                            }(),
                            t = function () {
                                return {
                                    isHTMLBars: !0,
                                    revision: "Ember@1.11.3",
                                    blockParams: 0,
                                    cachedFragment: null,
                                    hasRendered: !1,
                                    build: function (e) {
                                        var t = e.createDocumentFragment(),
                                            a = e.createTextNode("      ");
                                        e.appendChild(t, a);
                                        var a = e.createElement("div");
                                        e.setAttribute(a, "class", "button-icon");
                                        var n = e.createElement("div");
                                        e.setAttribute(n, "class", "icon-plus"), e.appendChild(a, n), e.appendChild(t, a);
                                        var a = e.createTextNode("\n      Follow\n");
                                        return e.appendChild(t, a), t
                                    },
                                    render: function (e, t, a) {
                                        var n = t.dom;
                                        n.detectNamespace(a);
                                        var r;
                                        return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n), this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0), this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n), r
                                    }
                                }
                            }();
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createComment("");
                                return e.appendChild(t, a), t
                            },
                            render: function (a, n, r) {
                                var i = n.dom,
                                    d = n.hooks,
                                    s = d.get,
                                    c = d.block;
                                i.detectNamespace(r);
                                var o;
                                n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (o = this.build(i), this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0), this.cachedFragment && (o = i.cloneNode(this.cachedFragment, !0))) : o = this.build(i);
                                var l = i.createMorphAt(o, 0, 0, r);
                                return i.insertBoundary(o, null), i.insertBoundary(o, 0), c(n, l, a, "if", [s(n, a, "following")], {}, e, t), o
                            }
                        }
                    }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createComment("");
                        return e.appendChild(t, a), t
                    },
                    render: function (a, n, r) {
                        var i = n.dom,
                            d = n.hooks,
                            s = d.get,
                            c = d.block;
                        i.detectNamespace(r);
                        var o;
                        n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (o = this.build(i), this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0), this.cachedFragment && (o = i.cloneNode(this.cachedFragment, !0))) : o = this.build(i);
                        var l = i.createMorphAt(o, 0, 0, r);
                        return i.insertBoundary(o, null), i.insertBoundary(o, 0), c(n, l, a, "if", [s(n, a, "followRequested")], {}, e, t), o
                    }
                }
            }(),
            t = function () {
                var e = function () {
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createTextNode("    ");
                                e.appendChild(t, a);
                                var a = e.createElement("span");
                                e.setAttribute(a, "class", "icon-plus"), e.appendChild(t, a);
                                var a = e.createElement("span");
                                e.setAttribute(a, "class", "icon-profile"), e.appendChild(t, a);
                                var a = e.createTextNode("\n");
                                return e.appendChild(t, a), t
                            },
                            render: function (e, t, a) {
                                var n = t.dom;
                                n.detectNamespace(a);
                                var r;
                                return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n), this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0), this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n), r
                            }
                        }
                    }(),
                    t = function () {
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createTextNode("    ");
                                e.appendChild(t, a);
                                var a = e.createElement("span");
                                e.setAttribute(a, "class", "icon-profile"), e.appendChild(t, a);
                                var a = e.createElement("span");
                                e.setAttribute(a, "class", "icon-check_mark"), e.appendChild(t, a);
                                var a = e.createTextNode("\n");
                                return e.appendChild(t, a), t
                            },
                            render: function (e, t, a) {
                                var n = t.dom;
                                n.detectNamespace(a);
                                var r;
                                return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n), this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0), this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n), r
                            }
                        }
                    }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createComment("");
                        return e.appendChild(t, a), t
                    },
                    render: function (a, n, r) {
                        var i = n.dom,
                            d = n.hooks,
                            s = d.get,
                            c = d.block;
                        i.detectNamespace(r);
                        var o;
                        n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (o = this.build(i), this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0), this.cachedFragment && (o = i.cloneNode(this.cachedFragment, !0))) : o = this.build(i);
                        var l = i.createMorphAt(o, 0, 0, r);
                        return i.insertBoundary(o, null), i.insertBoundary(o, 0), c(n, l, a, "unless", [s(n, a, "following")], {}, e, t), o
                    }
                }
            }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createComment("");
                return e.appendChild(t, a), t
            },
            render: function (a, n, r) {
                var i = n.dom,
                    d = n.hooks,
                    s = d.get,
                    c = d.block;
                i.detectNamespace(r);
                var o;
                n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (o = this.build(i), this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0), this.cachedFragment && (o = i.cloneNode(this.cachedFragment, !0))) : o = this.build(i);
                var l = i.createMorphAt(o, 0, 0, r);
                return i.insertBoundary(o, null), i.insertBoundary(o, 0), c(n, l, a, "if", [s(n, a, "isLarge")], {}, e, t), o
            }
        }
    }())
}), define("vine-ember/templates/components/header-logo", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        var e = function () {
                var e = function () {
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createTextNode("      ");
                                e.appendChild(t, a);
                                var a = e.createElement("strong"),
                                    n = e.createComment("");
                                e.appendChild(a, n), e.appendChild(t, a);
                                var a = e.createTextNode("\n");
                                return e.appendChild(t, a), t
                            },
                            render: function (e, t, a) {
                                var n = t.dom,
                                    r = t.hooks,
                                    i = r.content;
                                n.detectNamespace(a);
                                var d;
                                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                                var s = n.createMorphAt(n.childAt(d, [1]), 0, 0);
                                return i(t, s, e, "mobileTitle"), d
                            }
                        }
                    }(),
                    t = function () {
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createTextNode("      ");
                                e.appendChild(t, a);
                                var a = e.createElement("div");
                                e.setAttribute(a, "class", "icon-vine_logo"), e.appendChild(t, a);
                                var a = e.createTextNode("\n");
                                return e.appendChild(t, a), t
                            },
                            render: function (e, t, a) {
                                var n = t.dom;
                                n.detectNamespace(a);
                                var r;
                                return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n), this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0), this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n), r
                            }
                        }
                    }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("  ");
                        e.appendChild(t, a);
                        var a = e.createElement("button");
                        e.setAttribute(a, "class", "clear logo");
                        var n = e.createTextNode("\n");
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        e.appendChild(a, n);
                        var n = e.createTextNode("  ");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (a, n, r) {
                        var i = n.dom,
                            d = n.hooks,
                            s = d.get,
                            c = d.block;
                        i.detectNamespace(r);
                        var o;
                        n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (o = this.build(i), this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0), this.cachedFragment && (o = i.cloneNode(this.cachedFragment, !0))) : o = this.build(i);
                        var l = i.createMorphAt(i.childAt(o, [1]), 1, 1);
                        return c(n, l, a, "if", [s(n, a, "mobileTitle")], {}, e, t), o
                    }
                }
            }(),
            t = function () {
                var e = function () {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null,
                        hasRendered: !1,
                        build: function (e) {
                            var t = e.createDocumentFragment(),
                                a = e.createElement("div");
                            e.setAttribute(a, "class", "logo");
                            var n = e.createElement("div");
                            return e.setAttribute(n, "class", "icon-vine_logo"), e.appendChild(a, n), e.appendChild(t, a), t
                        },
                        render: function (e, t, a) {
                            var n = t.dom;
                            n.detectNamespace(a);
                            var r;
                            return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n), this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0), this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n), r
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("  ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (t, a, n) {
                        var r = a.dom,
                            i = a.hooks,
                            d = i.block;
                        r.detectNamespace(n);
                        var s;
                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                        var c = r.createMorphAt(s, 1, 1, n);
                        return d(a, c, t, "link-to", ["index"], {}, e, null), s
                    }
                }
            }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createComment("");
                return e.appendChild(t, a), t
            },
            render: function (a, n, r) {
                var i = n.dom,
                    d = n.hooks,
                    s = d.get,
                    c = d.block;
                i.detectNamespace(r);
                var o;
                n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (o = this.build(i), this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0), this.cachedFragment && (o = i.cloneNode(this.cachedFragment, !0))) : o = this.build(i);
                var l = i.createMorphAt(o, 0, 0, r);
                return i.insertBoundary(o, null), i.insertBoundary(o, 0), c(n, l, a, "if", [s(n, a, "isMobile")], {}, e, t), o
            }
        }
    }())
}), define("vine-ember/templates/components/link-user", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        var e = function () {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null,
                hasRendered: !1,
                build: function (e) {
                    var t = e.createDocumentFragment(),
                        a = e.createComment("");
                    return e.appendChild(t, a), t
                },
                render: function (e, t, a) {
                    var n = t.dom,
                        r = t.hooks,
                        i = r.content;
                    n.detectNamespace(a);
                    var d;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                    var s = n.createMorphAt(d, 0, 0, a);
                    return n.insertBoundary(d, null), n.insertBoundary(d, 0), i(t, s, e, "yield"), d
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createComment("");
                return e.appendChild(t, a), t
            },
            render: function (t, a, n) {
                var r = a.dom,
                    i = a.hooks,
                    d = i.get,
                    s = i.block;
                r.detectNamespace(n);
                var c;
                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r), this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0), this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                var o = r.createMorphAt(c, 0, 0, n);
                return r.insertBoundary(c, null), r.insertBoundary(c, 0), s(a, o, t, "link-to", [d(a, t, "routeInfo.name"), d(a, t, "routeInfo.param")], {}, e, null), c
            }
        }
    }())
}), define("vine-ember/templates/components/linkify-entities", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        var e = function () {
            var e = function () {
                    var e = function () {
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createComment("");
                                return e.appendChild(t, a), t
                            },
                            render: function (e, t, a) {
                                var n = t.dom,
                                    r = t.hooks,
                                    i = r.content;
                                n.detectNamespace(a);
                                var d;
                                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                                var s = n.createMorphAt(d, 0, 0, a);
                                return n.insertBoundary(d, null), n.insertBoundary(d, 0), i(t, s, e, "title"), d
                            }
                        }
                    }();
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null,
                        hasRendered: !1,
                        build: function (e) {
                            var t = e.createDocumentFragment(),
                                a = e.createTextNode("    ");
                            e.appendChild(t, a);
                            var a = e.createComment("");
                            e.appendChild(t, a);
                            var a = e.createTextNode("\n");
                            return e.appendChild(t, a), t
                        },
                        render: function (t, a, n) {
                            var r = a.dom,
                                i = a.hooks,
                                d = i.get,
                                s = i.block;
                            r.detectNamespace(n);
                            var c;
                            a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r), this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0), this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                            var o = r.createMorphAt(c, 1, 1, n);
                            return s(a, o, t, "link-to", [d(a, t, "route"), d(a, t, "param")], {}, e, null), c
                        }
                    }
                }(),
                t = function () {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null,
                        hasRendered: !1,
                        build: function (e) {
                            var t = e.createDocumentFragment(),
                                a = e.createTextNode("    ");
                            e.appendChild(t, a);
                            var a = e.createComment("");
                            e.appendChild(t, a);
                            var a = e.createTextNode("\n");
                            return e.appendChild(t, a), t
                        },
                        render: function (e, t, a) {
                            var n = t.dom,
                                r = t.hooks,
                                i = r.content;
                            n.detectNamespace(a);
                            var d;
                            t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                            var s = n.createMorphAt(d, 1, 1, a);
                            return i(t, s, e, "this"), d
                        }
                    }
                }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null,
                hasRendered: !1,
                build: function (e) {
                    var t = e.createDocumentFragment(),
                        a = e.createComment("");
                    return e.appendChild(t, a), t
                },
                render: function (a, n, r) {
                    var i = n.dom,
                        d = n.hooks,
                        s = d.get,
                        c = d.block;
                    i.detectNamespace(r);
                    var o;
                    n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (o = this.build(i), this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0), this.cachedFragment && (o = i.cloneNode(this.cachedFragment, !0))) : o = this.build(i);
                    var l = i.createMorphAt(o, 0, 0, r);
                    return i.insertBoundary(o, null), i.insertBoundary(o, 0), c(n, l, a, "if", [s(n, a, "route")], {}, e, t), o
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createComment("");
                return e.appendChild(t, a), t
            },
            render: function (t, a, n) {
                var r = a.dom,
                    i = a.hooks,
                    d = i.get,
                    s = i.block;
                r.detectNamespace(n);
                var c;
                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r), this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0), this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                var o = r.createMorphAt(c, 0, 0, n);
                return r.insertBoundary(c, null), r.insertBoundary(c, 0), s(a, o, t, "each", [d(a, t, "linkifiedEntities")], {}, e, null), c
            }
        }
    }())
}), define("vine-ember/templates/components/loop-count", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        var e = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("  ");
                        e.appendChild(t, a);
                        var a = e.createElement("span");
                        e.setAttribute(a, "class", "icon-fire"), e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom;
                        n.detectNamespace(a);
                        var r;
                        return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n), this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0), this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n), r
                    }
                }
            }(),
            t = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("  ");
                        e.appendChild(t, a);
                        var a = e.createElement("span");
                        e.setAttribute(a, "class", "loops-extra");
                        var n = e.createTextNode("+");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom;
                        n.detectNamespace(a);
                        var r;
                        return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n), this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0), this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n), r
                    }
                }
            }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createComment("");
                e.appendChild(t, a);
                var a = e.createElement("div");
                e.setAttribute(a, "class", "counter seeded");
                var n = e.createComment("");
                e.appendChild(a, n), e.appendChild(t, a);
                var a = e.createTextNode("\n");
                e.appendChild(t, a);
                var a = e.createComment("");
                e.appendChild(t, a);
                var a = e.createElement("span");
                e.setAttribute(a, "class", "loops-label");
                var n = e.createTextNode("Loops");
                e.appendChild(a, n), e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a), t
            },
            render: function (a, n, r) {
                var i = n.dom,
                    d = n.hooks,
                    s = d.get,
                    c = d.block,
                    o = d.inline;
                i.detectNamespace(r);
                var l;
                n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (l = this.build(i), this.hasRendered ? this.cachedFragment = l : this.hasRendered = !0), this.cachedFragment && (l = i.cloneNode(this.cachedFragment, !0))) : l = this.build(i);
                var h = i.createMorphAt(l, 0, 0, r),
                    u = i.createMorphAt(i.childAt(l, [1]), 0, 0),
                    p = i.createMorphAt(l, 3, 3, r);
                return i.insertBoundary(l, 0), c(n, h, a, "if", [s(n, a, "loops.onFire")], {}, e, null), o(n, u, a, "unbound", [s(n, a, "formattedCount")], {}), c(n, p, a, "if", [s(n, a, "couldHaveUnrecordedLoops")], {}, t, null), l
            }
        }
    }())
}), define("vine-ember/templates/components/modal-post-context", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        var e = function () {
                var e = function () {
                    var e = function () {
                        var e = function () {
                            return {
                                isHTMLBars: !0,
                                revision: "Ember@1.11.3",
                                blockParams: 0,
                                cachedFragment: null,
                                hasRendered: !1,
                                build: function (e) {
                                    var t = e.createDocumentFragment(),
                                        a = e.createTextNode("          ");
                                    e.appendChild(t, a);
                                    var a = e.createComment("");
                                    e.appendChild(t, a);
                                    var a = e.createTextNode("\n");
                                    return e.appendChild(t, a), t
                                },
                                render: function (e, t, a) {
                                    var n = t.dom,
                                        r = t.hooks,
                                        i = r.content;
                                    n.detectNamespace(a);
                                    var d;
                                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                                    var s = n.createMorphAt(d, 1, 1, a);
                                    return i(t, s, e, "featuredTitle"), d
                                }
                            }
                        }();
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createTextNode("      ");
                                e.appendChild(t, a);
                                var a = e.createComment("");
                                e.appendChild(t, a);
                                var a = e.createTextNode("\n      ");
                                e.appendChild(t, a);
                                var a = e.createElement("h3");
                                e.setAttribute(a, "class", "module-title");
                                var n = e.createTextNode("\n");
                                e.appendChild(a, n);
                                var n = e.createComment("");
                                e.appendChild(a, n);
                                var n = e.createTextNode("      ");
                                e.appendChild(a, n), e.appendChild(t, a);
                                var a = e.createTextNode("\n");
                                return e.appendChild(t, a), t
                            },
                            render: function (t, a, n) {
                                var r = a.dom,
                                    i = a.hooks,
                                    d = i.get,
                                    s = i.inline,
                                    c = i.block;
                                r.detectNamespace(n);
                                var o;
                                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (o = this.build(r), this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0), this.cachedFragment && (o = r.cloneNode(this.cachedFragment, !0))) : o = this.build(r);
                                var l = r.createMorphAt(o, 1, 1, n),
                                    h = r.createMorphAt(r.childAt(o, [3]), 1, 1);
                                return s(a, l, t, "channel-badge", [], {
                                    backgroundStyle: d(a, t, "backgroundColorStyle"),
                                    iconUrl: d(a, t, "channelIconUrl"),
                                    channel: d(a, t, "channel")
                                }), c(a, h, t, "channel-hover", [], {
                                    color: d(a, t, "backgroundColor")
                                }, e, null), o
                            }
                        }
                    }();
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null,
                        hasRendered: !1,
                        build: function (e) {
                            var t = e.createDocumentFragment(),
                                a = e.createComment("");
                            return e.appendChild(t, a), t
                        },
                        render: function (t, a, n) {
                            var r = a.dom,
                                i = a.hooks,
                                d = i.get,
                                s = i.block;
                            r.detectNamespace(n);
                            var c;
                            a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r), this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0), this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                            var o = r.createMorphAt(c, 0, 0, n);
                            return r.insertBoundary(c, null), r.insertBoundary(c, 0), s(a, o, t, "link-to", ["channel", d(a, t, "vanityUrl")], {}, e, null), c
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createComment("");
                        return e.appendChild(t, a), t
                    },
                    render: function (t, a, n) {
                        var r = a.dom,
                            i = a.hooks,
                            d = i.get,
                            s = i.block;
                        r.detectNamespace(n);
                        var c;
                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r), this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0), this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                        var o = r.createMorphAt(c, 0, 0, n);
                        return r.insertBoundary(c, null), r.insertBoundary(c, 0), s(a, o, t, "with", [d(a, t, "postContext.channel")], {}, e, null), c
                    }
                }
            }(),
            t = function () {
                var e = function () {
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createTextNode("    ");
                                e.appendChild(t, a);
                                var a = e.createElement("div");
                                e.appendChild(t, a);
                                var a = e.createTextNode("\n    ");
                                e.appendChild(t, a);
                                var a = e.createElement("h3");
                                e.setAttribute(a, "class", "module-title");
                                var n = e.createComment("");
                                e.appendChild(a, n), e.appendChild(t, a);
                                var a = e.createTextNode("\n");
                                return e.appendChild(t, a), t
                            },
                            render: function (e, t, a) {
                                var n = t.dom,
                                    r = t.hooks,
                                    i = r.element,
                                    d = r.content;
                                n.detectNamespace(a);
                                var s;
                                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                                var c = n.childAt(s, [1]),
                                    o = n.createMorphAt(n.childAt(s, [3]), 0, 0);
                                return i(t, c, e, "bind-attr", [], {
                                    "class": ":module-icon channel-badge custom.icon",
                                    style: "custom.iconStyle"
                                }), d(t, o, e, "custom.title"), s
                            }
                        }
                    }(),
                    t = function () {
                        var e = function () {
                                var e = function () {
                                    return {
                                        isHTMLBars: !0,
                                        revision: "Ember@1.11.3",
                                        blockParams: 0,
                                        cachedFragment: null,
                                        hasRendered: !1,
                                        build: function (e) {
                                            var t = e.createDocumentFragment(),
                                                a = e.createTextNode("        ");
                                            e.appendChild(t, a);
                                            var a = e.createElement("div");
                                            e.setAttribute(a, "class", "icon-popular_now module-icon"), e.appendChild(t, a);
                                            var a = e.createTextNode("\n        ");
                                            e.appendChild(t, a);
                                            var a = e.createElement("h3");
                                            e.setAttribute(a, "class", "module-title");
                                            var n = e.createTextNode("Popular Now");
                                            e.appendChild(a, n), e.appendChild(t, a);
                                            var a = e.createTextNode("\n");
                                            return e.appendChild(t, a), t
                                        },
                                        render: function (e, t, a) {
                                            var n = t.dom;
                                            n.detectNamespace(a);
                                            var r;
                                            return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n), this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0), this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n), r
                                        }
                                    }
                                }();
                                return {
                                    isHTMLBars: !0,
                                    revision: "Ember@1.11.3",
                                    blockParams: 0,
                                    cachedFragment: null,
                                    hasRendered: !1,
                                    build: function (e) {
                                        var t = e.createDocumentFragment(),
                                            a = e.createComment("");
                                        return e.appendChild(t, a), t
                                    },
                                    render: function (t, a, n) {
                                        var r = a.dom,
                                            i = a.hooks,
                                            d = i.block;
                                        r.detectNamespace(n);
                                        var s;
                                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                                        var c = r.createMorphAt(s, 0, 0, n);
                                        return r.insertBoundary(s, null), r.insertBoundary(s, 0), d(a, c, t, "link-to", ["popular-now"], {}, e, null), s
                                    }
                                }
                            }(),
                            t = function () {
                                var e = function () {
                                    return {
                                        isHTMLBars: !0,
                                        revision: "Ember@1.11.3",
                                        blockParams: 0,
                                        cachedFragment: null,
                                        hasRendered: !1,
                                        build: function (e) {
                                            var t = e.createDocumentFragment(),
                                                a = e.createTextNode("        ");
                                            e.appendChild(t, a);
                                            var a = e.createElement("div");
                                            e.setAttribute(a, "class", "channel-badge editors-pick"), e.appendChild(t, a);
                                            var a = e.createTextNode("\n        ");
                                            e.appendChild(t, a);
                                            var a = e.createElement("h3");
                                            e.setAttribute(a, "class", "module-title");
                                            var n = e.createTextNode("Editor's Pick");
                                            e.appendChild(a, n), e.appendChild(t, a);
                                            var a = e.createTextNode("\n");
                                            return e.appendChild(t, a), t
                                        },
                                        render: function (e, t, a) {
                                            var n = t.dom;
                                            n.detectNamespace(a);
                                            var r;
                                            return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n), this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0), this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n), r
                                        }
                                    }
                                }();
                                return {
                                    isHTMLBars: !0,
                                    revision: "Ember@1.11.3",
                                    blockParams: 0,
                                    cachedFragment: null,
                                    hasRendered: !1,
                                    build: function (e) {
                                        var t = e.createDocumentFragment(),
                                            a = e.createComment("");
                                        return e.appendChild(t, a), t
                                    },
                                    render: function (t, a, n) {
                                        var r = a.dom,
                                            i = a.hooks,
                                            d = i.block;
                                        r.detectNamespace(n);
                                        var s;
                                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                                        var c = r.createMorphAt(s, 0, 0, n);
                                        return r.insertBoundary(s, null), r.insertBoundary(s, 0), d(a, c, t, "link-to", ["editors-picks"], {}, e, null), s
                                    }
                                }
                            }(),
                            a = function () {
                                var e = function () {
                                    return {
                                        isHTMLBars: !0,
                                        revision: "Ember@1.11.3",
                                        blockParams: 0,
                                        cachedFragment: null,
                                        hasRendered: !1,
                                        build: function (e) {
                                            var t = e.createDocumentFragment(),
                                                a = e.createTextNode("        ");
                                            e.appendChild(t, a);
                                            var a = e.createElement("div");
                                            e.setAttribute(a, "class", "icon-list module-icon"), e.appendChild(t, a);
                                            var a = e.createTextNode("\n        ");
                                            e.appendChild(t, a);
                                            var a = e.createElement("h3");
                                            e.setAttribute(a, "class", "module-title");
                                            var n = e.createComment("");
                                            e.appendChild(a, n), e.appendChild(t, a);
                                            var a = e.createTextNode("\n        ");
                                            e.appendChild(t, a);
                                            var a = e.createElement("h5");
                                            e.setAttribute(a, "class", "post-position");
                                            var n = e.createComment("");
                                            e.appendChild(a, n);
                                            var n = e.createTextNode(" of ");
                                            e.appendChild(a, n);
                                            var n = e.createComment("");
                                            e.appendChild(a, n), e.appendChild(t, a);
                                            var a = e.createTextNode("\n");
                                            return e.appendChild(t, a), t
                                        },
                                        render: function (e, t, a) {
                                            var n = t.dom,
                                                r = t.hooks,
                                                i = r.content,
                                                d = r.get,
                                                s = r.inline;
                                            n.detectNamespace(a);
                                            var c;
                                            t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n), this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0), this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                                            var o = n.childAt(c, [5]),
                                                l = n.createMorphAt(n.childAt(c, [3]), 0, 0),
                                                h = n.createMorphAt(o, 0, 0),
                                                u = n.createMorphAt(o, 2, 2);
                                            return i(t, l, e, "list.title"), s(t, h, e, "format-count", [d(t, e, "positionIndex")], {}), s(t, u, e, "format-count", [d(t, e, "listLength")], {}), c
                                        }
                                    }
                                }();
                                return {
                                    isHTMLBars: !0,
                                    revision: "Ember@1.11.3",
                                    blockParams: 0,
                                    cachedFragment: null,
                                    hasRendered: !1,
                                    build: function (e) {
                                        var t = e.createDocumentFragment(),
                                            a = e.createComment("");
                                        return e.appendChild(t, a), t
                                    },
                                    render: function (t, a, n) {
                                        var r = a.dom,
                                            i = a.hooks,
                                            d = i.get,
                                            s = i.block;
                                        r.detectNamespace(n);
                                        var c;
                                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r), this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0), this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                                        var o = r.createMorphAt(c, 0, 0, n);
                                        return r.insertBoundary(c, null), r.insertBoundary(c, 0), s(a, o, t, "link-to", ["list", d(a, t, "list.vanityUrl")], {}, e, null), c
                                    }
                                }
                            }(),
                            n = function () {
                                var e = function () {
                                    return {
                                        isHTMLBars: !0,
                                        revision: "Ember@1.11.3",
                                        blockParams: 0,
                                        cachedFragment: null,
                                        hasRendered: !1,
                                        build: function (e) {
                                            var t = e.createDocumentFragment(),
                                                a = e.createTextNode("        ");
                                            e.appendChild(t, a);
                                            var a = e.createElement("div");
                                            e.setAttribute(a, "class", "icon-profile module-icon"), e.appendChild(t, a);
                                            var a = e.createTextNode("\n        ");
                                            e.appendChild(t, a);
                                            var a = e.createElement("h3");
                                            e.setAttribute(a, "class", "module-title");
                                            var n = e.createComment("");
                                            e.appendChild(a, n), e.appendChild(t, a);
                                            var a = e.createTextNode("\n");
                                            return e.appendChild(t, a), t
                                        },
                                        render: function (e, t, a) {
                                            var n = t.dom,
                                                r = t.hooks,
                                                i = r.content;
                                            n.detectNamespace(a);
                                            var d;
                                            t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                                            var s = n.createMorphAt(n.childAt(d, [3]), 0, 0);
                                            return i(t, s, e, "user.username"), d
                                        }
                                    }
                                }();
                                return {
                                    isHTMLBars: !0,
                                    revision: "Ember@1.11.3",
                                    blockParams: 0,
                                    cachedFragment: null,
                                    hasRendered: !1,
                                    build: function (e) {
                                        var t = e.createDocumentFragment(),
                                            a = e.createComment("");
                                        return e.appendChild(t, a), t
                                    },
                                    render: function (t, a, n) {
                                        var r = a.dom,
                                            i = a.hooks,
                                            d = i.get,
                                            s = i.block;
                                        r.detectNamespace(n);
                                        var c;
                                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r), this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0), this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                                        var o = r.createMorphAt(c, 0, 0, n);
                                        return r.insertBoundary(c, null), r.insertBoundary(c, 0), s(a, o, t, "link-user", [], {
                                            user: d(a, t, "user")
                                        }, e, null), c
                                    }
                                }
                            }();
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createComment("");
                                e.appendChild(t, a);
                                var a = e.createComment("");
                                e.appendChild(t, a);
                                var a = e.createComment("");
                                e.appendChild(t, a);
                                var a = e.createComment("");
                                return e.appendChild(t, a), t
                            },
                            render: function (r, i, d) {
                                var s = i.dom,
                                    c = i.hooks,
                                    o = c.get,
                                    l = c.block;
                                s.detectNamespace(d);
                                var h;
                                i.useFragmentCache && s.canClone ? (null === this.cachedFragment && (h = this.build(s), this.hasRendered ? this.cachedFragment = h : this.hasRendered = !0), this.cachedFragment && (h = s.cloneNode(this.cachedFragment, !0))) : h = this.build(s);
                                var u = s.createMorphAt(h, 0, 0, d),
                                    p = s.createMorphAt(h, 1, 1, d),
                                    m = s.createMorphAt(h, 2, 2, d),
                                    v = s.createMorphAt(h, 3, 3, d);
                                return s.insertBoundary(h, null), s.insertBoundary(h, 0), l(i, u, r, "if", [o(i, r, "popularNow")], {}, e, null), l(i, p, r, "if", [o(i, r, "editorsPick")], {}, t, null), l(i, m, r, "if", [o(i, r, "list")], {}, a, null), l(i, v, r, "if", [o(i, r, "user")], {}, n, null), h
                            }
                        }
                    }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createComment("");
                        return e.appendChild(t, a), t
                    },
                    render: function (a, n, r) {
                        var i = n.dom,
                            d = n.hooks,
                            s = d.get,
                            c = d.block;
                        i.detectNamespace(r);
                        var o;
                        n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (o = this.build(i), this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0), this.cachedFragment && (o = i.cloneNode(this.cachedFragment, !0))) : o = this.build(i);
                        var l = i.createMorphAt(o, 0, 0, r);
                        return i.insertBoundary(o, null), i.insertBoundary(o, 0), c(n, l, a, "if", [s(n, a, "custom")], {}, e, t), o
                    }
                }
            }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createComment("");
                e.appendChild(t, a);
                var a = e.createTextNode("\n\n");
                e.appendChild(t, a);
                var a = e.createComment("");
                return e.appendChild(t, a), t
            },
            render: function (a, n, r) {
                var i = n.dom,
                    d = n.hooks,
                    s = d.get,
                    c = d.block;
                i.detectNamespace(r);
                var o;
                n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (o = this.build(i), this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0), this.cachedFragment && (o = i.cloneNode(this.cachedFragment, !0))) : o = this.build(i);
                var l = i.createMorphAt(o, 0, 0, r),
                    h = i.createMorphAt(o, 2, 2, r);
                return i.insertBoundary(o, null), i.insertBoundary(o, 0), c(n, l, a, "if", [s(n, a, "postContext.channel")], {}, e, null), c(n, h, a, "with", [s(n, a, "postContext")], {}, t, null), o
            }
        }
    }())
}), define("vine-ember/templates/components/module-block", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        var e = function () {
                var e = function () {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null,
                        hasRendered: !1,
                        build: function (e) {
                            var t = e.createDocumentFragment(),
                                a = e.createComment("");
                            return e.appendChild(t, a), t
                        },
                        render: function (e, t, a) {
                            var n = t.dom,
                                r = t.hooks,
                                i = r.get,
                                d = r.inline;
                            n.detectNamespace(a);
                            var s;
                            t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                            var c = n.createMorphAt(s, 0, 0, a);
                            return n.insertBoundary(s, null), n.insertBoundary(s, 0), d(t, c, e, "secure-img", [], {
                                "class": "icon",
                                src: i(t, e, "iconUrl")
                            }), s
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("  ");
                        e.appendChild(t, a);
                        var a = e.createElement("div"),
                            n = e.createTextNode("\n    ");
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        e.appendChild(a, n);
                        var n = e.createTextNode("\n  ");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (t, a, n) {
                        var r = a.dom,
                            i = a.hooks,
                            d = i.get,
                            s = i.element,
                            c = i.block;
                        r.detectNamespace(n);
                        var o;
                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (o = this.build(r), this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0), this.cachedFragment && (o = r.cloneNode(this.cachedFragment, !0))) : o = this.build(r);
                        var l = r.childAt(o, [1]),
                            h = r.createMorphAt(l, 1, 1);
                        return s(a, l, t, "bind-attr", [], {
                            "class": ":module-icon iconClass",
                            style: d(a, t, "backgroundStyle")
                        }), c(a, h, t, "if", [d(a, t, "iconUrl")], {}, e, null), o
                    }
                }
            }(),
            t = function () {
                var e = function () {
                        var e = function () {
                            return {
                                isHTMLBars: !0,
                                revision: "Ember@1.11.3",
                                blockParams: 0,
                                cachedFragment: null,
                                hasRendered: !1,
                                build: function (e) {
                                    var t = e.createDocumentFragment(),
                                        a = e.createTextNode("      ");
                                    e.appendChild(t, a);
                                    var a = e.createElement("h3");
                                    e.setAttribute(a, "class", "module-title");
                                    var n = e.createComment("");
                                    e.appendChild(a, n);
                                    var n = e.createTextNode(" ");
                                    e.appendChild(a, n);
                                    var n = e.createElement("span");
                                    e.setAttribute(n, "class", "icon-carrow"), e.appendChild(a, n), e.appendChild(t, a);
                                    var a = e.createTextNode("\n");
                                    return e.appendChild(t, a), t
                                },
                                render: function (e, t, a) {
                                    var n = t.dom,
                                        r = t.hooks,
                                        i = r.content;
                                    n.detectNamespace(a);
                                    var d;
                                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                                    var s = n.createMorphAt(n.childAt(d, [1]), 0, 0);
                                    return i(t, s, e, "title"), d
                                }
                            }
                        }();
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createComment("");
                                return e.appendChild(t, a), t
                            },
                            render: function (t, a, n) {
                                var r = a.dom,
                                    i = a.hooks,
                                    d = i.get,
                                    s = i.block;
                                r.detectNamespace(n);
                                var c;
                                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r), this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0), this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                                var o = r.createMorphAt(c, 0, 0, n);
                                return r.insertBoundary(c, null), r.insertBoundary(c, 0), s(a, o, t, "link-to", [d(a, t, "route"), d(a, t, "routeParams")], {}, e, null), c
                            }
                        }
                    }(),
                    t = function () {
                        var e = function () {
                            return {
                                isHTMLBars: !0,
                                revision: "Ember@1.11.3",
                                blockParams: 0,
                                cachedFragment: null,
                                hasRendered: !1,
                                build: function (e) {
                                    var t = e.createDocumentFragment(),
                                        a = e.createTextNode("      ");
                                    e.appendChild(t, a);
                                    var a = e.createElement("h3");
                                    e.setAttribute(a, "class", "module-title");
                                    var n = e.createComment("");
                                    e.appendChild(a, n);
                                    var n = e.createTextNode(" ");
                                    e.appendChild(a, n);
                                    var n = e.createElement("span");
                                    e.setAttribute(n, "class", "icon-carrow"), e.appendChild(a, n), e.appendChild(t, a);
                                    var a = e.createTextNode("\n");
                                    return e.appendChild(t, a), t
                                },
                                render: function (e, t, a) {
                                    var n = t.dom,
                                        r = t.hooks,
                                        i = r.content;
                                    n.detectNamespace(a);
                                    var d;
                                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                                    var s = n.createMorphAt(n.childAt(d, [1]), 0, 0);
                                    return i(t, s, e, "title"), d
                                }
                            }
                        }();
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createComment("");
                                return e.appendChild(t, a), t
                            },
                            render: function (t, a, n) {
                                var r = a.dom,
                                    i = a.hooks,
                                    d = i.get,
                                    s = i.block;
                                r.detectNamespace(n);
                                var c;
                                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r), this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0), this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                                var o = r.createMorphAt(c, 0, 0, n);
                                return r.insertBoundary(c, null), r.insertBoundary(c, 0), s(a, o, t, "link-to", [d(a, t, "route")], {}, e, null), c
                            }
                        }
                    }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createComment("");
                        return e.appendChild(t, a), t
                    },
                    render: function (a, n, r) {
                        var i = n.dom,
                            d = n.hooks,
                            s = d.get,
                            c = d.block;
                        i.detectNamespace(r);
                        var o;
                        n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (o = this.build(i), this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0), this.cachedFragment && (o = i.cloneNode(this.cachedFragment, !0))) : o = this.build(i);
                        var l = i.createMorphAt(o, 0, 0, r);
                        return i.insertBoundary(o, null), i.insertBoundary(o, 0), c(n, l, a, "if", [s(n, a, "routeParams")], {}, e, t), o
                    }
                }
            }(),
            a = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("  ");
                        e.appendChild(t, a);
                        var a = e.createElement("h3");
                        e.setAttribute(a, "class", "module-title");
                        var n = e.createComment("");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.content;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var s = n.createMorphAt(n.childAt(d, [1]), 0, 0);
                        return i(t, s, e, "title"), d
                    }
                }
            }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createComment("");
                e.appendChild(t, a);
                var a = e.createComment("");
                e.appendChild(t, a);
                var a = e.createElement("div");
                e.setAttribute(a, "class", "module-container");
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n), e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a), t
            },
            render: function (n, r, i) {
                var d = r.dom,
                    s = r.hooks,
                    c = s.get,
                    o = s.block,
                    l = s.content;
                d.detectNamespace(i);
                var h;
                r.useFragmentCache && d.canClone ? (null === this.cachedFragment && (h = this.build(d), this.hasRendered ? this.cachedFragment = h : this.hasRendered = !0), this.cachedFragment && (h = d.cloneNode(this.cachedFragment, !0))) : h = this.build(d);
                var u = d.createMorphAt(h, 0, 0, i),
                    p = d.createMorphAt(h, 1, 1, i),
                    m = d.createMorphAt(d.childAt(h, [2]), 1, 1);
                return d.insertBoundary(h, 0), o(r, u, n, "if", [c(r, n, "iconClass")], {}, e, null), o(r, p, n, "if", [c(r, n, "route")], {}, t, a), l(r, m, n, "yield"), h
            }
        }
    }())
}), define("vine-ember/templates/components/mouseover-video", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        var e = function () {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null,
                hasRendered: !1,
                build: function (e) {
                    var t = e.createDocumentFragment(),
                        a = e.createTextNode("    ");
                    e.appendChild(t, a);
                    var a = e.createComment("");
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a), t
                },
                render: function (e, t, a) {
                    var n = t.dom,
                        r = t.hooks,
                        i = r.inline;
                    n.detectNamespace(a);
                    var d;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                    var s = n.createMorphAt(d, 1, 1, a);
                    return i(t, s, e, "partial", ["explicit-content"], {}), d
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createElement("div");
                e.setAttribute(a, "class", "video-container");
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("div");
                e.setAttribute(n, "class", "loading-bar"), e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n), e.appendChild(t, a);
                var a = e.createTextNode("\n");
                e.appendChild(t, a);
                var a = e.createComment("");
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a), t
            },
            render: function (t, a, n) {
                var r = a.dom,
                    i = a.hooks,
                    d = i.get,
                    s = i.element,
                    c = i.block,
                    o = i.content;
                r.detectNamespace(n);
                var l;
                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (l = this.build(r), this.hasRendered ? this.cachedFragment = l : this.hasRendered = !0), this.cachedFragment && (l = r.cloneNode(this.cachedFragment, !0))) : l = this.build(r);
                var h = r.childAt(l, [0]),
                    u = r.createMorphAt(h, 3, 3),
                    p = r.createMorphAt(l, 2, 2, n);
                return s(a, h, t, "bind-attr", [], {
                    style: d(a, t, "post.backgroundImageStyle")
                }), c(a, u, t, "if", [d(a, t, "post.explicitContent")], {}, e, null), o(a, p, t, "yield"), l
            }
        }
    }())
}), define("vine-ember/templates/components/nav-button", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        var e = function () {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null,
                hasRendered: !1,
                build: function (e) {
                    var t = e.createDocumentFragment(),
                        a = e.createElement("button"),
                        n = e.createElement("div");
                    return e.appendChild(a, n), e.appendChild(t, a), t
                },
                render: function (e, t, a) {
                    var n = t.dom,
                        r = t.hooks,
                        i = r.element,
                        d = r.get;
                    n.detectNamespace(a);
                    var s;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                    var c = n.childAt(s, [0]),
                        o = n.childAt(c, [0]);
                    return i(t, c, e, "bind-attr", [], {
                        "class": ":clear :icon route"
                    }), i(t, o, e, "bind-attr", [], {
                        "class": d(t, e, "iconClass")
                    }), s
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createComment("");
                return e.appendChild(t, a), t
            },
            render: function (t, a, n) {
                var r = a.dom,
                    i = a.hooks,
                    d = i.get,
                    s = i.block;
                r.detectNamespace(n);
                var c;
                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r), this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0), this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                var o = r.createMorphAt(c, 0, 0, n);
                return r.insertBoundary(c, null), r.insertBoundary(c, 0), s(a, o, t, "link-to", [d(a, t, "route")], {}, e, null), c
            }
        }
    }())
}), define("vine-ember/templates/components/paginated-comments", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        var e = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("· Load previous");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom;
                        n.detectNamespace(a);
                        var r;
                        return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n), this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0), this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n), r
                    }
                }
            }(),
            t = function () {
                var e = function () {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null,
                        hasRendered: !1,
                        build: function (e) {
                            var t = e.createDocumentFragment(),
                                a = e.createElement("strong"),
                                n = e.createComment("");
                            return e.appendChild(a, n), e.appendChild(t, a), t
                        },
                        render: function (e, t, a) {
                            var n = t.dom,
                                r = t.hooks,
                                i = r.get,
                                d = r.inline;
                            n.detectNamespace(a);
                            var s;
                            t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                            var c = n.createMorphAt(n.childAt(s, [0]), 0, 0);
                            return d(t, c, e, "replace-emoji", [i(t, e, "username")], {}), s
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("  ");
                        e.appendChild(t, a);
                        var a = e.createElement("li"),
                            n = e.createTextNode("\n    ");
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        e.appendChild(a, n);
                        var n = e.createTextNode("\n    ");
                        e.appendChild(a, n);
                        var n = e.createElement("div");
                        e.setAttribute(n, "class", "comment-text");
                        var r = e.createTextNode("\n      ");
                        e.appendChild(n, r);
                        var r = e.createComment("");
                        e.appendChild(n, r);
                        var r = e.createTextNode("\n      ");
                        e.appendChild(n, r);
                        var r = e.createComment("");
                        e.appendChild(n, r);
                        var r = e.createTextNode("\n    ");
                        e.appendChild(n, r), e.appendChild(a, n);
                        var n = e.createTextNode("\n  ");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (t, a, n) {
                        var r = a.dom,
                            i = a.hooks,
                            d = i.get,
                            s = i.inline,
                            c = i.block;
                        r.detectNamespace(n);
                        var o;
                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (o = this.build(r), this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0), this.cachedFragment && (o = r.cloneNode(this.cachedFragment, !0))) : o = this.build(r);
                        var l = r.childAt(o, [1]),
                            h = r.childAt(l, [3]),
                            u = r.createMorphAt(l, 1, 1),
                            p = r.createMorphAt(h, 1, 1),
                            m = r.createMorphAt(h, 3, 3);
                        return s(a, u, t, "secure-img", [], {
                            src: d(a, t, "avatarUrl"),
                            "class": "avatar"
                        }), c(a, p, t, "link-user", [], {
                            user: d(a, t, "this")
                        }, e, null), s(a, m, t, "linkify-entities", [], {
                            text: d(a, t, "comment"),
                            entities: d(a, t, "entities")
                        }), o
                    }
                }
            }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createElement("div"),
                    n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("span");
                e.setAttribute(n, "class", "pagination-text");
                var r = e.createComment("");
                e.appendChild(n, r);
                var r = e.createTextNode(" Comments ");
                e.appendChild(n, r);
                var r = e.createComment("");
                e.appendChild(n, r), e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n), e.appendChild(t, a);
                var a = e.createTextNode("\n\n");
                e.appendChild(t, a);
                var a = e.createComment("");
                return e.appendChild(t, a), t
            },
            render: function (a, n, r) {
                var i = n.dom,
                    d = n.hooks,
                    s = d.element,
                    c = d.get,
                    o = d.inline,
                    l = d.block;
                i.detectNamespace(r);
                var h;
                n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (h = this.build(i), this.hasRendered ? this.cachedFragment = h : this.hasRendered = !0), this.cachedFragment && (h = i.cloneNode(this.cachedFragment, !0))) : h = this.build(i);
                var u = i.childAt(h, [0]),
                    p = i.childAt(u, [1]),
                    m = i.createMorphAt(p, 0, 0),
                    v = i.createMorphAt(p, 2, 2),
                    g = i.createMorphAt(h, 2, 2, r);
                return i.insertBoundary(h, null), s(n, u, a, "bind-attr", [], {
                    "class": ":comments-pagination hasMorePosts::disabled"
                }), s(n, u, a, "action", ["authenticatedNextPage"], {}), o(n, m, a, "format-count", [c(n, a, "pagination.count")], {}), l(n, v, a, "if", [c(n, a, "hasMoreComments")], {}, e, null), l(n, g, a, "each", [c(n, a, "posts")], {}, t, null), h
            }
        }
    }())
}), define("vine-ember/templates/components/profile-background", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createElement("span");
                return e.setAttribute(a, "class", "icon-smiley"), e.appendChild(t, a), t
            },
            render: function (e, t, a) {
                var n = t.dom;
                n.detectNamespace(a);
                var r;
                return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n), this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0), this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n), r
            }
        }
    }())
}), define("vine-ember/templates/components/related-videos", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        var e = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("    ");
                        e.appendChild(t, a);
                        var a = e.createElement("img");
                        e.setAttribute(a, "class", "selected-post thumbnail"), e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.get,
                            d = r.element;
                        n.detectNamespace(a);
                        var s;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                        var c = n.childAt(s, [1]);
                        return d(t, c, e, "bind-attr", [], {
                            src: i(t, e, "selectedPost")
                        }), s
                    }
                }
            }(),
            t = function () {
                var e = function () {
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createComment("");
                                return e.appendChild(t, a), t
                            },
                            render: function (e, t, a) {
                                var n = t.dom,
                                    r = t.hooks,
                                    i = r.inline;
                                n.detectNamespace(a);
                                var d;
                                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                                var s = n.createMorphAt(d, 0, 0, a);
                                return n.insertBoundary(d, null), n.insertBoundary(d, 0), i(t, s, e, "view", ["related-videos/post"], {}), d
                            }
                        }
                    }(),
                    t = function () {
                        var e = function () {
                                return {
                                    isHTMLBars: !0,
                                    revision: "Ember@1.11.3",
                                    blockParams: 0,
                                    cachedFragment: null,
                                    hasRendered: !1,
                                    build: function (e) {
                                        var t = e.createDocumentFragment(),
                                            a = e.createElement("span");
                                        return e.setAttribute(a, "class", "icon-plus"), e.appendChild(t, a), t
                                    },
                                    render: function (e, t, a) {
                                        var n = t.dom;
                                        n.detectNamespace(a);
                                        var r;
                                        return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n), this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0), this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n), r
                                    }
                                }
                            }(),
                            t = function () {
                                return {
                                    isHTMLBars: !0,
                                    revision: "Ember@1.11.3",
                                    blockParams: 0,
                                    cachedFragment: null,
                                    hasRendered: !1,
                                    build: function (e) {
                                        var t = e.createDocumentFragment(),
                                            a = e.createTextNode("Load More");
                                        return e.appendChild(t, a), t
                                    },
                                    render: function (e, t, a) {
                                        var n = t.dom;
                                        n.detectNamespace(a);
                                        var r;
                                        return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n), this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0), this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n), r
                                    }
                                }
                            }();
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createTextNode("    ");
                                e.appendChild(t, a);
                                var a = e.createElement("button");
                                e.setAttribute(a, "type", "button");
                                var n = e.createTextNode("\n      ");
                                e.appendChild(a, n);
                                var n = e.createComment("");
                                e.appendChild(a, n);
                                var n = e.createTextNode("\n    ");
                                e.appendChild(a, n), e.appendChild(t, a);
                                var a = e.createTextNode("\n");
                                return e.appendChild(t, a), t
                            },
                            render: function (a, n, r) {
                                var i = n.dom,
                                    d = n.hooks,
                                    s = d.get,
                                    c = d.element,
                                    o = d.block;
                                i.detectNamespace(r);
                                var l;
                                n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (l = this.build(i), this.hasRendered ? this.cachedFragment = l : this.hasRendered = !0), this.cachedFragment && (l = i.cloneNode(this.cachedFragment, !0))) : l = this.build(i);
                                var h = i.childAt(l, [1]),
                                    u = i.createMorphAt(h, 1, 1);
                                return c(n, h, a, "bind-attr", [], {
                                    disabled: s(n, a, "paginationLoading")
                                }), c(n, h, a, "action", ["doNextPage"], {}), o(n, u, a, "if", [s(n, a, "isMobile")], {}, e, t), l
                            }
                        }
                    }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("  ");
                        e.appendChild(t, a);
                        var a = e.createElement("div");
                        e.setAttribute(a, "class", "related-title");
                        var n = e.createTextNode("\n    You might also like...\n  ");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n\n  ");
                        e.appendChild(t, a);
                        var a = e.createElement("div");
                        e.setAttribute(a, "class", "posts");
                        var n = e.createTextNode("\n    ");
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        e.appendChild(a, n);
                        var n = e.createTextNode("\n  ");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n\n");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        return e.appendChild(t, a), t
                    },
                    render: function (a, n, r) {
                        var i = n.dom,
                            d = n.hooks,
                            s = d.get,
                            c = d.block;
                        i.detectNamespace(r);
                        var o;
                        n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (o = this.build(i), this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0), this.cachedFragment && (o = i.cloneNode(this.cachedFragment, !0))) : o = this.build(i);
                        var l = i.createMorphAt(i.childAt(o, [3]), 1, 1),
                            h = i.createMorphAt(o, 5, 5, r);
                        return i.insertBoundary(o, null), c(n, l, a, "each", [s(n, a, "postsToDisplay")], {}, e, null), c(n, h, a, "if", [s(n, a, "pagination.nextPage")], {}, t, null), o
                    }
                }
            }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createElement("div");
                e.setAttribute(a, "class", "selected-container");
                var n = e.createTextNode("\n");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n), e.appendChild(t, a);
                var a = e.createTextNode("\n");
                e.appendChild(t, a);
                var a = e.createComment("");
                return e.appendChild(t, a), t
            },
            render: function (a, n, r) {
                var i = n.dom,
                    d = n.hooks,
                    s = d.get,
                    c = d.block;
                i.detectNamespace(r);
                var o;
                n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (o = this.build(i), this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0), this.cachedFragment && (o = i.cloneNode(this.cachedFragment, !0))) : o = this.build(i);
                var l = i.createMorphAt(i.childAt(o, [0]), 1, 1),
                    h = i.createMorphAt(o, 2, 2, r);
                return i.insertBoundary(o, null), c(n, l, a, "if", [s(n, a, "selectedPost")], {}, e, null), c(n, h, a, "if", [s(n, a, "hasPosts")], {}, t, null), o
            }
        }
    }())
}), define("vine-ember/templates/components/search-autocomplete", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        var e = function () {
            var e = function () {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null,
                        hasRendered: !1,
                        build: function (e) {
                            var t = e.createDocumentFragment(),
                                a = e.createTextNode("        ");
                            e.appendChild(t, a);
                            var a = e.createElement("div");
                            e.setAttribute(a, "class", "all-results");
                            var n = e.createTextNode("\n          See all results for ");
                            e.appendChild(a, n);
                            var n = e.createElement("strong"),
                                r = e.createComment("");
                            e.appendChild(n, r), e.appendChild(a, n);
                            var n = e.createTextNode("\n        ");
                            e.appendChild(a, n), e.appendChild(t, a);
                            var a = e.createTextNode("\n");
                            return e.appendChild(t, a), t
                        },
                        render: function (e, t, a) {
                            var n = t.dom,
                                r = t.hooks,
                                i = r.content;
                            n.detectNamespace(a);
                            var d;
                            t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                            var s = n.createMorphAt(n.childAt(d, [1, 1]), 0, 0);
                            return i(t, s, e, "query"), d
                        }
                    }
                }(),
                t = function () {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null,
                        hasRendered: !1,
                        build: function (e) {
                            var t = e.createDocumentFragment(),
                                a = e.createTextNode("          ");
                            e.appendChild(t, a);
                            var a = e.createComment("");
                            e.appendChild(t, a);
                            var a = e.createTextNode("\n");
                            return e.appendChild(t, a), t
                        },
                        render: function (e, t, a) {
                            var n = t.dom,
                                r = t.hooks,
                                i = r.inline;
                            n.detectNamespace(a);
                            var d;
                            t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                            var s = n.createMorphAt(d, 1, 1, a);
                            return i(t, s, e, "partial", ["search/autocomplete-results"], {}), d
                        }
                    }
                }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null,
                hasRendered: !1,
                build: function (e) {
                    var t = e.createDocumentFragment(),
                        a = e.createTextNode("    ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "autocomplete");
                    var n = e.createTextNode("\n");
                    e.appendChild(a, n);
                    var n = e.createComment("");
                    e.appendChild(a, n);
                    var n = e.createTextNode("      ");
                    e.appendChild(a, n);
                    var n = e.createElement("div");
                    e.setAttribute(n, "class", "results");
                    var r = e.createTextNode("\n");
                    e.appendChild(n, r);
                    var r = e.createComment("");
                    e.appendChild(n, r);
                    var r = e.createTextNode("      ");
                    e.appendChild(n, r), e.appendChild(a, n);
                    var n = e.createTextNode("\n    ");
                    e.appendChild(a, n), e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a), t
                },
                render: function (a, n, r) {
                    var i = n.dom,
                        d = n.hooks,
                        s = d.get,
                        c = d.block;
                    i.detectNamespace(r);
                    var o;
                    n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (o = this.build(i), this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0), this.cachedFragment && (o = i.cloneNode(this.cachedFragment, !0))) : o = this.build(i);
                    var l = i.childAt(o, [1]),
                        h = i.createMorphAt(l, 1, 1),
                        u = i.createMorphAt(i.childAt(l, [3]), 1, 1);
                    return c(n, h, a, "link-to", ["search", s(n, a, "query")], {}, e, null), c(n, u, a, "each", [s(n, a, "results")], {}, t, null), o
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createElement("form");
                e.setAttribute(a, "class", "search");
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("button");
                e.setAttribute(n, "type", "submit"), e.setAttribute(n, "class", "clear icon-search"), e.appendChild(a, n);
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("button");
                e.setAttribute(n, "type", "submit"), e.setAttribute(n, "class", "clear icon-carrow"), e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n), e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a), t
            },
            render: function (t, a, n) {
                var r = a.dom,
                    i = a.hooks,
                    d = i.element,
                    s = i.get,
                    c = i.inline,
                    o = i.block;
                r.detectNamespace(n);
                var l;
                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (l = this.build(r), this.hasRendered ? this.cachedFragment = l : this.hasRendered = !0), this.cachedFragment && (l = r.cloneNode(this.cachedFragment, !0))) : l = this.build(r);
                var h = r.childAt(l, [0]),
                    u = r.createMorphAt(h, 1, 1),
                    p = r.createMorphAt(h, 7, 7);
                return d(a, h, t, "action", ["search"], {
                    on: "submit"
                }), c(a, u, t, "view", ["search-input"], {
                    placeholder: "Search",
                    queryChanged: "queryChanged",
                    value: s(a, t, "query"),
                    autofocus: s(a, t, "autofocus")
                }), o(a, p, t, "if", [s(a, t, "results")], {}, e, null), l
            }
        }
    }())
}), define("vine-ember/templates/components/share-post", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        var e = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("  ");
                        e.appendChild(t, a);
                        var a = e.createElement("div"),
                            n = e.createTextNode("\n    ");
                        e.appendChild(a, n);
                        var n = e.createElement("div");
                        e.setAttribute(n, "class", "icon"), e.appendChild(a, n);
                        var n = e.createTextNode("\n    ");
                        e.appendChild(a, n);
                        var n = e.createElement("p"),
                            r = e.createTextNode("\n      ");
                        e.appendChild(n, r);
                        var r = e.createComment("");
                        e.appendChild(n, r);
                        var r = e.createTextNode("\n    ");
                        e.appendChild(n, r), e.appendChild(a, n);
                        var n = e.createTextNode("\n  ");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.element,
                            d = r.get,
                            s = r.inline;
                        n.detectNamespace(a);
                        var c;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n), this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0), this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                        var o = n.childAt(c, [1]),
                            l = n.createMorphAt(n.childAt(o, [3]), 1, 1);
                        return i(t, o, e, "bind-attr", [], {
                            "class": ":share-badge :like post.liked:active"
                        }), i(t, o, e, "action", ["like"], {}), s(t, l, e, "format-count", [d(t, e, "post.likes.count")], {
                            zerotext: "Like"
                        }), c
                    }
                }
            }(),
            t = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("  ");
                        e.appendChild(t, a);
                        var a = e.createElement("div"),
                            n = e.createTextNode("\n    ");
                        e.appendChild(a, n);
                        var n = e.createElement("div");
                        e.setAttribute(n, "class", "icon");
                        var r = e.createTextNode("\n      ");
                        e.appendChild(n, r);
                        var r = e.createElement("div");
                        e.setAttribute(r, "class", "revine-underlay"), e.appendChild(n, r);
                        var r = e.createTextNode("\n      ");
                        e.appendChild(n, r);
                        var r = e.createElement("div");
                        e.setAttribute(r, "class", "icon-revine"), e.appendChild(n, r);
                        var r = e.createTextNode("\n    ");
                        e.appendChild(n, r), e.appendChild(a, n);
                        var n = e.createTextNode("\n    ");
                        e.appendChild(a, n);
                        var n = e.createElement("p"),
                            r = e.createTextNode("\n      ");
                        e.appendChild(n, r);
                        var r = e.createComment("");
                        e.appendChild(n, r);
                        var r = e.createTextNode("\n    ");
                        e.appendChild(n, r), e.appendChild(a, n);
                        var n = e.createTextNode("\n  ");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.element,
                            d = r.get,
                            s = r.inline;
                        n.detectNamespace(a);
                        var c;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n), this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0), this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                        var o = n.childAt(c, [1]),
                            l = n.createMorphAt(n.childAt(o, [3]), 1, 1);
                        return i(t, o, e, "bind-attr", [], {
                            "class": ":share-badge :revine isCurrentUser:hidden post.myRepostId:active"
                        }), i(t, o, e, "action", ["revine"], {}), s(t, l, e, "format-count", [d(t, e, "post.reposts.count")], {
                            zerotext: "Revine"
                        }), c
                    }
                }
            }(),
            a = function () {
                var e = function () {
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createTextNode("        ");
                                e.appendChild(t, a);
                                var a = e.createComment("");
                                e.appendChild(t, a);
                                var a = e.createTextNode("\n");
                                return e.appendChild(t, a), t
                            },
                            render: function (e, t, a) {
                                var n = t.dom,
                                    r = t.hooks,
                                    i = r.get,
                                    d = r.inline;
                                n.detectNamespace(a);
                                var s;
                                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                                var c = n.createMorphAt(s, 1, 1, a);
                                return d(t, c, e, "format-count", [i(t, e, "tweetCount")], {}), s
                            }
                        }
                    }(),
                    t = function () {
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createTextNode("        Tweet\n");
                                return e.appendChild(t, a), t
                            },
                            render: function (e, t, a) {
                                var n = t.dom;
                                n.detectNamespace(a);
                                var r;
                                return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n), this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0), this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n), r
                            }
                        }
                    }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("  ");
                        e.appendChild(t, a);
                        var a = e.createElement("div");
                        e.setAttribute(a, "class", "share-badge twitter");
                        var n = e.createTextNode("\n    ");
                        e.appendChild(a, n);
                        var n = e.createElement("div");
                        e.setAttribute(n, "class", "icon"), e.appendChild(a, n);
                        var n = e.createTextNode("\n    ");
                        e.appendChild(a, n);
                        var n = e.createElement("p"),
                            r = e.createTextNode("\n");
                        e.appendChild(n, r);
                        var r = e.createComment("");
                        e.appendChild(n, r);
                        var r = e.createTextNode("    ");
                        e.appendChild(n, r), e.appendChild(a, n);
                        var n = e.createTextNode("\n  ");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (a, n, r) {
                        var i = n.dom,
                            d = n.hooks,
                            s = d.element,
                            c = d.get,
                            o = d.block;
                        i.detectNamespace(r);
                        var l;
                        n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (l = this.build(i), this.hasRendered ? this.cachedFragment = l : this.hasRendered = !0), this.cachedFragment && (l = i.cloneNode(this.cachedFragment, !0))) : l = this.build(i);
                        var h = i.childAt(l, [1]),
                            u = i.createMorphAt(i.childAt(h, [3]), 1, 1);
                        return s(n, h, a, "action", ["tweet"], {}), o(n, u, a, "if", [c(n, a, "tweetCount")], {}, e, t), l
                    }
                }
            }(),
            n = function () {
                var e = function () {
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createTextNode("        ");
                                e.appendChild(t, a);
                                var a = e.createComment("");
                                e.appendChild(t, a);
                                var a = e.createTextNode("\n");
                                return e.appendChild(t, a), t
                            },
                            render: function (e, t, a) {
                                var n = t.dom,
                                    r = t.hooks,
                                    i = r.get,
                                    d = r.inline;
                                n.detectNamespace(a);
                                var s;
                                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                                var c = n.createMorphAt(s, 1, 1, a);
                                return d(t, c, e, "format-count", [i(t, e, "facebookCount")], {}), s
                            }
                        }
                    }(),
                    t = function () {
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createTextNode("        Share\n");
                                return e.appendChild(t, a), t
                            },
                            render: function (e, t, a) {
                                var n = t.dom;
                                n.detectNamespace(a);
                                var r;
                                return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n), this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0), this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n), r
                            }
                        }
                    }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("  ");
                        e.appendChild(t, a);
                        var a = e.createElement("div");
                        e.setAttribute(a, "class", "share-badge facebook");
                        var n = e.createTextNode("\n    ");
                        e.appendChild(a, n);
                        var n = e.createElement("div");
                        e.setAttribute(n, "class", "icon"), e.appendChild(a, n);
                        var n = e.createTextNode("\n    ");
                        e.appendChild(a, n);
                        var n = e.createElement("p"),
                            r = e.createTextNode("\n");
                        e.appendChild(n, r);
                        var r = e.createComment("");
                        e.appendChild(n, r);
                        var r = e.createTextNode("    ");
                        e.appendChild(n, r), e.appendChild(a, n);
                        var n = e.createTextNode("\n  ");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (a, n, r) {
                        var i = n.dom,
                            d = n.hooks,
                            s = d.element,
                            c = d.get,
                            o = d.block;
                        i.detectNamespace(r);
                        var l;
                        n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (l = this.build(i), this.hasRendered ? this.cachedFragment = l : this.hasRendered = !0), this.cachedFragment && (l = i.cloneNode(this.cachedFragment, !0))) : l = this.build(i);
                        var h = i.childAt(l, [1]),
                            u = i.createMorphAt(i.childAt(h, [3]), 1, 1);
                        return s(n, h, a, "action", ["facebookShare"], {}), o(n, u, a, "if", [c(n, a, "facebookCount")], {}, e, t), l
                    }
                }
            }(),
            r = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("  ");
                        e.appendChild(t, a);
                        var a = e.createElement("a");
                        e.setAttribute(a, "target", "_blank"), e.setAttribute(a, "class", "email-button");
                        var n = e.createTextNode("\n    ");
                        e.appendChild(a, n);
                        var n = e.createElement("div");
                        e.setAttribute(n, "class", "share-badge email");
                        var r = e.createTextNode("\n      ");
                        e.appendChild(n, r);
                        var r = e.createElement("div");
                        e.setAttribute(r, "class", "icon"), e.appendChild(n, r);
                        var r = e.createTextNode("\n      ");
                        e.appendChild(n, r);
                        var r = e.createElement("p"),
                            i = e.createTextNode("Email");
                        e.appendChild(r, i), e.appendChild(n, r);
                        var r = e.createTextNode("\n    ");
                        e.appendChild(n, r), e.appendChild(a, n);
                        var n = e.createTextNode("\n  ");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.get,
                            d = r.element;
                        n.detectNamespace(a);
                        var s;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                        var c = n.childAt(s, [1]);
                        return d(t, c, e, "bind-attr", [], {
                            href: i(t, e, "post.emailUrl")
                        }), s
                    }
                }
            }(),
            i = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("  ");
                        e.appendChild(t, a);
                        var a = e.createElement("div");
                        e.setAttribute(a, "class", "share-badge tumblr");
                        var n = e.createTextNode("\n    ");
                        e.appendChild(a, n);
                        var n = e.createElement("div");
                        e.setAttribute(n, "class", "icon"), e.appendChild(a, n);
                        var n = e.createTextNode("\n    ");
                        e.appendChild(a, n);
                        var n = e.createElement("p"),
                            r = e.createTextNode("Share");
                        e.appendChild(n, r), e.appendChild(a, n);
                        var n = e.createTextNode("\n  ");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.element;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var s = n.childAt(d, [1]);
                        return i(t, s, e, "action", ["tumblrShare"], {}), d
                    }
                }
            }(),
            d = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("  ");
                        e.appendChild(t, a);
                        var a = e.createElement("a");
                        e.setAttribute(a, "target", "_blank");
                        var n = e.createTextNode("\n    ");
                        e.appendChild(a, n);
                        var n = e.createElement("div");
                        e.setAttribute(n, "class", "share-badge stumbleupon");
                        var r = e.createTextNode("\n      ");
                        e.appendChild(n, r);
                        var r = e.createElement("div");
                        e.setAttribute(r, "class", "icon"), e.appendChild(n, r);
                        var r = e.createTextNode("\n      ");
                        e.appendChild(n, r);
                        var r = e.createElement("p"),
                            i = e.createTextNode("Share");
                        e.appendChild(r, i), e.appendChild(n, r);
                        var r = e.createTextNode("\n    ");
                        e.appendChild(n, r), e.appendChild(a, n);
                        var n = e.createTextNode("\n  ");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.get,
                            d = r.element;
                        n.detectNamespace(a);
                        var s;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                        var c = n.childAt(s, [1]);
                        return d(t, c, e, "bind-attr", [], {
                            href: i(t, e, "stumbleuponUrl")
                        }), s
                    }
                }
            }(),
            s = function () {
                var e = function () {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null,
                        hasRendered: !1,
                        build: function (e) {
                            var t = e.createDocumentFragment(),
                                a = e.createTextNode("    ");
                            e.appendChild(t, a);
                            var a = e.createElement("a");
                            e.setAttribute(a, "target", "_blank");
                            var n = e.createTextNode("\n      ");
                            e.appendChild(a, n);
                            var n = e.createElement("div");
                            e.setAttribute(n, "class", "share-badge permalink");
                            var r = e.createTextNode("\n        ");
                            e.appendChild(n, r);
                            var r = e.createElement("div");
                            e.setAttribute(r, "class", "icon icon-copy_url"), e.appendChild(n, r);
                            var r = e.createTextNode("\n        ");
                            e.appendChild(n, r);
                            var r = e.createElement("p"),
                                i = e.createTextNode("Link");
                            e.appendChild(r, i), e.appendChild(n, r);
                            var r = e.createTextNode("\n      ");
                            e.appendChild(n, r), e.appendChild(a, n);
                            var n = e.createTextNode("\n    ");
                            e.appendChild(a, n), e.appendChild(t, a);
                            var a = e.createTextNode("\n");
                            return e.appendChild(t, a), t
                        },
                        render: function (e, t, a) {
                            var n = t.dom,
                                r = t.hooks,
                                i = r.get,
                                d = r.element;
                            n.detectNamespace(a);
                            var s;
                            t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                            var c = n.childAt(s, [1]);
                            return d(t, c, e, "bind-attr", [], {
                                href: i(t, e, "post.permalinkUrl")
                            }), s
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createComment("");
                        return e.appendChild(t, a), t
                    },
                    render: function (t, a, n) {
                        var r = a.dom,
                            i = a.hooks,
                            d = i.get,
                            s = i.block;
                        r.detectNamespace(n);
                        var c;
                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r), this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0), this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                        var o = r.createMorphAt(c, 0, 0, n);
                        return r.insertBoundary(c, null), r.insertBoundary(c, 0), s(a, o, t, "if", [d(a, t, "post.permalinkUrl")], {}, e, null), c
                    }
                }
            }(),
            c = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("  ");
                        e.appendChild(t, a);
                        var a = e.createElement("div");
                        e.setAttribute(a, "class", "share-badge vm");
                        var n = e.createTextNode("\n    ");
                        e.appendChild(a, n);
                        var n = e.createElement("div");
                        e.setAttribute(n, "class", "icon"), e.appendChild(a, n);
                        var n = e.createTextNode("\n    ");
                        e.appendChild(a, n);
                        var n = e.createElement("p"),
                            r = e.createTextNode("VM");
                        e.appendChild(n, r), e.appendChild(a, n);
                        var n = e.createTextNode("\n  ");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.element;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var s = n.childAt(d, [1]);
                        return i(t, s, e, "action", ["vm"], {}), d
                    }
                }
            }(),
            o = function () {
                var e = function () {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null,
                        hasRendered: !1,
                        build: function (e) {
                            var t = e.createDocumentFragment(),
                                a = e.createTextNode("    ");
                            e.appendChild(t, a);
                            var a = e.createElement("div");
                            e.setAttribute(a, "class", "share-badge embed");
                            var n = e.createTextNode("\n      ");
                            e.appendChild(a, n);
                            var n = e.createElement("div");
                            e.setAttribute(n, "class", "icon"), e.appendChild(a, n);
                            var n = e.createTextNode("\n      ");
                            e.appendChild(a, n);
                            var n = e.createElement("p"),
                                r = e.createTextNode("Embed");
                            e.appendChild(n, r), e.appendChild(a, n);
                            var n = e.createTextNode("\n    ");
                            e.appendChild(a, n), e.appendChild(t, a);
                            var a = e.createTextNode("\n");
                            return e.appendChild(t, a), t
                        },
                        render: function (e, t, a) {
                            var n = t.dom;
                            n.detectNamespace(a);
                            var r;
                            return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n), this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0), this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n), r
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createComment("");
                        return e.appendChild(t, a), t
                    },
                    render: function (t, a, n) {
                        var r = a.dom,
                            i = a.hooks,
                            d = i.get,
                            s = i.block;
                        r.detectNamespace(n);
                        var c;
                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r), this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0), this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                        var o = r.createMorphAt(c, 0, 0, n);
                        return r.insertBoundary(c, null), r.insertBoundary(c, 0), s(a, o, t, "link-to", ["permalink-post.embed", d(a, t, "post.shortId")], {}, e, null), c
                    }
                }
            }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createComment("");
                e.appendChild(t, a);
                var a = e.createComment("");
                e.appendChild(t, a);
                var a = e.createComment("");
                e.appendChild(t, a);
                var a = e.createComment("");
                e.appendChild(t, a);
                var a = e.createComment("");
                e.appendChild(t, a);
                var a = e.createComment("");
                e.appendChild(t, a);
                var a = e.createComment("");
                e.appendChild(t, a);
                var a = e.createComment("");
                e.appendChild(t, a);
                var a = e.createComment("");
                e.appendChild(t, a);
                var a = e.createComment("");
                return e.appendChild(t, a), t
            },
            render: function (l, h, u) {
                var p = h.dom,
                    m = h.hooks,
                    v = m.get,
                    g = m.block;
                p.detectNamespace(u);
                var b;
                h.useFragmentCache && p.canClone ? (null === this.cachedFragment && (b = this.build(p), this.hasRendered ? this.cachedFragment = b : this.hasRendered = !0), this.cachedFragment && (b = p.cloneNode(this.cachedFragment, !0))) : b = this.build(p);
                var C = p.createMorphAt(b, 0, 0, u),
                    f = p.createMorphAt(b, 1, 1, u),
                    F = p.createMorphAt(b, 2, 2, u),
                    N = p.createMorphAt(b, 3, 3, u),
                    T = p.createMorphAt(b, 4, 4, u),
                    x = p.createMorphAt(b, 5, 5, u),
                    A = p.createMorphAt(b, 6, 6, u),
                    k = p.createMorphAt(b, 7, 7, u),
                    E = p.createMorphAt(b, 8, 8, u),
                    R = p.createMorphAt(b, 9, 9, u);
                return p.insertBoundary(b, null), p.insertBoundary(b, 0), g(h, C, l, "if", [v(h, l, "like_enabled")], {}, e, null), g(h, f, l, "if", [v(h, l, "revine_enabled")], {}, t, null), g(h, F, l, "if", [v(h, l, "twitter_enabled")], {}, a, null), g(h, N, l, "if", [v(h, l, "facebook_enabled")], {}, n, null), g(h, T, l, "if", [v(h, l, "email_enabled")], {}, r, null), g(h, x, l, "if", [v(h, l, "tumblr_enabled")], {}, i, null), g(h, A, l, "if", [v(h, l, "stumbleupon_enabled")], {}, d, null), g(h, k, l, "if", [v(h, l, "view_enabled")], {}, s, null), g(h, E, l, "if", [v(h, l, "vm_enabled")], {}, c, null), g(h, R, l, "if", [v(h, l, "embed_enabled")], {}, o, null), b
            }
        }
    }())
}), define("vine-ember/templates/components/share-widgets", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createElement("span"),
                    n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("a");
                e.setAttribute(n, "class", "twitter-share-button"), e.setAttribute(n, "data-lang", "en");
                var r = e.createTextNode("Tweet");
                e.appendChild(n, r), e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n), e.appendChild(t, a);
                var a = e.createTextNode("\n");
                e.appendChild(t, a);
                var a = e.createElement("div");
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a), t
            },
            render: function (e, t, a) {
                var n = t.dom,
                    r = t.hooks,
                    i = r.element,
                    d = r.get;
                n.detectNamespace(a);
                var s;
                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                var c = n.childAt(s, [0]),
                    o = n.childAt(c, [1]),
                    l = n.childAt(s, [2]);
                return i(t, c, e, "bind-attr", [], {
                    "class": "twitterInit::hidden :twitter-share"
                }), i(t, o, e, "bind-attr", [], {
                    href: d(t, e, "finalTweetUrl"),
                    "data-count": d(t, e, "tweetLayout"),
                    "data-text": d(t, e, "tweetText")
                }), i(t, l, e, "bind-attr", [], {
                    "class": ":fb-share-button fbInit::hidden",
                    "data-href": d(t, e, "finalFbUrl"),
                    "data-type": d(t, e, "fbLayout")
                }), s
            }
        }
    }())
}), define("vine-ember/templates/components/suspension-sidebar", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        var e = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("  ");
                        e.appendChild(t, a);
                        var a = e.createElement("span");
                        e.setAttribute(a, "id", "suspension-notification-bar");
                        var n = e.createTextNode("\n    ");
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        e.appendChild(a, n);
                        var n = e.createTextNode("\n    ");
                        e.appendChild(a, n);
                        var n = e.createElement("h4"),
                            r = e.createTextNode("Your account is currently suspended.");
                        e.appendChild(n, r), e.appendChild(a, n);
                        var n = e.createTextNode("\n    ");
                        e.appendChild(a, n);
                        var n = e.createElement("p"),
                            r = e.createTextNode("\n      Please review the ");
                        e.appendChild(n, r);
                        var r = e.createElement("a");
                        e.setAttribute(r, "href", "/rules"), e.setAttribute(r, "target", "_blank");
                        var i = e.createTextNode("Vine Rules");
                        e.appendChild(r, i), e.appendChild(n, r);
                        var r = e.createTextNode("\n      and the ");
                        e.appendChild(n, r);
                        var r = e.createElement("a");
                        e.setAttribute(r, "href", "/terms"), e.setAttribute(r, "target", "_blank");
                        var i = e.createTextNode("terms of service");
                        e.appendChild(r, i), e.appendChild(n, r);
                        var r = e.createTextNode(" to ensure you are up-to-date with our current\n      content policies.\n    ");
                        e.appendChild(n, r), e.appendChild(a, n);
                        var n = e.createTextNode("\n\n    ");
                        e.appendChild(a, n);
                        var n = e.createElement("p"),
                            r = e.createTextNode("\n      In order to release your account from suspension, you must remove violating content by\n      clicking [");
                        e.appendChild(n, r);
                        var r = e.createComment("");
                        e.appendChild(n, r);
                        var r = e.createTextNode("] and then ");
                        e.appendChild(n, r);
                        var r = e.createElement("strong"),
                            i = e.createTextNode("Delete");
                        e.appendChild(r, i), e.appendChild(n, r);
                        var r = e.createTextNode(".\n    ");
                        e.appendChild(n, r), e.appendChild(a, n);
                        var n = e.createTextNode("\n\n    ");
                        e.appendChild(a, n);
                        var n = e.createElement("p"),
                            r = e.createTextNode("\n      If you would like to save your content before deleting, right click on a post and select\n      ");
                        e.appendChild(n, r);
                        var r = e.createElement("strong"),
                            i = e.createTextNode("Save Video As.");
                        e.appendChild(r, i), e.appendChild(n, r);
                        var r = e.createTextNode("\n    ");
                        e.appendChild(n, r), e.appendChild(a, n);
                        var n = e.createTextNode("\n\n    ");
                        e.appendChild(a, n);
                        var n = e.createElement("p"),
                            r = e.createTextNode("\n      Please note that failure to take appropriate action or future violations may result in acacount suspension.\n    ");
                        e.appendChild(n, r), e.appendChild(a, n);
                        var n = e.createTextNode("\n\n    ");
                        e.appendChild(a, n);
                        var n = e.createElement("p");
                        e.setAttribute(n, "class", "esc-checkbox");
                        var r = e.createTextNode("\n      ");
                        e.appendChild(n, r);
                        var r = e.createComment("");
                        e.appendChild(n, r);
                        var r = e.createTextNode(" I confirm that my account is now in compliance with Vine's\n      ");
                        e.appendChild(n, r);
                        var r = e.createElement("a");
                        e.setAttribute(r, "href", "/rules"), e.setAttribute(r, "target", "_blank");
                        var i = e.createTextNode("current content policy");
                        e.appendChild(r, i), e.appendChild(n, r);
                        var r = e.createTextNode("\n    ");
                        e.appendChild(n, r), e.appendChild(a, n);
                        var n = e.createTextNode("\n\n  ");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n  ");
                        e.appendChild(t, a);
                        var a = e.createElement("button");
                        e.setAttribute(a, "class", "esc-policy");
                        var n = e.createTextNode("Restore Access");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.element,
                            d = r.inline,
                            s = r.get;
                        n.detectNamespace(a);
                        var c;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n), this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0), this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                        var o = n.childAt(c, [1]),
                            l = n.childAt(c, [3]),
                            h = n.createMorphAt(o, 1, 1),
                            u = n.createMorphAt(n.childAt(o, [7]), 1, 1),
                            p = n.createMorphAt(n.childAt(o, [13]), 1, 1);
                        return i(t, o, e, "bind-attr", [], {
                            "class": ":esc-policy"
                        }), d(t, h, e, "cdn-img", [], {
                            src: "images/user/alert_icon.svg",
                            width: "40",
                            height: "40",
                            "class": "alert"
                        }), d(t, u, e, "cdn-img", [], {
                            src: "images/post/more_actions_dark.svg",
                            width: "20",
                            height: "5"
                        }), d(t, p, e, "input", [], {
                            type: "checkbox",
                            checked: s(t, e, "confirmedCompliance")
                        }), i(t, l, e, "bind-attr", [], {
                            disabled: s(t, e, "restoreBtnDisabled")
                        }), i(t, l, e, "action", ["restoreAccess"], {}), c
                    }
                }
            }(),
            t = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("  ");
                        e.appendChild(t, a);
                        var a = e.createElement("span");
                        e.setAttribute(a, "id", "grace-notification-bar");
                        var n = e.createTextNode("\n    ");
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        e.appendChild(a, n);
                        var n = e.createTextNode("\n    ");
                        e.appendChild(a, n);
                        var n = e.createElement("h4"),
                            r = e.createTextNode("Your account is currently suspended.");
                        e.appendChild(n, r), e.appendChild(a, n);
                        var n = e.createTextNode("\n    ");
                        e.appendChild(a, n);
                        var n = e.createElement("p"),
                            r = e.createTextNode("\n      Please review the ");
                        e.appendChild(n, r);
                        var r = e.createElement("a");
                        e.setAttribute(r, "href", "/rules"), e.setAttribute(r, "target", "_blank");
                        var i = e.createTextNode("Vine rules");
                        e.appendChild(r, i), e.appendChild(n, r);
                        var r = e.createTextNode(" to make sure your account complies with our current content policies.\n    ");
                        e.appendChild(n, r), e.appendChild(a, n);
                        var n = e.createTextNode("\n\n    ");
                        e.appendChild(a, n);
                        var n = e.createElement("p"),
                            r = e.createTextNode("\n      In order to release your account from suspension, you must remove violating content by clicking [");
                        e.appendChild(n, r);
                        var r = e.createComment("");
                        e.appendChild(n, r);
                        var r = e.createTextNode("] and then ");
                        e.appendChild(n, r);
                        var r = e.createElement("strong"),
                            i = e.createTextNode("Delete");
                        e.appendChild(r, i), e.appendChild(n, r);
                        var r = e.createTextNode(". Profile pictures and revines must also be compliant with Vine's content policies.\n    ");
                        e.appendChild(n, r), e.appendChild(a, n);
                        var n = e.createTextNode("\n\n    ");
                        e.appendChild(a, n);
                        var n = e.createElement("p"),
                            r = e.createTextNode("\n      Further failure to adhere to these rules may result in permanent account suspension.\n    ");
                        e.appendChild(n, r), e.appendChild(a, n);
                        var n = e.createTextNode("\n\n    ");
                        e.appendChild(a, n);
                        var n = e.createElement("p");
                        e.setAttribute(n, "class", "esc-checkbox");
                        var r = e.createTextNode("\n      ");
                        e.appendChild(n, r);
                        var r = e.createComment("");
                        e.appendChild(n, r);
                        var r = e.createTextNode(" I confirm that my account is now in compliance with Vine's\n      ");
                        e.appendChild(n, r);
                        var r = e.createElement("a");
                        e.setAttribute(r, "href", "/rules"), e.setAttribute(r, "target", "_blank");
                        var i = e.createTextNode("current content policy");
                        e.appendChild(r, i), e.appendChild(n, r);
                        var r = e.createTextNode("\n    ");
                        e.appendChild(n, r), e.appendChild(a, n);
                        var n = e.createTextNode("\n  ");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n  ");
                        e.appendChild(t, a);
                        var a = e.createElement("button");
                        e.setAttribute(a, "class", "esc-policy");
                        var n = e.createTextNode("Restore Profile");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.element,
                            d = r.inline,
                            s = r.get;
                        n.detectNamespace(a);
                        var c;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n), this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0), this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                        var o = n.childAt(c, [1]),
                            l = n.childAt(c, [3]),
                            h = n.createMorphAt(o, 1, 1),
                            u = n.createMorphAt(n.childAt(o, [7]), 1, 1),
                            p = n.createMorphAt(n.childAt(o, [11]), 1, 1);
                        return i(t, o, e, "bind-attr", [], {
                            "class": ":esc-policy"
                        }), d(t, h, e, "cdn-img", [], {
                            src: "images/user/alert_icon.svg",
                            width: "40",
                            height: "40",
                            "class": "alert"
                        }), d(t, u, e, "cdn-img", [], {
                            src: "images/post/more_actions_dark.svg",
                            width: "20",
                            height: "5"
                        }), d(t, p, e, "input", [], {
                            type: "checkbox",
                            checked: s(t, e, "confirmedCompliance")
                        }), i(t, l, e, "bind-attr", [], {
                            disabled: s(t, e, "restoreBtnDisabled")
                        }), i(t, l, e, "action", ["markCompliant"], {}), c
                    }
                }
            }(),
            a = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("  ");
                        e.appendChild(t, a);
                        var a = e.createElement("h4"),
                            n = e.createTextNode("\n    Thank you!\n  ");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.element;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var s = n.childAt(d, [1]);
                        return i(t, s, e, "bind-attr", [], {
                            "class": ":esc-confirmation-message :esc-grace-message"
                        }), d
                    }
                }
            }(),
            n = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("  ");
                        e.appendChild(t, a);
                        var a = e.createElement("h4"),
                            n = e.createTextNode("\n     Your account is now un-suspended. Please note that further violations may result in permanent suspension.\n  ");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.element;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var s = n.childAt(d, [1]);
                        return i(t, s, e, "bind-attr", [], {
                            "class": ":esc-confirmation-message :esc-grace-message"
                        }), d
                    }
                }
            }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createComment("");
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                e.appendChild(t, a);
                var a = e.createComment("");
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                e.appendChild(t, a);
                var a = e.createComment("");
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                e.appendChild(t, a);
                var a = e.createComment("");
                return e.appendChild(t, a), t
            },
            render: function (r, i, d) {
                var s = i.dom,
                    c = i.hooks,
                    o = c.get,
                    l = c.block;
                s.detectNamespace(d);
                var h;
                i.useFragmentCache && s.canClone ? (null === this.cachedFragment && (h = this.build(s), this.hasRendered ? this.cachedFragment = h : this.hasRendered = !0), this.cachedFragment && (h = s.cloneNode(this.cachedFragment, !0))) : h = this.build(s);
                var u = s.createMorphAt(h, 0, 0, d),
                    p = s.createMorphAt(h, 2, 2, d),
                    m = s.createMorphAt(h, 4, 4, d),
                    v = s.createMorphAt(h, 6, 6, d);
                return s.insertBoundary(h, null), s.insertBoundary(h, 0), l(i, u, r, "if", [o(i, r, "session.suspended")], {}, e, null), l(i, p, r, "if", [o(i, r, "session.isEscUser")], {}, t, null), l(i, m, r, "if", [o(i, r, "showNormalAccessMessage")], {}, a, null), l(i, v, r, "if", [o(i, r, "showUnsuspensionMessage")], {}, n, null), h
            }
        }
    }())
}), define("vine-ember/templates/components/timeline-header", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        var e = function () {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null,
                hasRendered: !1,
                build: function (e) {
                    var t = e.createDocumentFragment(),
                        a = e.createTextNode("  ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "id", "background-image-container"), e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a), t
                },
                render: function (e, t, a) {
                    var n = t.dom,
                        r = t.hooks,
                        i = r.get,
                        d = r.element;
                    n.detectNamespace(a);
                    var s;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                    var c = n.childAt(s, [1]);
                    return d(t, c, e, "bind-attr", [], {
                        style: i(t, e, "model.backgroundImageStyle")
                    }), s
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createComment("");
                e.appendChild(t, a);
                var a = e.createElement("div");
                e.setAttribute(a, "class", "timeline-header-content");
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n), e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a), t
            },
            render: function (t, a, n) {
                var r = a.dom,
                    i = a.hooks,
                    d = i.get,
                    s = i.block,
                    c = i.element,
                    o = i.content;
                r.detectNamespace(n);
                var l;
                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (l = this.build(r), this.hasRendered ? this.cachedFragment = l : this.hasRendered = !0), this.cachedFragment && (l = r.cloneNode(this.cachedFragment, !0))) : l = this.build(r);
                var h = r.childAt(l, [1]),
                    u = r.createMorphAt(l, 0, 0, n),
                    p = r.createMorphAt(h, 1, 1);
                return r.insertBoundary(l, 0), s(a, u, t, "if", [d(a, t, "model.backgroundImageStyle")], {}, e, null), c(a, h, t, "bind-attr", [], {
                    style: d(a, t, "headerContentStyle")
                }), o(a, p, t, "yield"), l
            }
        }
    }())
}), define("vine-ember/templates/components/timeline-sidebar", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        var e = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createComment("");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.get,
                            d = r.inline;
                        n.detectNamespace(a);
                        var s;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n),
                            this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                        var c = n.createMorphAt(s, 0, 0, a);
                        return n.insertBoundary(s, null), n.insertBoundary(s, 0), d(t, c, e, "secure-img", [], {
                            src: i(t, e, "options.iconUrl")
                        }), s
                    }
                }
            }(),
            t = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("      ");
                        e.appendChild(t, a);
                        var a = e.createElement("h5"),
                            n = e.createComment("");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.get,
                            d = r.inline;
                        n.detectNamespace(a);
                        var s;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                        var c = n.createMorphAt(n.childAt(s, [1]), 0, 0);
                        return d(t, c, e, "max-count", [i(t, e, "options.totalPosts")], {
                            max: 499,
                            display: 500,
                            unit: "Post"
                        }), s
                    }
                }
            }(),
            a = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("      ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.get,
                            d = r.inline;
                        n.detectNamespace(a);
                        var s;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                        var c = n.createMorphAt(s, 1, 1, a);
                        return d(t, c, e, "view-mode-toggles", [], {
                            mode: i(t, e, "mode"),
                            hasGridMode: i(t, e, "hasGridMode")
                        }), s
                    }
                }
            }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createElement("div"),
                    n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("div");
                e.setAttribute(n, "class", "sidebar-container");
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("div");
                e.setAttribute(r, "class", "icon");
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createComment("");
                e.appendChild(r, i);
                var i = e.createTextNode("\n    ");
                e.appendChild(r, i), e.appendChild(n, r);
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("h2"),
                    i = e.createComment("");
                e.appendChild(r, i), e.appendChild(n, r);
                var r = e.createTextNode("\n");
                e.appendChild(n, r);
                var r = e.createComment("");
                e.appendChild(n, r);
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createComment("");
                e.appendChild(n, r);
                var r = e.createTextNode("\n\n");
                e.appendChild(n, r);
                var r = e.createComment("");
                e.appendChild(n, r);
                var r = e.createTextNode("  ");
                e.appendChild(n, r), e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n), e.appendChild(t, a);
                var a = e.createTextNode("\n");
                e.appendChild(t, a);
                var a = e.createElement("div");
                e.setAttribute(a, "class", "timeline"), e.appendChild(t, a);
                var a = e.createTextNode("\n");
                e.appendChild(t, a);
                var a = e.createElement("div");
                e.setAttribute(a, "class", "padding"), e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a), t
            },
            render: function (n, r, i) {
                var d = r.dom,
                    s = r.hooks,
                    c = s.element,
                    o = s.get,
                    l = s.block,
                    h = s.content;
                d.detectNamespace(i);
                var u;
                r.useFragmentCache && d.canClone ? (null === this.cachedFragment && (u = this.build(d), this.hasRendered ? this.cachedFragment = u : this.hasRendered = !0), this.cachedFragment && (u = d.cloneNode(this.cachedFragment, !0))) : u = this.build(d);
                var p = d.childAt(u, [0]),
                    m = d.childAt(p, [1]),
                    v = d.childAt(m, [1]),
                    g = d.createMorphAt(v, 1, 1),
                    b = d.createMorphAt(d.childAt(m, [3]), 0, 0),
                    C = d.createMorphAt(m, 5, 5),
                    f = d.createMorphAt(m, 7, 7),
                    F = d.createMorphAt(m, 9, 9);
                return c(r, p, n, "bind-attr", [], {
                    "class": ":sidebar options.cssClass :sidebar-color-block"
                }), c(r, p, n, "bind-attr", [], {
                    style: o(r, n, "mobileStyle")
                }), c(r, v, n, "bind-attr", [], {
                    style: o(r, n, "options.iconStyle")
                }), c(r, v, n, "action", ["scrollToTop"], {}), l(r, g, n, "if", [o(r, n, "options.iconUrl")], {}, e, null), h(r, b, n, "title"), l(r, C, n, "if", [o(r, n, "options.totalPosts")], {}, t, null), h(r, f, n, "yield"), l(r, F, n, "unless", [o(r, n, "hideToggles")], {}, a, null), u
            }
        }
    }())
}), define("vine-ember/templates/components/tv-link", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        var e = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment();
                        return t
                    },
                    render: function (e, t, a) {
                        var n = t.dom;
                        n.detectNamespace(a);
                        var r;
                        return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n), this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0), this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n), r
                    }
                }
            }(),
            t = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createComment("");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.content;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var s = n.createMorphAt(d, 0, 0, a);
                        return n.insertBoundary(d, null), n.insertBoundary(d, 0), i(t, s, e, "text"), d
                    }
                }
            }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createComment("");
                e.appendChild(t, a);
                var a = e.createComment("");
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a), t
            },
            render: function (a, n, r) {
                var i = n.dom,
                    d = n.hooks,
                    s = d.subexpr,
                    c = d.get,
                    o = d.block;
                i.detectNamespace(r);
                var l;
                n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (l = this.build(i), this.hasRendered ? this.cachedFragment = l : this.hasRendered = !0), this.cachedFragment && (l = i.cloneNode(this.cachedFragment, !0))) : l = this.build(i);
                var h = i.createMorphAt(l, 0, 0, r),
                    u = i.createMorphAt(l, 1, 1, r);
                return i.insertBoundary(l, 0), o(n, h, a, "link-to", [c(n, a, "route"), c(n, a, "routeParam"), s(n, a, "query-params", [], {
                    mode: "tv"
                })], {
                    "class": "tv-route-link icon-fullscreen"
                }, e, null), o(n, u, a, "link-to", [c(n, a, "route"), c(n, a, "routeParam")], {}, t, null), l
            }
        }
    }())
}), define("vine-ember/templates/components/user-info", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        var e = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("  ");
                        e.appendChild(t, a);
                        var a = e.createElement("div");
                        e.setAttribute(a, "class", "avatar-new");
                        var n = e.createTextNode("\n    ");
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        e.appendChild(a, n);
                        var n = e.createTextNode("\n  ");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createElement("div");
                        e.setAttribute(a, "class", "username");
                        var n = e.createTextNode("\n    ");
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        e.appendChild(a, n);
                        var n = e.createTextNode("\n  ");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.get,
                            d = r.inline,
                            s = r.element;
                        n.detectNamespace(a);
                        var c;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n), this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0), this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                        var o = n.childAt(c, [2]),
                            l = n.createMorphAt(n.childAt(c, [1]), 1, 1),
                            h = n.createMorphAt(o, 1, 1);
                        return d(t, l, e, "secure-img", [], {
                            src: i(t, e, "data.avatarUrl")
                        }), s(t, o, e, "bind-attr", [], {
                            style: i(t, e, "textColorStyle")
                        }), d(t, h, e, "replace-emoji", [i(t, e, "data.username")], {}), c
                    }
                }
            }(),
            t = function () {
                var e = function () {
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createTextNode("      ");
                                e.appendChild(t, a);
                                var a = e.createComment("");
                                e.appendChild(t, a);
                                var a = e.createTextNode("\n");
                                return e.appendChild(t, a), t
                            },
                            render: function (e, t, a) {
                                var n = t.dom,
                                    r = t.hooks,
                                    i = r.get,
                                    d = r.inline;
                                n.detectNamespace(a);
                                var s;
                                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                                var c = n.createMorphAt(s, 1, 1, a);
                                return d(t, c, e, "secure-img", [], {
                                    src: i(t, e, "data.avatarUrl")
                                }), s
                            }
                        }
                    }(),
                    t = function () {
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createTextNode("      ");
                                e.appendChild(t, a);
                                var a = e.createComment("");
                                e.appendChild(t, a);
                                var a = e.createTextNode("\n    ");
                                return e.appendChild(t, a), t
                            },
                            render: function (e, t, a) {
                                var n = t.dom,
                                    r = t.hooks,
                                    i = r.get,
                                    d = r.inline;
                                n.detectNamespace(a);
                                var s;
                                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                                var c = n.createMorphAt(s, 1, 1, a);
                                return d(t, c, e, "replace-emoji", [i(t, e, "data.username")], {}), s
                            }
                        }
                    }(),
                    a = function () {
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createElement("span");
                                return e.setAttribute(a, "class", "icon-verified"), e.appendChild(t, a), t
                            },
                            render: function (e, t, a) {
                                var n = t.dom;
                                n.detectNamespace(a);
                                var r;
                                return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n), this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0), this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n), r
                            }
                        }
                    }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("  ");
                        e.appendChild(t, a);
                        var a = e.createElement("div");
                        e.setAttribute(a, "class", "avatar-new");
                        var n = e.createTextNode("\n");
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        e.appendChild(a, n);
                        var n = e.createTextNode("  ");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createElement("div");
                        e.setAttribute(a, "class", "username");
                        var n = e.createTextNode("\n");
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        e.appendChild(a, n);
                        var n = e.createTextNode("\n  ");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (n, r, i) {
                        var d = r.dom,
                            s = r.hooks,
                            c = s.get,
                            o = s.block,
                            l = s.element;
                        d.detectNamespace(i);
                        var h;
                        r.useFragmentCache && d.canClone ? (null === this.cachedFragment && (h = this.build(d), this.hasRendered ? this.cachedFragment = h : this.hasRendered = !0), this.cachedFragment && (h = d.cloneNode(this.cachedFragment, !0))) : h = this.build(d);
                        var u = d.childAt(h, [2]),
                            p = d.createMorphAt(d.childAt(h, [1]), 1, 1),
                            m = d.createMorphAt(u, 1, 1),
                            v = d.createMorphAt(u, 2, 2);
                        return o(r, p, n, "link-user", [], {
                            user: c(r, n, "data")
                        }, e, null), l(r, u, n, "bind-attr", [], {
                            style: c(r, n, "textColorStyle")
                        }), o(r, m, n, "link-user", [], {
                            user: c(r, n, "data")
                        }, t, null), o(r, v, n, "if", [c(r, n, "data.verified")], {}, a, null), h
                    }
                }
            }(),
            a = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("  ");
                        e.appendChild(t, a);
                        var a = e.createElement("div");
                        e.setAttribute(a, "class", "post-metadata");
                        var n = e.createTextNode("\n    ");
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        e.appendChild(a, n);
                        var n = e.createTextNode("\n  ");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.inline;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var s = n.createMorphAt(n.childAt(d, [1]), 1, 1);
                        return i(t, s, e, "partial", ["time-and-location"], {}), d
                    }
                }
            }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createComment("");
                e.appendChild(t, a);
                var a = e.createComment("");
                return e.appendChild(t, a), t
            },
            render: function (n, r, i) {
                var d = r.dom,
                    s = r.hooks,
                    c = s.get,
                    o = s.block;
                d.detectNamespace(i);
                var l;
                r.useFragmentCache && d.canClone ? (null === this.cachedFragment && (l = this.build(d), this.hasRendered ? this.cachedFragment = l : this.hasRendered = !0), this.cachedFragment && (l = d.cloneNode(this.cachedFragment, !0))) : l = this.build(d);
                var h = d.createMorphAt(l, 0, 0, i),
                    u = d.createMorphAt(l, 1, 1, i);
                return d.insertBoundary(l, null), d.insertBoundary(l, 0), o(r, h, n, "if", [c(r, n, "delinkify")], {}, e, t), o(r, u, n, "with", [c(r, n, "data")], {}, a, null), l
            }
        }
    }())
}), define("vine-ember/templates/components/view-mode-toggles", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        var e = function () {
                var e = function () {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null,
                        hasRendered: !1,
                        build: function (e) {
                            var t = e.createDocumentFragment(),
                                a = e.createTextNode("    ");
                            e.appendChild(t, a);
                            var a = e.createElement("i");
                            e.setAttribute(a, "class", "icon-list"), e.setAttribute(a, "title", "List mode"), e.appendChild(t, a);
                            var a = e.createTextNode("\n");
                            return e.appendChild(t, a), t
                        },
                        render: function (e, t, a) {
                            var n = t.dom,
                                r = t.hooks,
                                i = r.element;
                            n.detectNamespace(a);
                            var d;
                            t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                            var s = n.childAt(d, [1]);
                            return i(t, s, e, "action", ["trackViewMode", "list"], {}), d
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createComment("");
                        return e.appendChild(t, a), t
                    },
                    render: function (t, a, n) {
                        var r = a.dom,
                            i = a.hooks,
                            d = i.subexpr,
                            s = i.block;
                        r.detectNamespace(n);
                        var c;
                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r), this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0), this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                        var o = r.createMorphAt(c, 0, 0, n);
                        return r.insertBoundary(c, null), r.insertBoundary(c, 0), s(a, o, t, "link-to", [d(a, t, "query-params", [], {
                            mode: "list"
                        })], {}, e, null), c
                    }
                }
            }(),
            t = function () {
                var e = function () {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null,
                        hasRendered: !1,
                        build: function (e) {
                            var t = e.createDocumentFragment(),
                                a = e.createTextNode("    ");
                            e.appendChild(t, a);
                            var a = e.createElement("i");
                            e.setAttribute(a, "class", "icon-grid"), e.setAttribute(a, "title", "Grid mode"), e.appendChild(t, a);
                            var a = e.createTextNode("\n");
                            return e.appendChild(t, a), t
                        },
                        render: function (e, t, a) {
                            var n = t.dom,
                                r = t.hooks,
                                i = r.element;
                            n.detectNamespace(a);
                            var d;
                            t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                            var s = n.childAt(d, [1]);
                            return i(t, s, e, "action", ["trackViewMode", "grid"], {}), d
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createComment("");
                        return e.appendChild(t, a), t
                    },
                    render: function (t, a, n) {
                        var r = a.dom,
                            i = a.hooks,
                            d = i.subexpr,
                            s = i.block;
                        r.detectNamespace(n);
                        var c;
                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r), this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0), this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                        var o = r.createMorphAt(c, 0, 0, n);
                        return r.insertBoundary(c, null), r.insertBoundary(c, 0), s(a, o, t, "link-to", [d(a, t, "query-params", [], {
                            mode: "grid"
                        })], {}, e, null), c
                    }
                }
            }(),
            a = function () {
                var e = function () {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null,
                        hasRendered: !1,
                        build: function (e) {
                            var t = e.createDocumentFragment(),
                                a = e.createTextNode("    ");
                            e.appendChild(t, a);
                            var a = e.createElement("i");
                            e.setAttribute(a, "class", "icon-fullscreen"), e.setAttribute(a, "title", "TV mode"), e.appendChild(t, a);
                            var a = e.createTextNode("\n");
                            return e.appendChild(t, a), t
                        },
                        render: function (e, t, a) {
                            var n = t.dom,
                                r = t.hooks,
                                i = r.element;
                            n.detectNamespace(a);
                            var d;
                            t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                            var s = n.childAt(d, [1]);
                            return i(t, s, e, "action", ["trackViewMode", "tv"], {}), d
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createComment("");
                        return e.appendChild(t, a), t
                    },
                    render: function (t, a, n) {
                        var r = a.dom,
                            i = a.hooks,
                            d = i.subexpr,
                            s = i.block;
                        r.detectNamespace(n);
                        var c;
                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r), this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0), this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                        var o = r.createMorphAt(c, 0, 0, n);
                        return r.insertBoundary(c, null), r.insertBoundary(c, 0), s(a, o, t, "link-to", [d(a, t, "query-params", [], {
                            mode: "tv"
                        })], {}, e, null), c
                    }
                }
            }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createComment("");
                e.appendChild(t, a);
                var a = e.createComment("");
                e.appendChild(t, a);
                var a = e.createComment("");
                return e.appendChild(t, a), t
            },
            render: function (n, r, i) {
                var d = r.dom,
                    s = r.hooks,
                    c = s.get,
                    o = s.block;
                d.detectNamespace(i);
                var l;
                r.useFragmentCache && d.canClone ? (null === this.cachedFragment && (l = this.build(d), this.hasRendered ? this.cachedFragment = l : this.hasRendered = !0), this.cachedFragment && (l = d.cloneNode(this.cachedFragment, !0))) : l = this.build(d);
                var h = d.createMorphAt(l, 0, 0, i),
                    u = d.createMorphAt(l, 1, 1, i),
                    p = d.createMorphAt(l, 2, 2, i);
                return d.insertBoundary(l, null), d.insertBoundary(l, 0), o(r, h, n, "if", [c(r, n, "showListMode")], {}, e, null), o(r, u, n, "if", [c(r, n, "showGridMode")], {}, t, null), o(r, p, n, "if", [c(r, n, "showTvMode")], {}, a, null), l
            }
        }
    }())
}), define("vine-ember/templates/confirm-email", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        var e = function () {
                var e = function () {
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createTextNode("        ");
                                e.appendChild(t, a);
                                var a = e.createElement("div");
                                e.setAttribute(a, "class", "message");
                                var n = e.createComment("");
                                e.appendChild(a, n), e.appendChild(t, a);
                                var a = e.createTextNode("\n");
                                return e.appendChild(t, a), t
                            },
                            render: function (e, t, a) {
                                var n = t.dom,
                                    r = t.hooks,
                                    i = r.content;
                                n.detectNamespace(a);
                                var d;
                                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                                var s = n.createMorphAt(n.childAt(d, [1]), 0, 0);
                                return i(t, s, e, "error.error"), d
                            }
                        }
                    }(),
                    t = function () {
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createTextNode("        ");
                                e.appendChild(t, a);
                                var a = e.createElement("div");
                                e.setAttribute(a, "class", "message");
                                var n = e.createTextNode("Oops.  Looks like something went wrong.");
                                e.appendChild(a, n), e.appendChild(t, a);
                                var a = e.createTextNode("\n");
                                return e.appendChild(t, a), t
                            },
                            render: function (e, t, a) {
                                var n = t.dom;
                                n.detectNamespace(a);
                                var r;
                                return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n), this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0), this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n), r
                            }
                        }
                    }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("      ");
                        e.appendChild(t, a);
                        var a = e.createElement("div");
                        e.setAttribute(a, "class", "icon-frowny"), e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("      ");
                        e.appendChild(t, a);
                        var a = e.createElement("button"),
                            n = e.createTextNode("Resend Link");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (a, n, r) {
                        var i = n.dom,
                            d = n.hooks,
                            s = d.get,
                            c = d.block,
                            o = d.element;
                        i.detectNamespace(r);
                        var l;
                        n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (l = this.build(i), this.hasRendered ? this.cachedFragment = l : this.hasRendered = !0), this.cachedFragment && (l = i.cloneNode(this.cachedFragment, !0))) : l = this.build(i);
                        var h = i.childAt(l, [5]),
                            u = i.createMorphAt(l, 3, 3, r);
                        return c(n, u, a, "if", [s(n, a, "error.code")], {}, e, t), o(n, h, a, "action", ["resendEmail"], {}), l
                    }
                }
            }(),
            t = function () {
                var e = function () {
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createTextNode("          Please check your email for instructions.\n");
                                return e.appendChild(t, a), t
                            },
                            render: function (e, t, a) {
                                var n = t.dom;
                                n.detectNamespace(a);
                                var r;
                                return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n), this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0), this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n), r
                            }
                        }
                    }(),
                    t = function () {
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createTextNode("          Your email has been confirmed.\n");
                                return e.appendChild(t, a), t
                            },
                            render: function (e, t, a) {
                                var n = t.dom;
                                n.detectNamespace(a);
                                var r;
                                return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n), this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0), this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n), r
                            }
                        }
                    }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("      ");
                        e.appendChild(t, a);
                        var a = e.createElement("div");
                        e.setAttribute(a, "class", "icon-check_mark"), e.appendChild(t, a);
                        var a = e.createTextNode("\n      ");
                        e.appendChild(t, a);
                        var a = e.createElement("div");
                        e.setAttribute(a, "class", "message");
                        var n = e.createTextNode("\n");
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        e.appendChild(a, n);
                        var n = e.createTextNode("      ");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (a, n, r) {
                        var i = n.dom,
                            d = n.hooks,
                            s = d.get,
                            c = d.block;
                        i.detectNamespace(r);
                        var o;
                        n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (o = this.build(i), this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0), this.cachedFragment && (o = i.cloneNode(this.cachedFragment, !0))) : o = this.build(i);
                        var l = i.createMorphAt(i.childAt(o, [3]), 1, 1);
                        return c(n, l, a, "if", [s(n, a, "emailResent")], {}, e, t), o
                    }
                }
            }(),
            a = function () {
                var e = function () {
                        var e = function () {
                            return {
                                isHTMLBars: !0,
                                revision: "Ember@1.11.3",
                                blockParams: 0,
                                cachedFragment: null,
                                hasRendered: !1,
                                build: function (e) {
                                    var t = e.createDocumentFragment(),
                                        a = e.createElement("button"),
                                        n = e.createTextNode("Continue");
                                    return e.appendChild(a, n), e.appendChild(t, a), t
                                },
                                render: function (e, t, a) {
                                    var n = t.dom;
                                    n.detectNamespace(a);
                                    var r;
                                    return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n), this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0), this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n), r
                                }
                            }
                        }();
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createTextNode("        ");
                                e.appendChild(t, a);
                                var a = e.createComment("");
                                e.appendChild(t, a);
                                var a = e.createTextNode("\n");
                                return e.appendChild(t, a), t
                            },
                            render: function (t, a, n) {
                                var r = a.dom,
                                    i = a.hooks,
                                    d = i.block;
                                r.detectNamespace(n);
                                var s;
                                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                                var c = r.createMorphAt(s, 1, 1, n);
                                return d(a, c, t, "link-to", ["feed"], {}, e, null), s
                            }
                        }
                    }(),
                    t = function () {
                        var e = function () {
                            return {
                                isHTMLBars: !0,
                                revision: "Ember@1.11.3",
                                blockParams: 0,
                                cachedFragment: null,
                                hasRendered: !1,
                                build: function (e) {
                                    var t = e.createDocumentFragment(),
                                        a = e.createElement("button"),
                                        n = e.createTextNode("Continue");
                                    return e.appendChild(a, n), e.appendChild(t, a), t
                                },
                                render: function (e, t, a) {
                                    var n = t.dom;
                                    n.detectNamespace(a);
                                    var r;
                                    return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n), this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0), this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n), r
                                }
                            }
                        }();
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createTextNode("        ");
                                e.appendChild(t, a);
                                var a = e.createComment("");
                                e.appendChild(t, a);
                                var a = e.createTextNode("\n");
                                return e.appendChild(t, a), t
                            },
                            render: function (t, a, n) {
                                var r = a.dom,
                                    i = a.hooks,
                                    d = i.block;
                                r.detectNamespace(n);
                                var s;
                                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                                var c = r.createMorphAt(s, 1, 1, n);
                                return d(a, c, t, "link-to", ["index"], {}, e, null), s
                            }
                        }
                    }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createComment("");
                        return e.appendChild(t, a), t
                    },
                    render: function (a, n, r) {
                        var i = n.dom,
                            d = n.hooks,
                            s = d.get,
                            c = d.block;
                        i.detectNamespace(r);
                        var o;
                        n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (o = this.build(i), this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0), this.cachedFragment && (o = i.cloneNode(this.cachedFragment, !0))) : o = this.build(i);
                        var l = i.createMorphAt(o, 0, 0, r);
                        return i.insertBoundary(o, null), i.insertBoundary(o, 0), c(n, l, a, "if", [s(n, a, "session.isAuthenticated")], {}, e, t), o
                    }
                }
            }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createElement("div");
                e.setAttribute(a, "class", "login-page");
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("div");
                e.setAttribute(n, "class", "login-container");
                var r = e.createTextNode("\n");
                e.appendChild(n, r);
                var r = e.createComment("");
                e.appendChild(n, r);
                var r = e.createTextNode("\n");
                e.appendChild(n, r);
                var r = e.createComment("");
                e.appendChild(n, r);
                var r = e.createTextNode("  ");
                e.appendChild(n, r), e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n), e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a), t
            },
            render: function (n, r, i) {
                var d = r.dom,
                    s = r.hooks,
                    c = s.get,
                    o = s.block;
                d.detectNamespace(i);
                var l;
                r.useFragmentCache && d.canClone ? (null === this.cachedFragment && (l = this.build(d), this.hasRendered ? this.cachedFragment = l : this.hasRendered = !0), this.cachedFragment && (l = d.cloneNode(this.cachedFragment, !0))) : l = this.build(d);
                var h = d.childAt(l, [0, 1]),
                    u = d.createMorphAt(h, 1, 1),
                    p = d.createMorphAt(h, 3, 3);
                return o(r, u, n, "if", [c(r, n, "error")], {}, e, t), o(r, p, n, "if", [c(r, n, "showContinue")], {}, a, null), l
            }
        }
    }())
}), define("vine-ember/templates/current-user", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        var e = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("    ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.get,
                            d = r.inline;
                        n.detectNamespace(a);
                        var s;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                        var c = n.createMorphAt(s, 1, 1, a);
                        return d(t, c, e, "secure-img", [], {
                            src: i(t, e, "avatarUrl"),
                            "class": "avatar"
                        }), s
                    }
                }
            }(),
            t = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("View Profile");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom;
                        n.detectNamespace(a);
                        var r;
                        return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n), this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0), this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n), r
                    }
                }
            }(),
            a = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("Settings");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom;
                        n.detectNamespace(a);
                        var r;
                        return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n), this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0), this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n), r
                    }
                }
            }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createElement("div");
                e.setAttribute(a, "id", "current-user");
                var n = e.createTextNode("\n");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createTextNode("  ");
                e.appendChild(a, n);
                var n = e.createElement("ul");
                e.setAttribute(n, "class", "user menu");
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("li"),
                    i = e.createComment("");
                e.appendChild(r, i), e.appendChild(n, r);
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("li"),
                    i = e.createComment("");
                e.appendChild(r, i), e.appendChild(n, r);
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("li"),
                    i = e.createElement("a");
                e.setAttribute(i, "href", "#");
                var d = e.createTextNode("Logout");
                e.appendChild(i, d), e.appendChild(r, i), e.appendChild(n, r);
                var r = e.createTextNode("\n  ");
                e.appendChild(n, r), e.appendChild(a, n);
                var n = e.createTextNode("\n");
                return e.appendChild(a, n), e.appendChild(t, a), t
            },
            render: function (n, r, i) {
                var d = r.dom,
                    s = r.hooks,
                    c = s.get,
                    o = s.block,
                    l = s.element;
                d.detectNamespace(i);
                var h;
                r.useFragmentCache && d.canClone ? (null === this.cachedFragment && (h = this.build(d), this.hasRendered ? this.cachedFragment = h : this.hasRendered = !0), this.cachedFragment && (h = d.cloneNode(this.cachedFragment, !0))) : h = this.build(d);
                var u = d.childAt(h, [0]),
                    p = d.childAt(u, [3]),
                    m = d.childAt(p, [5, 0]),
                    v = d.createMorphAt(u, 1, 1),
                    g = d.createMorphAt(d.childAt(p, [1]), 0, 0),
                    b = d.createMorphAt(d.childAt(p, [3]), 0, 0);
                return o(r, v, n, "link-user", [], {
                    user: c(r, n, "this")
                }, e, null), o(r, g, n, "link-user", [], {
                    user: c(r, n, "this")
                }, t, null), o(r, b, n, "link-to", ["settings"], {}, a, null), l(r, m, n, "action", ["logout"], {}), h
            }
        }
    }())
}), define("vine-ember/templates/custom-url/reserve-form", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        var e = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("        ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.inline;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var s = n.createMorphAt(d, 1, 1, a);
                        return i(t, s, e, "cdn-img", [], {
                            "class": "confirm",
                            src: "images/check_mark.svg",
                            width: "16",
                            height: "16"
                        }), d
                    }
                }
            }(),
            t = function () {
                var e = function () {
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createTextNode("          ");
                                e.appendChild(t, a);
                                var a = e.createComment("");
                                e.appendChild(t, a);
                                var a = e.createTextNode("\n");
                                return e.appendChild(t, a), t
                            },
                            render: function (e, t, a) {
                                var n = t.dom,
                                    r = t.hooks,
                                    i = r.inline;
                                n.detectNamespace(a);
                                var d;
                                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                                var s = n.createMorphAt(d, 1, 1, a);
                                return i(t, s, e, "cdn-img", [], {
                                    "class": "confirm",
                                    src: "images/x_mark.svg",
                                    width: "16",
                                    height: "16"
                                }), d
                            }
                        }
                    }(),
                    t = function () {
                        var e = function () {
                            return {
                                isHTMLBars: !0,
                                revision: "Ember@1.11.3",
                                blockParams: 0,
                                cachedFragment: null,
                                hasRendered: !1,
                                build: function (e) {
                                    var t = e.createDocumentFragment(),
                                        a = e.createTextNode("            ");
                                    e.appendChild(t, a);
                                    var a = e.createComment("");
                                    e.appendChild(t, a);
                                    var a = e.createTextNode("\n");
                                    return e.appendChild(t, a), t
                                },
                                render: function (e, t, a) {
                                    var n = t.dom,
                                        r = t.hooks,
                                        i = r.inline;
                                    n.detectNamespace(a);
                                    var d;
                                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                                    var s = n.createMorphAt(d, 1, 1, a);
                                    return i(t, s, e, "cdn-img", [], {
                                        "class": "confirm loading",
                                        src: "images/loading_black-eba83ac14d1ce0d2c128e8f6e47076f6.gif",
                                        width: "25",
                                        height: "25"
                                    }), d
                                }
                            }
                        }();
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createComment("");
                                return e.appendChild(t, a), t
                            },
                            render: function (t, a, n) {
                                var r = a.dom,
                                    i = a.hooks,
                                    d = i.get,
                                    s = i.block;
                                r.detectNamespace(n);
                                var c;
                                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r), this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0), this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                                var o = r.createMorphAt(c, 0, 0, n);
                                return r.insertBoundary(c, null), r.insertBoundary(c, 0), s(a, o, t, "if", [d(a, t, "typing")], {}, e, null), c
                            }
                        }
                    }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createComment("");
                        return e.appendChild(t, a), t
                    },
                    render: function (a, n, r) {
                        var i = n.dom,
                            d = n.hooks,
                            s = d.get,
                            c = d.block;
                        i.detectNamespace(r);
                        var o;
                        n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (o = this.build(i), this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0), this.cachedFragment && (o = i.cloneNode(this.cachedFragment, !0))) : o = this.build(i);
                        var l = i.createMorphAt(o, 0, 0, r);
                        return i.insertBoundary(o, null), i.insertBoundary(o, 0), c(n, l, a, "if", [s(n, a, "error")], {}, e, t), o
                    }
                }
            }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createElement("div");
                e.setAttribute(a, "class", "url-reserve-container");
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("form");
                e.setAttribute(n, "id", "url-reserve");
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("div");
                e.setAttribute(r, "class", "confirm-container");
                var i = e.createTextNode("\n");
                e.appendChild(r, i);
                var i = e.createComment("");
                e.appendChild(r, i);
                var i = e.createTextNode("    ");
                e.appendChild(r, i), e.appendChild(n, r);
                var r = e.createTextNode("\n\n    ");
                e.appendChild(n, r);
                var r = e.createElement("div");
                e.setAttribute(r, "class", "url-container");
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("span");
                e.setAttribute(i, "class", "url-prefix");
                var d = e.createTextNode("https://web.archive.org/web/20150701150124/http://vine.co/");
                e.appendChild(i, d), e.appendChild(r, i);
                var i = e.createTextNode("\n\n      ");
                e.appendChild(r, i);
                var i = e.createComment("");
                e.appendChild(r, i);
                var i = e.createTextNode("\n    ");
                e.appendChild(r, i), e.appendChild(n, r);
                var r = e.createTextNode("\n\n    ");
                e.appendChild(n, r);
                var r = e.createElement("div");
                e.setAttribute(r, "class", "buttons");
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("button");
                e.setAttribute(i, "type", "submit");
                var d = e.createTextNode("Confirm");
                e.appendChild(i, d), e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("button");
                e.setAttribute(i, "class", "cancel"), e.setAttribute(i, "type", "button");
                var d = e.createTextNode("Cancel");
                e.appendChild(i, d), e.appendChild(r, i);
                var i = e.createTextNode("\n    ");
                e.appendChild(r, i), e.appendChild(n, r);
                var r = e.createTextNode("\n  ");
                e.appendChild(n, r), e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n), e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a), t
            },
            render: function (a, n, r) {
                var i = n.dom,
                    d = n.hooks,
                    s = d.element,
                    c = d.get,
                    o = d.block,
                    l = d.inline;
                i.detectNamespace(r);
                var h;
                n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (h = this.build(i), this.hasRendered ? this.cachedFragment = h : this.hasRendered = !0), this.cachedFragment && (h = i.cloneNode(this.cachedFragment, !0))) : h = this.build(i);
                var u = i.childAt(h, [0, 1]),
                    p = i.childAt(u, [5]),
                    m = i.childAt(p, [1]),
                    v = i.childAt(p, [3]),
                    g = i.createMorphAt(i.childAt(u, [1]), 1, 1),
                    b = i.createMorphAt(i.childAt(u, [3]), 3, 3);
                return s(n, u, a, "action", ["reserveUrl"], {
                    on: "submit"
                }), o(n, g, a, "if", [c(n, a, "available")], {}, e, t), l(n, b, a, "view", ["custom-url-input"], {
                    value: c(n, a, "url"),
                    errorState: c(n, a, "error"),
                    availableState: c(n, a, "available"),
                    reset: "resetMessages",
                    available: "urlAvailable",
                    error: "reserveUrlError",
                    typing: "setTyping"
                }), s(n, m, a, "bind-attr", [], {
                    disabed: c(n, a, "urlNotReady"),
                    "class": c(n, a, "urlNotReady")
                }), s(n, v, a, "action", ["hideUrlForm"], {}), h
            }
        }
    }())
}), define("vine-ember/templates/custom-url/reserve-messages", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        var e = function () {
                var e = function () {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null,
                        hasRendered: !1,
                        build: function (e) {
                            var t = e.createDocumentFragment(),
                                a = e.createTextNode("      ");
                            e.appendChild(t, a);
                            var a = e.createElement("h5");
                            e.setAttribute(a, "class", "error");
                            var n = e.createTextNode("Please see the ");
                            e.appendChild(a, n);
                            var n = e.createElement("a");
                            e.setAttribute(n, "href", "https://web.archive.org/web/20150701150124/https://support.twitter.com/articles/20170806-vine-profile-urls"), e.setAttribute(n, "target", "_blank");
                            var r = e.createTextNode("FAQ");
                            e.appendChild(n, r), e.appendChild(a, n);
                            var n = e.createTextNode(" for more information.");
                            e.appendChild(a, n), e.appendChild(t, a);
                            var a = e.createTextNode("\n");
                            return e.appendChild(t, a), t
                        },
                        render: function (e, t, a) {
                            var n = t.dom;
                            n.detectNamespace(a);
                            var r;
                            return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n), this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0), this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n), r
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("    ");
                        e.appendChild(t, a);
                        var a = e.createElement("h5");
                        e.setAttribute(a, "class", "error");
                        var n = e.createComment("");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        return e.appendChild(t, a), t
                    },
                    render: function (t, a, n) {
                        var r = a.dom,
                            i = a.hooks,
                            d = i.content,
                            s = i.get,
                            c = i.block;
                        r.detectNamespace(n);
                        var o;
                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (o = this.build(r), this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0), this.cachedFragment && (o = r.cloneNode(this.cachedFragment, !0))) : o = this.build(r);
                        var l = r.createMorphAt(r.childAt(o, [1]), 0, 0),
                            h = r.createMorphAt(o, 3, 3, n);
                        return r.insertBoundary(o, null), d(a, l, t, "error"), c(a, h, t, "if", [s(a, t, "needsFaq")], {}, e, null), o
                    }
                }
            }(),
            t = function () {
                var e = function () {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null,
                        hasRendered: !1,
                        build: function (e) {
                            var t = e.createDocumentFragment(),
                                a = e.createTextNode("      ");
                            e.appendChild(t, a);
                            var a = e.createElement("button");
                            e.setAttribute(a, "class", "suggestion");
                            var n = e.createComment("");
                            e.appendChild(a, n), e.appendChild(t, a);
                            var a = e.createTextNode("\n");
                            return e.appendChild(t, a), t
                        },
                        render: function (e, t, a) {
                            var n = t.dom,
                                r = t.hooks,
                                i = r.get,
                                d = r.element,
                                s = r.content;
                            n.detectNamespace(a);
                            var c;
                            t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n), this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0), this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                            var o = n.childAt(c, [1]),
                                l = n.createMorphAt(o, 0, 0);
                            return d(t, o, e, "action", ["loadSuggestion", i(t, e, "this")], {}), s(t, l, e, "this"), c
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("    ");
                        e.appendChild(t, a);
                        var a = e.createElement("h5"),
                            n = e.createTextNode("\n      The following URLs have been pre-reserved for you!");
                        e.appendChild(a, n);
                        var n = e.createElement("br");
                        e.appendChild(a, n);
                        var n = e.createTextNode("\n      Choose one below or try your own above.\n    ");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        return e.appendChild(t, a), t
                    },
                    render: function (t, a, n) {
                        var r = a.dom,
                            i = a.hooks,
                            d = i.get,
                            s = i.block;
                        r.detectNamespace(n);
                        var c;
                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r), this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0), this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                        var o = r.createMorphAt(c, 3, 3, n);
                        return r.insertBoundary(c, null), s(a, o, t, "each", [d(a, t, "reservations")], {}, e, null), c
                    }
                }
            }(),
            a = function () {
                var e = function () {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null,
                        hasRendered: !1,
                        build: function (e) {
                            var t = e.createDocumentFragment(),
                                a = e.createTextNode("      ");
                            e.appendChild(t, a);
                            var a = e.createElement("button");
                            e.setAttribute(a, "class", "suggestion");
                            var n = e.createComment("");
                            e.appendChild(a, n), e.appendChild(t, a);
                            var a = e.createTextNode("\n");
                            return e.appendChild(t, a), t
                        },
                        render: function (e, t, a) {
                            var n = t.dom,
                                r = t.hooks,
                                i = r.get,
                                d = r.element,
                                s = r.content;
                            n.detectNamespace(a);
                            var c;
                            t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n), this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0), this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                            var o = n.childAt(c, [1]),
                                l = n.createMorphAt(o, 0, 0);
                            return d(t, o, e, "action", ["loadSuggestion", i(t, e, "this")], {}), s(t, l, e, "this"), c
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createComment("");
                        return e.appendChild(t, a), t
                    },
                    render: function (t, a, n) {
                        var r = a.dom,
                            i = a.hooks,
                            d = i.get,
                            s = i.block;
                        r.detectNamespace(n);
                        var c;
                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r), this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0), this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                        var o = r.createMorphAt(c, 0, 0, n);
                        return r.insertBoundary(c, null), r.insertBoundary(c, 0), s(a, o, t, "each", [d(a, t, "suggestions")], {}, e, null), c
                    }
                }
            }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createElement("div");
                e.setAttribute(a, "class", "url-reserve-messages");
                var n = e.createTextNode("\n");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n);
                var n = e.createComment("");
                return e.appendChild(a, n), e.appendChild(t, a), t
            },
            render: function (n, r, i) {
                var d = r.dom,
                    s = r.hooks,
                    c = s.get,
                    o = s.block;
                d.detectNamespace(i);
                var l;
                r.useFragmentCache && d.canClone ? (null === this.cachedFragment && (l = this.build(d), this.hasRendered ? this.cachedFragment = l : this.hasRendered = !0), this.cachedFragment && (l = d.cloneNode(this.cachedFragment, !0))) : l = this.build(d);
                var h = d.childAt(l, [0]),
                    u = d.createMorphAt(h, 1, 1),
                    p = d.createMorphAt(h, 3, 3);
                return o(r, u, n, "if", [c(r, n, "error")], {}, e, null), o(r, p, n, "if", [c(r, n, "reservations")], {}, t, a), l
            }
        }
    }())
}), define("vine-ember/templates/error", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createComment("");
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                e.appendChild(t, a);
                var a = e.createElement("p"),
                    n = e.createTextNode("Uh oh! We’re having technical difficulties.");
                e.appendChild(a, n), e.appendChild(t, a);
                var a = e.createTextNode("\n\n");
                e.appendChild(t, a);
                var a = e.createElement("div");
                e.setAttribute(a, "class", "debug-info");
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n), e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a), t
            },
            render: function (e, t, a) {
                var n = t.dom,
                    r = t.hooks,
                    i = r.inline,
                    d = r.content;
                n.detectNamespace(a);
                var s;
                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                var c = n.createMorphAt(s, 0, 0, a),
                    o = n.createMorphAt(n.childAt(s, [4]), 1, 1);
                return n.insertBoundary(s, 0), i(t, c, e, "cdn-img", [], {
                    src: "images/frowny.svg",
                    width: "298",
                    height: "235"
                }), d(t, o, e, "content"), s
            }
        }
    }())
}), define("vine-ember/templates/explicit-content", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createElement("div");
                e.setAttribute(a, "class", "warning-overlay");
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("div");
                e.setAttribute(n, "class", "warning-content");
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("p");
                e.setAttribute(r, "class", "title");
                var i = e.createTextNode("Warning");
                e.appendChild(r, i), e.appendChild(n, r);
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("p");
                e.setAttribute(r, "class", "warning-text");
                var i = e.createTextNode("This post may contain sensitive content.");
                e.appendChild(r, i), e.appendChild(n, r);
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("button"),
                    i = e.createTextNode("View this post");
                e.appendChild(r, i), e.appendChild(n, r);
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("button");
                e.setAttribute(r, "class", "small");
                var i = e.createTextNode("View");
                e.appendChild(r, i), e.appendChild(n, r);
                var r = e.createTextNode("\n  ");
                e.appendChild(n, r), e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n), e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a), t
            },
            render: function (e, t, a) {
                var n = t.dom,
                    r = t.hooks,
                    i = r.get,
                    d = r.element;
                n.detectNamespace(a);
                var s;
                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                var c = n.childAt(s, [0, 1]),
                    o = n.childAt(c, [5]),
                    l = n.childAt(c, [7]);
                return d(t, o, e, "action", ["viewExplicit", i(t, e, "target")], {}), d(t, l, e, "action", ["viewExplicit", i(t, e, "target")], {}), s
            }
        }
    }())
}), define("vine-ember/templates/explore", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        var e = function () {
            var e = function () {
                    var e = function () {
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createTextNode("      ");
                                e.appendChild(t, a);
                                var a = e.createComment("");
                                e.appendChild(t, a);
                                var a = e.createTextNode("\n");
                                return e.appendChild(t, a), t
                            },
                            render: function (e, t, a) {
                                var n = t.dom,
                                    r = t.hooks,
                                    i = r.inline;
                                n.detectNamespace(a);
                                var d;
                                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                                var s = n.createMorphAt(d, 1, 1, a);
                                return i(t, s, e, "view", ["explore/pinned-channel"], {}), d
                            }
                        }
                    }();
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null,
                        hasRendered: !1,
                        build: function (e) {
                            var t = e.createDocumentFragment(),
                                a = e.createComment("");
                            return e.appendChild(t, a), t
                        },
                        render: function (t, a, n) {
                            var r = a.dom,
                                i = a.hooks,
                                d = i.get,
                                s = i.block;
                            r.detectNamespace(n);
                            var c;
                            a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r), this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0), this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                            var o = r.createMorphAt(c, 0, 0, n);
                            return r.insertBoundary(c, null), r.insertBoundary(c, 0), s(a, o, t, "module-block", [], {
                                tagName: "article",
                                className: "pinned-channel",
                                id: d(a, t, "channelIdAttr"),
                                rawIconClass: "channel-badge",
                                iconUrl: d(a, t, "channel.channelIconUrl"),
                                backgroundStyle: d(a, t, "channel.backgroundColorStyle"),
                                title: d(a, t, "channel.featuredTitle"),
                                route: d(a, t, "route"),
                                routeParams: d(a, t, "channel.vanityUrl")
                            }, e, null), c
                        }
                    }
                }(),
                t = function () {
                    var e = function () {
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createTextNode("      ");
                                e.appendChild(t, a);
                                var a = e.createComment("");
                                e.appendChild(t, a);
                                var a = e.createTextNode("\n");
                                return e.appendChild(t, a), t
                            },
                            render: function (e, t, a) {
                                var n = t.dom,
                                    r = t.hooks,
                                    i = r.inline;
                                n.detectNamespace(a);
                                var d;
                                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                                var s = n.createMorphAt(d, 1, 1, a);
                                return i(t, s, e, "partial", ["explore/featured-users"], {}), d
                            }
                        }
                    }();
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null,
                        hasRendered: !1,
                        build: function (e) {
                            var t = e.createDocumentFragment(),
                                a = e.createComment("");
                            return e.appendChild(t, a), t
                        },
                        render: function (t, a, n) {
                            var r = a.dom,
                                i = a.hooks,
                                d = i.block;
                            r.detectNamespace(n);
                            var s;
                            a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                            var c = r.createMorphAt(s, 0, 0, n);
                            return r.insertBoundary(s, null), r.insertBoundary(s, 0), d(a, c, t, "module-block", [], {
                                tagName: "article",
                                className: "featured-users",
                                icon: "profile",
                                title: "Featured Viners"
                            }, e, null), s
                        }
                    }
                }(),
                a = function () {
                    var e = function () {
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createTextNode("      ");
                                e.appendChild(t, a);
                                var a = e.createComment("");
                                e.appendChild(t, a);
                                var a = e.createTextNode("\n");
                                return e.appendChild(t, a), t
                            },
                            render: function (e, t, a) {
                                var n = t.dom,
                                    r = t.hooks,
                                    i = r.inline;
                                n.detectNamespace(a);
                                var d;
                                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                                var s = n.createMorphAt(d, 1, 1, a);
                                return i(t, s, e, "view", ["explore/posts/one"], {}), d
                            }
                        }
                    }();
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null,
                        hasRendered: !1,
                        build: function (e) {
                            var t = e.createDocumentFragment(),
                                a = e.createComment("");
                            return e.appendChild(t, a), t
                        },
                        render: function (t, a, n) {
                            var r = a.dom,
                                i = a.hooks,
                                d = i.block;
                            r.detectNamespace(n);
                            var s;
                            a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                            var c = r.createMorphAt(s, 0, 0, n);
                            return r.insertBoundary(s, null), r.insertBoundary(s, 0), d(a, c, t, "module-block", [], {
                                className: "one-up editors-pick",
                                route: "editors-picks",
                                rawIconClass: "channel-badge editors-pick",
                                title: "Editor's Pick"
                            }, e, null), s
                        }
                    }
                }(),
                n = function () {
                    var e = function () {
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createTextNode("      ");
                                e.appendChild(t, a);
                                var a = e.createComment("");
                                e.appendChild(t, a);
                                var a = e.createTextNode("\n");
                                return e.appendChild(t, a), t
                            },
                            render: function (e, t, a) {
                                var n = t.dom,
                                    r = t.hooks,
                                    i = r.inline;
                                n.detectNamespace(a);
                                var d;
                                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                                var s = n.createMorphAt(d, 1, 1, a);
                                return i(t, s, e, "view", ["explore/list"], {}), d
                            }
                        }
                    }();
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null,
                        hasRendered: !1,
                        build: function (e) {
                            var t = e.createDocumentFragment(),
                                a = e.createComment("");
                            return e.appendChild(t, a), t
                        },
                        render: function (t, a, n) {
                            var r = a.dom,
                                i = a.hooks,
                                d = i.get,
                                s = i.block;
                            r.detectNamespace(n);
                            var c;
                            a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r), this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0), this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                            var o = r.createMorphAt(c, 0, 0, n);
                            return r.insertBoundary(c, null), r.insertBoundary(c, 0), s(a, o, t, "module-block", [], {
                                className: "one-up list",
                                route: "list",
                                routeParams: d(a, t, "list.vanityUrl"),
                                title: "Vine Playlist"
                            }, e, null), c
                        }
                    }
                }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null,
                hasRendered: !1,
                build: function (e) {
                    var t = e.createDocumentFragment(),
                        a = e.createComment("");
                    e.appendChild(t, a);
                    var a = e.createComment("");
                    e.appendChild(t, a);
                    var a = e.createComment("");
                    e.appendChild(t, a);
                    var a = e.createComment("");
                    return e.appendChild(t, a), t
                },
                render: function (r, i, d) {
                    var s = i.dom,
                        c = i.hooks,
                        o = c.get,
                        l = c.block;
                    s.detectNamespace(d);
                    var h;
                    i.useFragmentCache && s.canClone ? (null === this.cachedFragment && (h = this.build(s), this.hasRendered ? this.cachedFragment = h : this.hasRendered = !0), this.cachedFragment && (h = s.cloneNode(this.cachedFragment, !0))) : h = this.build(s);
                    var u = s.createMorphAt(h, 0, 0, d),
                        p = s.createMorphAt(h, 1, 1, d),
                        m = s.createMorphAt(h, 2, 2, d),
                        v = s.createMorphAt(h, 3, 3, d);
                    return s.insertBoundary(h, null), s.insertBoundary(h, 0), l(i, u, r, "if", [o(i, r, "channel")], {}, e, null), l(i, p, r, "if", [o(i, r, "users")], {}, t, null), l(i, m, r, "if", [o(i, r, "postIdStr")], {}, a, null), l(i, v, r, "if", [o(i, r, "list")], {}, n, null), h
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createComment("");
                return e.appendChild(t, a), t
            },
            render: function (t, a, n) {
                var r = a.dom,
                    i = a.hooks,
                    d = i.block;
                r.detectNamespace(n);
                var s;
                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                var c = r.createMorphAt(s, 0, 0, n);
                return r.insertBoundary(s, null), r.insertBoundary(s, 0), d(a, c, t, "each", [], {}, e, null), s
            }
        }
    }())
}), define("vine-ember/templates/explore/channels", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        var e = function () {
            var e = function () {
                    var e = function () {
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createTextNode("        ");
                                e.appendChild(t, a);
                                var a = e.createComment("");
                                e.appendChild(t, a);
                                var a = e.createTextNode("\n");
                                return e.appendChild(t, a), t
                            },
                            render: function (e, t, a) {
                                var n = t.dom,
                                    r = t.hooks,
                                    i = r.get,
                                    d = r.inline;
                                n.detectNamespace(a);
                                var s;
                                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                                var c = n.createMorphAt(s, 1, 1, a);
                                return d(t, c, e, "channel-badge", [], {
                                    backgroundStyle: i(t, e, "backgroundColorStyle"),
                                    iconUrl: i(t, e, "channelIconUrl"),
                                    channel: i(t, e, "channel")
                                }), s
                            }
                        }
                    }();
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null,
                        hasRendered: !1,
                        build: function (e) {
                            var t = e.createDocumentFragment(),
                                a = e.createComment("");
                            return e.appendChild(t, a), t
                        },
                        render: function (t, a, n) {
                            var r = a.dom,
                                i = a.hooks,
                                d = i.get,
                                s = i.block;
                            r.detectNamespace(n);
                            var c;
                            a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r), this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0), this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                            var o = r.createMorphAt(c, 0, 0, n);
                            return r.insertBoundary(c, null), r.insertBoundary(c, 0), s(a, o, t, "link-to", ["list", d(a, t, "vanityUrl")], {}, e, null), c
                        }
                    }
                }(),
                t = function () {
                    var e = function () {
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createTextNode("        ");
                                e.appendChild(t, a);
                                var a = e.createComment("");
                                e.appendChild(t, a);
                                var a = e.createTextNode("\n");
                                return e.appendChild(t, a), t
                            },
                            render: function (e, t, a) {
                                var n = t.dom,
                                    r = t.hooks,
                                    i = r.get,
                                    d = r.inline;
                                n.detectNamespace(a);
                                var s;
                                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                                var c = n.createMorphAt(s, 1, 1, a);
                                return d(t, c, e, "channel-badge", [], {
                                    backgroundStyle: i(t, e, "backgroundColorStyle"),
                                    iconUrl: i(t, e, "channelIconUrl"),
                                    channel: i(t, e, "channel")
                                }), s
                            }
                        }
                    }();
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null,
                        hasRendered: !1,
                        build: function (e) {
                            var t = e.createDocumentFragment(),
                                a = e.createComment("");
                            return e.appendChild(t, a), t
                        },
                        render: function (t, a, n) {
                            var r = a.dom,
                                i = a.hooks,
                                d = i.get,
                                s = i.block;
                            r.detectNamespace(n);
                            var c;
                            a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r), this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0), this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                            var o = r.createMorphAt(c, 0, 0, n);
                            return r.insertBoundary(c, null), r.insertBoundary(c, 0), s(a, o, t, "link-to", ["channel", d(a, t, "vanityUrl")], {}, e, null), c
                        }
                    }
                }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null,
                hasRendered: !1,
                build: function (e) {
                    var t = e.createDocumentFragment(),
                        a = e.createComment("");
                    return e.appendChild(t, a), t
                },
                render: function (a, n, r) {
                    var i = n.dom,
                        d = n.hooks,
                        s = d.get,
                        c = d.block;
                    i.detectNamespace(r);
                    var o;
                    n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (o = this.build(i), this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0), this.cachedFragment && (o = i.cloneNode(this.cachedFragment, !0))) : o = this.build(i);
                    var l = i.createMorphAt(o, 0, 0, r);
                    return i.insertBoundary(o, null), i.insertBoundary(o, 0), c(n, l, a, "if", [s(n, a, "featured")], {}, e, t), o
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createElement("h3");
                e.setAttribute(a, "class", "channel-module-name module-title");
                var n = e.createTextNode("Channels");
                e.appendChild(a, n), e.appendChild(t, a);
                var a = e.createTextNode("\n");
                e.appendChild(t, a);
                var a = e.createElement("div");
                e.setAttribute(a, "class", "channels-container");
                var n = e.createTextNode("\n");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n), e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a), t
            },
            render: function (t, a, n) {
                var r = a.dom,
                    i = a.hooks,
                    d = i.block;
                r.detectNamespace(n);
                var s;
                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                var c = r.createMorphAt(r.childAt(s, [2]), 1, 1);
                return d(a, c, t, "each", [], {}, e, null), s
            }
        }
    }())
}), define("vine-ember/templates/explore/featured-users", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        var e = function () {
            var e = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("    ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.get,
                            d = r.inline;
                        n.detectNamespace(a);
                        var s;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                        var c = n.createMorphAt(s, 1, 1, a);
                        return d(t, c, e, "user-info", [], {
                            data: i(t, e, "this"),
                            cssClass: "user-info-hide-metadata"
                        }), s
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null,
                hasRendered: !1,
                build: function (e) {
                    var t = e.createDocumentFragment(),
                        a = e.createComment("");
                    return e.appendChild(t, a), t
                },
                render: function (t, a, n) {
                    var r = a.dom,
                        i = a.hooks,
                        d = i.get,
                        s = i.block;
                    r.detectNamespace(n);
                    var c;
                    a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r), this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0), this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                    var o = r.createMorphAt(c, 0, 0, n);
                    return r.insertBoundary(c, null), r.insertBoundary(c, 0), s(a, o, t, "user-hover", [], {
                        color: d(a, t, "backgroundColor"),
                        userId: d(a, t, "userIdStr")
                    }, e, null), c
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createComment("");
                return e.appendChild(t, a), t
            },
            render: function (t, a, n) {
                var r = a.dom,
                    i = a.hooks,
                    d = i.get,
                    s = i.block;
                r.detectNamespace(n);
                var c;
                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r), this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0), this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                var o = r.createMorphAt(c, 0, 0, n);
                return r.insertBoundary(c, null), r.insertBoundary(c, 0), s(a, o, t, "each", [d(a, t, "users")], {}, e, null), c
            }
        }
    }())
}), define("vine-ember/templates/explore/list", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        var e = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("  ");
                        e.appendChild(t, a);
                        var a = e.createElement("div");
                        e.setAttribute(a, "class", "posts-container grid");
                        var n = e.createTextNode("\n    ");
                        e.appendChild(a, n);
                        var n = e.createElement("div");
                        e.setAttribute(n, "class", "grid-container");
                        var r = e.createTextNode("\n      ");
                        e.appendChild(n, r);
                        var r = e.createComment("");
                        e.appendChild(n, r);
                        var r = e.createTextNode("\n    ");
                        e.appendChild(n, r), e.appendChild(a, n);
                        var n = e.createTextNode("\n  ");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.inline;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var s = n.createMorphAt(n.childAt(d, [1, 1]), 1, 1);
                        return i(t, s, e, "view", ["playlists/grid-list"], {}), d
                    }
                }
            }(),
            t = function () {
                var e = function () {
                    var e = function () {
                        var e = function () {
                                return {
                                    isHTMLBars: !0,
                                    revision: "Ember@1.11.3",
                                    blockParams: 0,
                                    cachedFragment: null,
                                    hasRendered: !1,
                                    build: function (e) {
                                        var t = e.createDocumentFragment(),
                                            a = e.createElement("h2");
                                        e.setAttribute(a, "class", "title");
                                        var n = e.createComment("");
                                        return e.appendChild(a, n), e.appendChild(t, a), t
                                    },
                                    render: function (e, t, a) {
                                        var n = t.dom,
                                            r = t.hooks,
                                            i = r.get,
                                            d = r.inline;
                                        n.detectNamespace(a);
                                        var s;
                                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                                        var c = n.createMorphAt(n.childAt(s, [0]), 0, 0);
                                        return d(t, c, e, "html-linebreak", [i(t, e, "list.title")], {}), s
                                    }
                                }
                            }(),
                            t = function () {
                                var e = function () {
                                    return {
                                        isHTMLBars: !0,
                                        revision: "Ember@1.11.3",
                                        blockParams: 0,
                                        cachedFragment: null,
                                        hasRendered: !1,
                                        build: function (e) {
                                            var t = e.createDocumentFragment(),
                                                a = e.createComment("");
                                            e.appendChild(t, a);
                                            var a = e.createComment("");
                                            return e.appendChild(t, a), t
                                        },
                                        render: function (e, t, a) {
                                            var n = t.dom,
                                                r = t.hooks,
                                                i = r.get,
                                                d = r.inline,
                                                s = r.content;
                                            n.detectNamespace(a);
                                            var c;
                                            t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n), this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0), this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                                            var o = n.createMorphAt(c, 0, 0, a),
                                                l = n.createMorphAt(c, 1, 1, a);
                                            return n.insertBoundary(c, null), n.insertBoundary(c, 0), d(t, o, e, "secure-img", [], {
                                                src: i(t, e, "avatarUrl"),
                                                "class": "avatar"
                                            }), s(t, l, e, "username"), c
                                        }
                                    }
                                }();
                                return {
                                    isHTMLBars: !0,
                                    revision: "Ember@1.11.3",
                                    blockParams: 0,
                                    cachedFragment: null,
                                    hasRendered: !1,
                                    build: function (e) {
                                        var t = e.createDocumentFragment(),
                                            a = e.createTextNode("          ");
                                        e.appendChild(t, a);
                                        var a = e.createElement("div");
                                        e.setAttribute(a, "class", "author");
                                        var n = e.createTextNode("\n            by");
                                        e.appendChild(a, n);
                                        var n = e.createComment("");
                                        e.appendChild(a, n);
                                        var n = e.createTextNode("\n          ");
                                        e.appendChild(a, n), e.appendChild(t, a);
                                        var a = e.createTextNode("\n");
                                        return e.appendChild(t, a), t
                                    },
                                    render: function (t, a, n) {
                                        var r = a.dom,
                                            i = a.hooks,
                                            d = i.get,
                                            s = i.block;
                                        r.detectNamespace(n);
                                        var c;
                                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r), this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0), this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                                        var o = r.createMorphAt(r.childAt(c, [1]), 1, 1);
                                        return s(a, o, t, "link-user", [], {
                                            user: d(a, t, "this")
                                        }, e, null), c
                                    }
                                }
                            }(),
                            a = function () {
                                return {
                                    isHTMLBars: !0,
                                    revision: "Ember@1.11.3",
                                    blockParams: 0,
                                    cachedFragment: null,
                                    hasRendered: !1,
                                    build: function (e) {
                                        var t = e.createDocumentFragment(),
                                            a = e.createTextNode("          ");
                                        e.appendChild(t, a);
                                        var a = e.createComment("");
                                        e.appendChild(t, a);
                                        var a = e.createTextNode("\n");
                                        return e.appendChild(t, a), t
                                    },
                                    render: function (e, t, a) {
                                        var n = t.dom,
                                            r = t.hooks,
                                            i = r.get,
                                            d = r.inline;
                                        n.detectNamespace(a);
                                        var s;
                                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                                        var c = n.createMorphAt(s, 1, 1, a);
                                        return d(t, c, e, "loop-count", [], {
                                            postId: i(t, e, "currentPost.postIdStr"),
                                            loops: i(t, e, "currentPost.loops"),
                                            postDate: i(t, e, "currentPost.created")
                                        }), s
                                    }
                                }
                            }();
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createTextNode("      ");
                                e.appendChild(t, a);
                                var a = e.createElement("div");
                                e.setAttribute(a, "class", "info");
                                var n = e.createTextNode("\n        ");
                                e.appendChild(a, n);
                                var n = e.createComment("");
                                e.appendChild(a, n);
                                var n = e.createTextNode("\n");
                                e.appendChild(a, n);
                                var n = e.createComment("");
                                e.appendChild(a, n);
                                var n = e.createTextNode("        ");
                                e.appendChild(a, n);
                                var n = e.createElement("div");
                                e.setAttribute(n, "class", "post-position");
                                var r = e.createComment("");
                                e.appendChild(n, r);
                                var r = e.createTextNode(" of ");
                                e.appendChild(n, r);
                                var r = e.createComment("");
                                e.appendChild(n, r), e.appendChild(a, n);
                                var n = e.createTextNode("\n        ");
                                e.appendChild(a, n);
                                var n = e.createElement("div");
                                e.setAttribute(n, "class", "post-actions");
                                var r = e.createTextNode("\n          ");
                                e.appendChild(n, r);
                                var r = e.createElement("button");
                                e.setAttribute(r, "class", "clear twitter");
                                var i = e.createTextNode("\n            ");
                                e.appendChild(r, i);
                                var i = e.createElement("span");
                                e.setAttribute(i, "class", "icon-twitter"), e.appendChild(r, i);
                                var i = e.createTextNode("\n          ");
                                e.appendChild(r, i), e.appendChild(n, r);
                                var r = e.createTextNode("\n          ");
                                e.appendChild(n, r);
                                var r = e.createElement("button");
                                e.setAttribute(r, "class", "clear facebook");
                                var i = e.createTextNode("\n            ");
                                e.appendChild(r, i);
                                var i = e.createElement("span");
                                e.setAttribute(i, "class", "icon-facebook"), e.appendChild(r, i);
                                var i = e.createTextNode("\n          ");
                                e.appendChild(r, i), e.appendChild(n, r);
                                var r = e.createTextNode("\n        ");
                                e.appendChild(n, r), e.appendChild(a, n);
                                var n = e.createTextNode("\n");
                                e.appendChild(a, n);
                                var n = e.createComment("");
                                e.appendChild(a, n);
                                var n = e.createTextNode("      ");
                                e.appendChild(a, n), e.appendChild(t, a);
                                var a = e.createTextNode("\n");
                                return e.appendChild(t, a), t
                            },
                            render: function (n, r, i) {
                                var d = r.dom,
                                    s = r.hooks,
                                    c = s.get,
                                    o = s.block,
                                    l = s.inline,
                                    h = s.element;
                                d.detectNamespace(i);
                                var u;
                                r.useFragmentCache && d.canClone ? (null === this.cachedFragment && (u = this.build(d), this.hasRendered ? this.cachedFragment = u : this.hasRendered = !0), this.cachedFragment && (u = d.cloneNode(this.cachedFragment, !0))) : u = this.build(d);
                                var p = d.childAt(u, [1]),
                                    m = d.childAt(p, [5]),
                                    v = d.childAt(p, [7]),
                                    g = d.childAt(v, [1]),
                                    b = d.childAt(v, [3]),
                                    C = d.createMorphAt(p, 1, 1),
                                    f = d.createMorphAt(p, 3, 3),
                                    F = d.createMorphAt(m, 0, 0),
                                    N = d.createMorphAt(m, 2, 2),
                                    T = d.createMorphAt(p, 9, 9);
                                return o(r, C, n, "link-to", ["list", c(r, n, "list.vanityUrl")], {}, e, null), o(r, f, n, "with", [c(r, n, "list.createdByUser")], {}, t, null), l(r, F, n, "format-count", [c(r, n, "positionIndex")], {}), l(r, N, n, "format-count", [c(r, n, "content.length")], {}), h(r, g, n, "action", ["tweet"], {}), h(r, b, n, "action", ["facebookShare"], {}), o(r, T, n, "if", [c(r, n, "currentPost.loops")], {}, a, null), u
                            }
                        }
                    }();
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null,
                        hasRendered: !1,
                        build: function (e) {
                            var t = e.createDocumentFragment(),
                                a = e.createComment("");
                            return e.appendChild(t, a), t
                        },
                        render: function (t, a, n) {
                            var r = a.dom,
                                i = a.hooks,
                                d = i.get,
                                s = i.block;
                            r.detectNamespace(n);
                            var c;
                            a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r), this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0), this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                            var o = r.createMorphAt(c, 0, 0, n);
                            return r.insertBoundary(c, null), r.insertBoundary(c, 0), s(a, o, t, "mouseover-video", [], {
                                post: d(a, t, "currentPost"),
                                mouseEntered: "bindFullscreenListener",
                                mouseLeft: "unbindFullscreenListener"
                            }, e, null), c
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createComment("");
                        return e.appendChild(t, a), t
                    },
                    render: function (t, a, n) {
                        var r = a.dom,
                            i = a.hooks,
                            d = i.get,
                            s = i.block;
                        r.detectNamespace(n);
                        var c;
                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r), this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0), this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                        var o = r.createMorphAt(c, 0, 0, n);
                        return r.insertBoundary(c, null), r.insertBoundary(c, 0), s(a, o, t, "if", [d(a, t, "currentPost")], {}, e, null), c
                    }
                }
            }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createComment("");
                return e.appendChild(t, a), t
            },
            render: function (a, n, r) {
                var i = n.dom,
                    d = n.hooks,
                    s = d.get,
                    c = d.block;
                i.detectNamespace(r);
                var o;
                n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (o = this.build(i), this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0), this.cachedFragment && (o = i.cloneNode(this.cachedFragment, !0))) : o = this.build(i);
                var l = i.createMorphAt(o, 0, 0, r);
                return i.insertBoundary(o, null), i.insertBoundary(o, 0), c(n, l, a, "if", [s(n, a, "isMobile")], {}, e, t), o
            }
        }
    }())
}), define("vine-ember/templates/explore/lists", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        var e = function () {
            var e = function () {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null,
                        hasRendered: !1,
                        build: function (e) {
                            var t = e.createDocumentFragment(),
                                a = e.createTextNode("    ");
                            e.appendChild(t, a);
                            var a = e.createComment("");
                            e.appendChild(t, a);
                            var a = e.createTextNode("\n");
                            return e.appendChild(t, a), t
                        },
                        render: function (e, t, a) {
                            var n = t.dom,
                                r = t.hooks,
                                i = r.inline;
                            n.detectNamespace(a);
                            var d;
                            t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                            var s = n.createMorphAt(d, 1, 1, a);
                            return i(t, s, e, "view", ["explore/sidebar-list"], {}), d
                        }
                    }
                }(),
                t = function () {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null,
                        hasRendered: !1,
                        build: function (e) {
                            var t = e.createDocumentFragment(),
                                a = e.createTextNode("    ");
                            e.appendChild(t, a);
                            var a = e.createElement("h3");
                            e.setAttribute(a, "class", "module-pagination");
                            var n = e.createTextNode("Load more...");
                            e.appendChild(a, n), e.appendChild(t, a);
                            var a = e.createTextNode("\n");
                            return e.appendChild(t, a), t
                        },
                        render: function (e, t, a) {
                            var n = t.dom,
                                r = t.hooks,
                                i = r.element;
                            n.detectNamespace(a);
                            var d;
                            t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                            var s = n.childAt(d, [1]);
                            return i(t, s, e, "action", ["nextPage"], {}), d
                        }
                    }
                }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null,
                hasRendered: !1,
                build: function (e) {
                    var t = e.createDocumentFragment(),
                        a = e.createComment("");
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    e.appendChild(t, a);
                    var a = e.createComment("");
                    return e.appendChild(t, a), t
                },
                render: function (a, n, r) {
                    var i = n.dom,
                        d = n.hooks,
                        s = d.block,
                        c = d.get;
                    i.detectNamespace(r);
                    var o;
                    n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (o = this.build(i), this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0), this.cachedFragment && (o = i.cloneNode(this.cachedFragment, !0))) : o = this.build(i);
                    var l = i.createMorphAt(o, 0, 0, r),
                        h = i.createMorphAt(o, 2, 2, r);
                    return i.insertBoundary(o, null), i.insertBoundary(o, 0), s(n, l, a, "each", [], {}, e, null), s(n, h, a, "if", [c(n, a, "pagination.nextPage")], {}, t, null), o
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createComment("");
                return e.appendChild(t, a), t
            },
            render: function (t, a, n) {
                var r = a.dom,
                    i = a.hooks,
                    d = i.block;
                r.detectNamespace(n);
                var s;
                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                var c = r.createMorphAt(s, 0, 0, n);
                return r.insertBoundary(s, null), r.insertBoundary(s, 0), d(a, c, t, "module-block", [], {
                    tagName: "section",
                    id: "edited-lists",
                    icon: "list",
                    route: "playlists",
                    title: "Playlists"
                }, e, null), s
            }
        }
    }())
}), define("vine-ember/templates/explore/mobile", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        var e = function () {
                var e = function () {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null,
                        hasRendered: !1,
                        build: function (e) {
                            var t = e.createDocumentFragment(),
                                a = e.createComment("");
                            return e.appendChild(t, a), t
                        },
                        render: function (e, t, a) {
                            var n = t.dom,
                                r = t.hooks,
                                i = r.content;
                            n.detectNamespace(a);
                            var d;
                            t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                            var s = n.createMorphAt(d, 0, 0, a);
                            return n.insertBoundary(d, null), n.insertBoundary(d, 0), i(t, s, e, "download-buttons"), d
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("  ");
                        e.appendChild(t, a);
                        var a = e.createElement("div");
                        e.setAttribute(a, "id", "splash-header");
                        var n = e.createTextNode("\n    ");
                        e.appendChild(a, n);
                        var n = e.createElement("a");
                        e.setAttribute(n, "href", "https://web.archive.org/web/20150701150124/http://get.vine.co");
                        var r = e.createTextNode("\n      ");
                        e.appendChild(n, r);
                        var r = e.createComment("");
                        e.appendChild(n, r);
                        var r = e.createTextNode("\n    ");
                        e.appendChild(n, r), e.appendChild(a, n);
                        var n = e.createTextNode("\n    ");
                        e.appendChild(a, n);
                        var n = e.createElement("div");
                        e.setAttribute(n, "class", "subtitle");
                        var r = e.createTextNode("Explore a world of beautiful, looping videos.");
                        e.appendChild(n, r), e.appendChild(a, n);
                        var n = e.createTextNode("\n    ");
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        e.appendChild(a, n);
                        var n = e.createTextNode("\n  ");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (t, a, n) {
                        var r = a.dom,
                            i = a.hooks,
                            d = i.inline,
                            s = i.get,
                            c = i.block;
                        r.detectNamespace(n);
                        var o;
                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (o = this.build(r), this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0), this.cachedFragment && (o = r.cloneNode(this.cachedFragment, !0))) : o = this.build(r);
                        var l = r.childAt(o, [1]),
                            h = r.createMorphAt(r.childAt(l, [1]), 1, 1),
                            u = r.createMorphAt(l, 5, 5);
                        return d(a, h, t, "cdn-img", [], {
                            src: "images/vine_logo-07c1b523b663f8a47fa3b73af336589c.png",
                            width: "355",
                            height: "130",
                            "class": "logo-image"
                        }), c(a, u, t, "unless", [s(a, t, "hideDownloadButtons")], {}, e, null), o
                    }
                }
            }(),
            t = function () {
                var e = function () {
                        var e = function () {
                            return {
                                isHTMLBars: !0,
                                revision: "Ember@1.11.3",
                                blockParams: 0,
                                cachedFragment: null,
                                hasRendered: !1,
                                build: function (e) {
                                    var t = e.createDocumentFragment(),
                                        a = e.createTextNode("        ");
                                    e.appendChild(t, a);
                                    var a = e.createComment("");
                                    e.appendChild(t, a);
                                    var a = e.createTextNode("\n");
                                    return e.appendChild(t, a), t
                                },
                                render: function (e, t, a) {
                                    var n = t.dom,
                                        r = t.hooks,
                                        i = r.inline;
                                    n.detectNamespace(a);
                                    var d;
                                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                                    var s = n.createMorphAt(d, 1, 1, a);
                                    return i(t, s, e, "view", ["explore/pinned-channel"], {}), d
                                }
                            }
                        }();
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createComment("");
                                return e.appendChild(t, a), t
                            },
                            render: function (t, a, n) {
                                var r = a.dom,
                                    i = a.hooks,
                                    d = i.get,
                                    s = i.block;
                                r.detectNamespace(n);
                                var c;
                                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r), this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0), this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                                var o = r.createMorphAt(c, 0, 0, n);
                                return r.insertBoundary(c, null), r.insertBoundary(c, 0), s(a, o, t, "module-block", [], {
                                    tagName: "article",
                                    className: "pinned-channel",
                                    id: d(a, t, "channelIdAttr"),
                                    rawIconClass: "channel-badge",
                                    iconUrl: d(a, t, "channel.channelIconUrl"),
                                    backgroundStyle: d(a, t, "channel.backgroundColorStyle"),
                                    title: d(a, t, "channel.featuredTitle"),
                                    route: "channel",
                                    routeParams: d(a, t, "channel.vanityUrl")
                                }, e, null), c
                            }
                        }
                    }(),
                    t = function () {
                        var e = function () {
                            return {
                                isHTMLBars: !0,
                                revision: "Ember@1.11.3",
                                blockParams: 0,
                                cachedFragment: null,
                                hasRendered: !1,
                                build: function (e) {
                                    var t = e.createDocumentFragment(),
                                        a = e.createTextNode("        ");
                                    e.appendChild(t, a);
                                    var a = e.createComment("");
                                    e.appendChild(t, a);
                                    var a = e.createTextNode("\n");
                                    return e.appendChild(t, a), t
                                },
                                render: function (e, t, a) {
                                    var n = t.dom,
                                        r = t.hooks,
                                        i = r.inline;
                                    n.detectNamespace(a);
                                    var d;
                                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                                    var s = n.createMorphAt(d, 1, 1, a);
                                    return i(t, s, e, "partial", ["explore/featured-users"], {}), d
                                }
                            }
                        }();
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createComment("");
                                return e.appendChild(t, a), t
                            },
                            render: function (t, a, n) {
                                var r = a.dom,
                                    i = a.hooks,
                                    d = i.block;
                                r.detectNamespace(n);
                                var s;
                                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                                var c = r.createMorphAt(s, 0, 0, n);
                                return r.insertBoundary(s, null), r.insertBoundary(s, 0), d(a, c, t, "module-block", [], {
                                    tagName: "article",
                                    className: "featured-users",
                                    icon: "profile",
                                    title: "Featured Viners"
                                }, e, null), s
                            }
                        }
                    }(),
                    a = function () {
                        var e = function () {
                            return {
                                isHTMLBars: !0,
                                revision: "Ember@1.11.3",
                                blockParams: 0,
                                cachedFragment: null,
                                hasRendered: !1,
                                build: function (e) {
                                    var t = e.createDocumentFragment(),
                                        a = e.createTextNode("        ");
                                    e.appendChild(t, a);
                                    var a = e.createComment("");
                                    e.appendChild(t, a);
                                    var a = e.createTextNode("\n");
                                    return e.appendChild(t, a), t
                                },
                                render: function (e, t, a) {
                                    var n = t.dom,
                                        r = t.hooks,
                                        i = r.inline;
                                    n.detectNamespace(a);
                                    var d;
                                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                                    var s = n.createMorphAt(d, 1, 1, a);
                                    return i(t, s, e, "view", ["explore/posts/one"], {}), d
                                }
                            }
                        }();
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createComment("");
                                return e.appendChild(t, a), t
                            },
                            render: function (t, a, n) {
                                var r = a.dom,
                                    i = a.hooks,
                                    d = i.block;
                                r.detectNamespace(n);
                                var s;
                                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                                var c = r.createMorphAt(s, 0, 0, n);
                                return r.insertBoundary(s, null), r.insertBoundary(s, 0), d(a, c, t, "module-block", [], {
                                    className: "editors-pick",
                                    route: "editors-picks",
                                    rawIconClass: "channel-badge editors-pick",
                                    title: "Editor's Pick"
                                }, e, null), s
                            }
                        }
                    }(),
                    n = function () {
                        var e = function () {
                            return {
                                isHTMLBars: !0,
                                revision: "Ember@1.11.3",
                                blockParams: 0,
                                cachedFragment: null,
                                hasRendered: !1,
                                build: function (e) {
                                    var t = e.createDocumentFragment(),
                                        a = e.createTextNode("        ");
                                    e.appendChild(t, a);
                                    var a = e.createComment("");
                                    e.appendChild(t, a);
                                    var a = e.createTextNode("\n");
                                    return e.appendChild(t, a), t
                                },
                                render: function (e, t, a) {
                                    var n = t.dom,
                                        r = t.hooks,
                                        i = r.inline;
                                    n.detectNamespace(a);
                                    var d;
                                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                                    var s = n.createMorphAt(d, 1, 1, a);
                                    return i(t, s, e, "view", ["explore/list"], {}), d
                                }
                            }
                        }();
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createComment("");
                                return e.appendChild(t, a), t
                            },
                            render: function (t, a, n) {
                                var r = a.dom,
                                    i = a.hooks,
                                    d = i.get,
                                    s = i.block;
                                r.detectNamespace(n);
                                var c;
                                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r), this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0), this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                                var o = r.createMorphAt(c, 0, 0, n);
                                return r.insertBoundary(c, null), r.insertBoundary(c, 0), s(a, o, t, "module-block", [], {
                                    className: "featured-post list",
                                    route: "list",
                                    routeParams: d(a, t, "list.vanityUrl"),
                                    title: "Vine Playlist"
                                }, e, null), c
                            }
                        }
                    }(),
                    r = function () {
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createTextNode("      ");
                                e.appendChild(t, a);
                                var a = e.createComment("");
                                e.appendChild(t, a);
                                var a = e.createTextNode("\n");
                                return e.appendChild(t, a), t
                            },
                            render: function (e, t, a) {
                                var n = t.dom,
                                    r = t.hooks,
                                    i = r.inline;
                                n.detectNamespace(a);
                                var d;
                                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                                var s = n.createMorphAt(d, 1, 1, a);
                                return i(t, s, e, "render", ["explore/channels"], {}), d
                            }
                        }
                    }(),
                    i = function () {
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createTextNode("      ");
                                e.appendChild(t, a);
                                var a = e.createComment("");
                                e.appendChild(t, a);
                                var a = e.createTextNode("\n");
                                return e.appendChild(t, a), t
                            },
                            render: function (e, t, a) {
                                var n = t.dom,
                                    r = t.hooks,
                                    i = r.inline;
                                n.detectNamespace(a);
                                var d;
                                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                                var s = n.createMorphAt(d, 1, 1, a);
                                return i(t, s, e, "render", ["explore/popular-now"], {}), d
                            }
                        }
                    }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        return e.appendChild(t, a), t
                    },
                    render: function (d, s, c) {
                        var o = s.dom,
                            l = s.hooks,
                            h = l.get,
                            u = l.block;
                        o.detectNamespace(c);
                        var p;
                        s.useFragmentCache && o.canClone ? (null === this.cachedFragment && (p = this.build(o), this.hasRendered ? this.cachedFragment = p : this.hasRendered = !0), this.cachedFragment && (p = o.cloneNode(this.cachedFragment, !0))) : p = this.build(o);
                        var m = o.createMorphAt(p, 0, 0, c),
                            v = o.createMorphAt(p, 1, 1, c),
                            g = o.createMorphAt(p, 2, 2, c),
                            b = o.createMorphAt(p, 3, 3, c),
                            C = o.createMorphAt(p, 4, 4, c),
                            f = o.createMorphAt(p, 5, 5, c);
                        return o.insertBoundary(p, null), o.insertBoundary(p, 0), u(s, m, d, "if", [h(s, d, "channel")], {}, e, null), u(s, v, d, "if", [h(s, d, "users")], {}, t, null), u(s, g, d, "if", [h(s, d, "postIdStr")], {}, a, null), u(s, b, d, "if", [h(s, d, "list")], {}, n, null), u(s, C, d, "if", [h(s, d, "channels")], {}, r, null), u(s, f, d, "if", [h(s, d, "popularNow")], {}, i, null), p
                    }
                }
            }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createComment("");
                e.appendChild(t, a);
                var a = e.createElement("div");
                e.setAttribute(a, "id", "explore-content");
                var n = e.createTextNode("\n");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n), e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a), t
            },
            render: function (a, n, r) {
                var i = n.dom,
                    d = n.hooks,
                    s = d.get,
                    c = d.block;
                i.detectNamespace(r);
                var o;
                n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (o = this.build(i), this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0), this.cachedFragment && (o = i.cloneNode(this.cachedFragment, !0))) : o = this.build(i);
                var l = i.createMorphAt(o, 0, 0, r),
                    h = i.createMorphAt(i.childAt(o, [1]), 1, 1);
                return i.insertBoundary(o, 0), c(n, l, a, "unless", [s(n, a, "session.isAuthenticated")], {}, e, null), c(n, h, a, "each", [], {}, t, null), o
            }
        }
    }())
}), define("vine-ember/templates/explore/pinned-channel", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        var e = function () {
                var e = function () {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null,
                        hasRendered: !1,
                        build: function (e) {
                            var t = e.createDocumentFragment(),
                                a = e.createComment("");
                            return e.appendChild(t, a), t
                        },
                        render: function (e, t, a) {
                            var n = t.dom,
                                r = t.hooks,
                                i = r.inline;
                            n.detectNamespace(a);
                            var d;
                            t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                            var s = n.createMorphAt(d, 0, 0, a);
                            return n.insertBoundary(d, null), n.insertBoundary(d, 0), i(t, s, e, "view", ["explore/posts/popular"], {}), d
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("  ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (t, a, n) {
                        var r = a.dom,
                            i = a.hooks,
                            d = i.get,
                            s = i.block;
                        r.detectNamespace(n);
                        var c;
                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r), this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0), this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                        var o = r.createMorphAt(c, 1, 1, n);
                        return s(a, o, t, "each", [d(a, t, "posts")], {
                            itemController: "explore/post"
                        }, e, null), c
                    }
                }
            }(),
            t = function () {
                var e = function () {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null,
                        hasRendered: !1,
                        build: function (e) {
                            var t = e.createDocumentFragment(),
                                a = e.createComment("");
                            return e.appendChild(t, a), t
                        },
                        render: function (e, t, a) {
                            var n = t.dom,
                                r = t.hooks,
                                i = r.get,
                                d = r.inline;
                            n.detectNamespace(a);
                            var s;
                            t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                            var c = n.createMorphAt(s, 0, 0, a);
                            return n.insertBoundary(s, null), n.insertBoundary(s, 0), d(t, c, e, "render", ["explore/posts/three", i(t, e, "this")], {}), s
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("  ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (t, a, n) {
                        var r = a.dom,
                            i = a.hooks,
                            d = i.get,
                            s = i.block;
                        r.detectNamespace(n);
                        var c;
                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r), this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0), this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                        var o = r.createMorphAt(c, 1, 1, n);
                        return s(a, o, t, "each", [d(a, t, "posts")], {}, e, null), c
                    }
                }
            }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createElement("style");
                e.setAttribute(a, "class", "pinned-channel-color");
                var n = e.createTextNode("\n  #[[channelId]] .post-container .action.like span:nth-of-type(2),\n  #[[channelId]] .post-container .action.revine span:first-of-type,\n  #[[channelId]] .description a:hover,\n  #[[channelId]] .timestamp a:hover,\n  #[[channelId]] a:hover .module-title,\n  #[[channelId]] .user-info-new .username a {\n    color: #[[backgroundColor]] !important;\n  }\n");
                e.appendChild(a, n), e.appendChild(t, a);
                var a = e.createTextNode("\n\n");
                e.appendChild(t, a);
                var a = e.createComment("");
                return e.appendChild(t, a), t
            },
            render: function (a, n, r) {
                var i = n.dom,
                    d = n.hooks,
                    s = d.get,
                    c = d.block;
                i.detectNamespace(r);
                var o;
                n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (o = this.build(i), this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0), this.cachedFragment && (o = i.cloneNode(this.cachedFragment, !0))) : o = this.build(i);
                var l = i.createMorphAt(o, 2, 2, r);
                return i.insertBoundary(o, null), c(n, l, a, "if", [s(n, a, "isMobile")], {}, e, t), o
            }
        }
    }())
}), define("vine-ember/templates/explore/popular-now", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        var e = function () {
            var e = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("    ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.inline;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var s = n.createMorphAt(d, 1, 1, a);
                        return i(t, s, e, "view", ["explore/posts/popular"], {}), d
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null,
                hasRendered: !1,
                build: function (e) {
                    var t = e.createDocumentFragment(),
                        a = e.createComment("");
                    return e.appendChild(t, a), t
                },
                render: function (t, a, n) {
                    var r = a.dom,
                        i = a.hooks,
                        d = i.block;
                    r.detectNamespace(n);
                    var s;
                    a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                    var c = r.createMorphAt(s, 0, 0, n);
                    return r.insertBoundary(s, null), r.insertBoundary(s, 0), d(a, c, t, "each", [], {}, e, null), s
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createComment("");
                return e.appendChild(t, a), t
            },
            render: function (t, a, n) {
                var r = a.dom,
                    i = a.hooks,
                    d = i.block;
                r.detectNamespace(n);
                var s;
                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                var c = r.createMorphAt(s, 0, 0, n);
                return r.insertBoundary(s, null), r.insertBoundary(s, 0), d(a, c, t, "module-block", [], {
                    route: "popular-now",
                    title: "Popular Now"
                }, e, null), s
            }
        }
    }())
}), define("vine-ember/templates/explore/posts/one-mobile", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        var e = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("    ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.inline;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var s = n.createMorphAt(d, 1, 1, a);
                        return i(t, s, e, "partial", ["explicit-content"], {}), d
                    }
                }
            }(),
            t = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("    ");
                        e.appendChild(t, a);
                        var a = e.createElement("div"),
                            n = e.createTextNode("\n      ");
                        e.appendChild(a, n);
                        var n = e.createElement("div");
                        e.setAttribute(n, "class", "vine-video-container");
                        var r = e.createTextNode("\n        ");
                        e.appendChild(n, r);
                        var r = e.createElement("video");
                        e.setAttribute(r, "preload", "auto");
                        var i = e.createTextNode("\n          ");
                        e.appendChild(r, i);
                        var i = e.createElement("source");
                        e.setAttribute(i, "type", "video/mp4"), e.appendChild(r, i);
                        var i = e.createTextNode("\n        ");
                        e.appendChild(r, i), e.appendChild(n, r);
                        var r = e.createTextNode("\n      ");
                        e.appendChild(n, r), e.appendChild(a, n);
                        var n = e.createTextNode("\n    ");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n    ");
                        e.appendChild(t, a);
                        var a = e.createElement("img");
                        e.setAttribute(a, "class", "thumbnail"), e.appendChild(t, a);
                        var a = e.createTextNode("\n    ");
                        e.appendChild(t, a);
                        var a = e.createElement("button");
                        e.setAttribute(a, "class", "play"), e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.element,
                            d = r.get;
                        n.detectNamespace(a);
                        var s;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                        var c = n.childAt(s, [1]),
                            o = n.childAt(c, [1, 1, 1]),
                            l = n.childAt(s, [3]),
                            h = n.childAt(s, [5]);
                        return i(t, c, e, "bind-attr", [], {
                            "class": ":vine-player hasModal:hidden"
                        }), i(t, c, e, "action", ["pause"], {
                            target: "view"
                        }), i(t, o, e, "bind-attr", [], {
                            src: d(t, e, "secureVideoUrl")
                        }), i(t, l, e, "bind-attr", [], {
                            src: d(t, e, "secureThumbnailUrl")
                        }), i(t, h, e, "action", ["play"], {
                            target: "view"
                        }), s
                    }
                }
            }(),
            a = function () {
                var e = function () {
                        var e = function () {
                            return {
                                isHTMLBars: !0,
                                revision: "Ember@1.11.3",
                                blockParams: 0,
                                cachedFragment: null,
                                hasRendered: !1,
                                build: function (e) {
                                    var t = e.createDocumentFragment(),
                                        a = e.createComment("");
                                    return e.appendChild(t, a), t
                                },
                                render: function (e, t, a) {
                                    var n = t.dom,
                                        r = t.hooks,
                                        i = r.content;
                                    n.detectNamespace(a);
                                    var d;
                                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                                    var s = n.createMorphAt(d, 0, 0, a);
                                    return n.insertBoundary(d, null), n.insertBoundary(d, 0), i(t, s, e, "venueName"), d
                                }
                            }
                        }();
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createTextNode("        at ");
                                e.appendChild(t, a);
                                var a = e.createComment("");
                                e.appendChild(t, a);
                                var a = e.createTextNode("\n");
                                return e.appendChild(t, a), t
                            },
                            render: function (t, a, n) {
                                var r = a.dom,
                                    i = a.hooks,
                                    d = i.get,
                                    s = i.block;
                                r.detectNamespace(n);
                                var c;
                                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r), this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0), this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                                var o = r.createMorphAt(c, 1, 1, n);
                                return s(a, o, t, "link-to", ["venue", d(a, t, "foursquareVenueId")], {}, e, null), c
                            }
                        }
                    }(),
                    t = function () {
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createTextNode("        ");
                                e.appendChild(t, a);
                                var a = e.createComment("");
                                e.appendChild(t, a);
                                var a = e.createTextNode("\n");
                                return e.appendChild(t, a), t
                            },
                            render: function (e, t, a) {
                                var n = t.dom,
                                    r = t.hooks,
                                    i = r.content;
                                n.detectNamespace(a);
                                var d;
                                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                                var s = n.createMorphAt(d, 1, 1, a);
                                return i(t, s, e, "venueName"), d
                            }
                        }
                    }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createComment("");
                        return e.appendChild(t, a), t
                    },
                    render: function (a, n, r) {
                        var i = n.dom,
                            d = n.hooks,
                            s = d.get,
                            c = d.block;
                        i.detectNamespace(r);
                        var o;
                        n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (o = this.build(i), this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0), this.cachedFragment && (o = i.cloneNode(this.cachedFragment, !0))) : o = this.build(i);
                        var l = i.createMorphAt(o, 0, 0, r);
                        return i.insertBoundary(o, null), i.insertBoundary(o, 0), c(n, l, a, "if", [s(n, a, "foursquareVenueId")], {}, e, t), o
                    }
                }
            }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createElement("div");
                e.setAttribute(a, "class", "video-container");
                var n = e.createTextNode("\n");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n), e.appendChild(t, a);
                var a = e.createTextNode("\n\n");
                e.appendChild(t, a);
                var a = e.createElement("div");
                e.setAttribute(a, "class", "info-container post-info info");
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("h4");
                e.setAttribute(n, "class", "description");
                var r = e.createComment("");
                e.appendChild(n, r), e.appendChild(a, n);
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("h5");
                e.setAttribute(n, "class", "venue");
                var r = e.createTextNode("\n");
                e.appendChild(n, r);
                var r = e.createComment("");
                e.appendChild(n, r);
                var r = e.createTextNode("  ");
                e.appendChild(n, r), e.appendChild(a, n);
                var n = e.createTextNode("\n\n  ");
                e.appendChild(a, n);
                var n = e.createElement("div");
                e.setAttribute(n, "class", "post-actions");
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("button"),
                    i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("span");
                e.setAttribute(i, "class", "icon-like"), e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createComment("");
                e.appendChild(r, i);
                var i = e.createTextNode("\n    ");
                e.appendChild(r, i), e.appendChild(n, r);
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("button");
                e.setAttribute(r, "class", "clear twitter");
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("span");
                e.setAttribute(i, "class", "icon-twitter"), e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createComment("");
                e.appendChild(r, i);
                var i = e.createTextNode("\n    ");
                e.appendChild(r, i), e.appendChild(n, r);
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("button");
                e.setAttribute(r, "class", "clear facebook");
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("span");
                e.setAttribute(i, "class", "icon-facebook"), e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createComment("");
                e.appendChild(r, i);
                var i = e.createTextNode("\n    ");
                e.appendChild(r, i), e.appendChild(n, r);
                var r = e.createTextNode("\n  ");
                e.appendChild(n, r), e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n), e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a), t
            },
            render: function (n, r, i) {
                var d = r.dom,
                    s = r.hooks,
                    c = s.get,
                    o = s.element,
                    l = s.block,
                    h = s.inline;
                d.detectNamespace(i);
                var u;
                r.useFragmentCache && d.canClone ? (null === this.cachedFragment && (u = this.build(d), this.hasRendered ? this.cachedFragment = u : this.hasRendered = !0), this.cachedFragment && (u = d.cloneNode(this.cachedFragment, !0))) : u = this.build(d);
                var p = d.childAt(u, [0]),
                    m = d.childAt(u, [2]),
                    v = d.childAt(m, [7]),
                    g = d.childAt(v, [1]),
                    b = d.childAt(v, [3]),
                    C = d.childAt(v, [5]),
                    f = d.createMorphAt(p, 1, 1),
                    F = d.createMorphAt(m, 1, 1),
                    N = d.createMorphAt(d.childAt(m, [3]), 0, 0),
                    T = d.createMorphAt(d.childAt(m, [5]), 1, 1),
                    x = d.createMorphAt(g, 3, 3),
                    A = d.createMorphAt(b, 3, 3),
                    k = d.createMorphAt(C, 3, 3);
                return o(r, p, n, "bind-attr", [], {
                    style: c(r, n, "videoContainerStyle")
                }), l(r, f, n, "if", [c(r, n, "explicitContent")], {}, e, t), h(r, F, n, "user-info", [], {
                    data: c(r, n, "this"),
                    cssClass: "user-info-size-38 user-info-hide-metadata"
                }), h(r, N, n, "linkify-entities", [], {
                    text: c(r, n, "description"),
                    entities: c(r, n, "entities")
                }), l(r, T, n, "if", [c(r, n, "venueName")], {}, a, null), o(r, g, n, "bind-attr", [], {
                    "class": ":clear :like liked:active"
                }), o(r, g, n, "action", ["like"], {}), h(r, x, n, "format-count", [c(r, n, "likes.count")], {
                    zeroText: "Like"
                }), o(r, b, n, "action", ["tweet"], {}), h(r, A, n, "format-count", [c(r, n, "tweetCount")], {
                    zeroText: "Tweet"
                }), o(r, C, n, "action", ["facebookShare"], {}), h(r, k, n, "format-count", [c(r, n, "facebookCount")], {
                    zeroText: "Share"
                }), u
            }
        }
    }())
}), define("vine-ember/templates/explore/posts/one", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        var e = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("  ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.inline;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var s = n.createMorphAt(d, 1, 1, a);
                        return i(t, s, e, "view", ["explore/posts/one-mobile"], {}), d
                    }
                }
            }(),
            t = function () {
                var e = function () {
                    var e = function () {
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createTextNode("        ");
                                e.appendChild(t, a);
                                var a = e.createComment("");
                                e.appendChild(t, a);
                                var a = e.createTextNode("\n");
                                return e.appendChild(t, a), t
                            },
                            render: function (e, t, a) {
                                var n = t.dom,
                                    r = t.hooks,
                                    i = r.get,
                                    d = r.inline;
                                n.detectNamespace(a);
                                var s;
                                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                                var c = n.createMorphAt(s, 1, 1, a);
                                return d(t, c, e, "loop-count", [], {
                                    postId: i(t, e, "postIdStr"),
                                    loops: i(t, e, "loops"),
                                    postDate: i(t, e, "created")
                                }), s
                            }
                        }
                    }();
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null,
                        hasRendered: !1,
                        build: function (e) {
                            var t = e.createDocumentFragment(),
                                a = e.createTextNode("    ");
                            e.appendChild(t, a);
                            var a = e.createElement("div");
                            e.setAttribute(a, "class", "info");
                            var n = e.createTextNode("\n      ");
                            e.appendChild(a, n);
                            var n = e.createComment("");
                            e.appendChild(a, n);
                            var n = e.createTextNode("\n      ");
                            e.appendChild(a, n);
                            var n = e.createElement("div");
                            e.setAttribute(n, "class", "description");
                            var r = e.createComment("");
                            e.appendChild(n, r), e.appendChild(a, n);
                            var n = e.createTextNode("\n      ");
                            e.appendChild(a, n);
                            var n = e.createElement("div");
                            e.setAttribute(n, "class", "post-actions");
                            var r = e.createTextNode("\n        ");
                            e.appendChild(n, r);
                            var r = e.createElement("button"),
                                i = e.createTextNode("\n          ");
                            e.appendChild(r, i);
                            var i = e.createElement("span");
                            e.setAttribute(i, "class", "icon-like_stroked"), e.appendChild(r, i);
                            var i = e.createTextNode("\n        ");
                            e.appendChild(r, i), e.appendChild(n, r);
                            var r = e.createTextNode("\n        ");
                            e.appendChild(n, r);
                            var r = e.createElement("button");
                            e.setAttribute(r, "class", "clear twitter");
                            var i = e.createTextNode("\n          ");
                            e.appendChild(r, i);
                            var i = e.createElement("span");
                            e.setAttribute(i, "class", "icon-twitter"), e.appendChild(r, i);
                            var i = e.createTextNode("\n        ");
                            e.appendChild(r, i), e.appendChild(n, r);
                            var r = e.createTextNode("\n        ");
                            e.appendChild(n, r);
                            var r = e.createElement("button");
                            e.setAttribute(r, "class", "clear facebook");
                            var i = e.createTextNode("\n          ");
                            e.appendChild(r, i);
                            var i = e.createElement("span");
                            e.setAttribute(i, "class", "icon-facebook"), e.appendChild(r, i);
                            var i = e.createTextNode("\n        ");
                            e.appendChild(r, i), e.appendChild(n, r);
                            var r = e.createTextNode("\n      ");
                            e.appendChild(n, r), e.appendChild(a, n);
                            var n = e.createTextNode("\n");
                            e.appendChild(a, n);
                            var n = e.createComment("");
                            e.appendChild(a, n);
                            var n = e.createTextNode("    ");
                            e.appendChild(a, n), e.appendChild(t, a);
                            var a = e.createTextNode("\n");
                            return e.appendChild(t, a), t
                        },
                        render: function (t, a, n) {
                            var r = a.dom,
                                i = a.hooks,
                                d = i.get,
                                s = i.inline,
                                c = i.element,
                                o = i.block;
                            r.detectNamespace(n);
                            var l;
                            a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (l = this.build(r), this.hasRendered ? this.cachedFragment = l : this.hasRendered = !0), this.cachedFragment && (l = r.cloneNode(this.cachedFragment, !0))) : l = this.build(r);
                            var h = r.childAt(l, [1]),
                                u = r.childAt(h, [5]),
                                p = r.childAt(u, [1]),
                                m = r.childAt(u, [3]),
                                v = r.childAt(u, [5]),
                                g = r.createMorphAt(h, 1, 1),
                                b = r.createMorphAt(r.childAt(h, [3]), 0, 0),
                                C = r.createMorphAt(h, 7, 7);
                            return s(a, g, t, "user-info", [], {
                                data: d(a, t, "this"),
                                cssClass: "user-info-size-38 user-info-inherit-color user-info-stacked user-info-hide-metadata"
                            }), s(a, b, t, "linkify-entities", [], {
                                text: d(a, t, "description"),
                                entities: d(a, t, "entities")
                            }), c(a, p, t, "bind-attr", [], {
                                "class": ":clear :like liked:active"
                            }), c(a, p, t, "action", ["like"], {}), c(a, m, t, "action", ["tweet"], {}), c(a, v, t, "action", ["facebookShare"], {}), o(a, C, t, "if", [d(a, t, "loops")], {}, e, null), l
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createComment("");
                        return e.appendChild(t, a), t
                    },
                    render: function (t, a, n) {
                        var r = a.dom,
                            i = a.hooks,
                            d = i.get,
                            s = i.block;
                        r.detectNamespace(n);
                        var c;
                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r), this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0), this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                        var o = r.createMorphAt(c, 0, 0, n);
                        return r.insertBoundary(c, null), r.insertBoundary(c, 0), s(a, o, t, "mouseover-video", [], {
                            post: d(a, t, "this")
                        }, e, null), c
                    }
                }
            }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createComment("");
                return e.appendChild(t, a), t
            },
            render: function (a, n, r) {
                var i = n.dom,
                    d = n.hooks,
                    s = d.get,
                    c = d.block;
                i.detectNamespace(r);
                var o;
                n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (o = this.build(i), this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0), this.cachedFragment && (o = i.cloneNode(this.cachedFragment, !0))) : o = this.build(i);
                var l = i.createMorphAt(o, 0, 0, r);
                return i.insertBoundary(o, null), i.insertBoundary(o, 0), c(n, l, a, "if", [s(n, a, "isMobile")], {}, e, t), o
            }
        }
    }())
}), define("vine-ember/templates/explore/posts/popular-mobile", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        var e = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("    ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.inline;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var s = n.createMorphAt(d, 1, 1, a);
                        return i(t, s, e, "partial", ["explicit-content"], {}), d
                    }
                }
            }(),
            t = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("    ");
                        e.appendChild(t, a);
                        var a = e.createElement("div"),
                            n = e.createTextNode("\n      ");
                        e.appendChild(a, n);
                        var n = e.createElement("div");
                        e.setAttribute(n, "class", "vine-video-container");
                        var r = e.createTextNode("\n        ");
                        e.appendChild(n, r);
                        var r = e.createElement("video");
                        e.setAttribute(r, "preload", "auto");
                        var i = e.createTextNode("\n          ");
                        e.appendChild(r, i);
                        var i = e.createElement("source");
                        e.setAttribute(i, "type", "video/mp4"), e.appendChild(r, i);
                        var i = e.createTextNode("\n        ");
                        e.appendChild(r, i), e.appendChild(n, r);
                        var r = e.createTextNode("\n      ");
                        e.appendChild(n, r), e.appendChild(a, n);
                        var n = e.createTextNode("\n    ");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n    ");
                        e.appendChild(t, a);
                        var a = e.createElement("img");
                        e.setAttribute(a, "class", "thumbnail"), e.appendChild(t, a);
                        var a = e.createTextNode("\n    ");
                        e.appendChild(t, a);
                        var a = e.createElement("button");
                        e.setAttribute(a, "class", "play"), e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.element,
                            d = r.get;
                        n.detectNamespace(a);
                        var s;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                        var c = n.childAt(s, [1]),
                            o = n.childAt(c, [1, 1, 1]),
                            l = n.childAt(s, [3]),
                            h = n.childAt(s, [5]);
                        return i(t, c, e, "bind-attr", [], {
                            "class": ":vine-player hasModal:hidden"
                        }), i(t, c, e, "action", ["pause"], {
                            target: "view"
                        }), i(t, o, e, "bind-attr", [], {
                            src: d(t, e, "secureVideoUrl")
                        }), i(t, l, e, "bind-attr", [], {
                            src: d(t, e, "secureThumbnailUrl")
                        }), i(t, h, e, "action", ["play"], {
                            target: "view"
                        }), s
                    }
                }
            }(),
            a = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("      ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.content;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var s = n.createMorphAt(d, 1, 1, a);
                        return i(t, s, e, "username"), d
                    }
                }
            }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createElement("div");
                e.setAttribute(a, "class", "video-container");
                var n = e.createTextNode("\n");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n), e.appendChild(t, a);
                var a = e.createTextNode("\n\n");
                e.appendChild(t, a);
                var a = e.createElement("div");
                e.setAttribute(a, "class", "post-info");
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("h3");
                e.setAttribute(n, "class", "user");
                var r = e.createTextNode("\n");
                e.appendChild(n, r);
                var r = e.createComment("");
                e.appendChild(n, r);
                var r = e.createTextNode("  ");
                e.appendChild(n, r), e.appendChild(a, n);
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("h5");
                e.setAttribute(n, "class", "description");
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createComment("");
                e.appendChild(n, r);
                var r = e.createTextNode("\n  ");
                e.appendChild(n, r), e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n), e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a), t
            },
            render: function (n, r, i) {
                var d = r.dom,
                    s = r.hooks,
                    c = s.get,
                    o = s.element,
                    l = s.block,
                    h = s.inline;
                d.detectNamespace(i);
                var u;
                r.useFragmentCache && d.canClone ? (null === this.cachedFragment && (u = this.build(d), this.hasRendered ? this.cachedFragment = u : this.hasRendered = !0), this.cachedFragment && (u = d.cloneNode(this.cachedFragment, !0))) : u = this.build(d);
                var p = d.childAt(u, [0]),
                    m = d.childAt(u, [2]),
                    v = d.createMorphAt(p, 1, 1),
                    g = d.createMorphAt(d.childAt(m, [1]), 1, 1),
                    b = d.createMorphAt(d.childAt(m, [3]), 1, 1);
                return o(r, p, n, "bind-attr", [], {
                    style: c(r, n, "backgroundImageStyle")
                }), l(r, v, n, "if", [c(r, n, "explicitContent")], {}, e, t), l(r, g, n, "link-user", [], {
                    user: c(r, n, "this")
                }, a, null), h(r, b, n, "replace-emoji", [c(r, n, "description")], {}), u
            }
        }
    }())
}), define("vine-ember/templates/explore/posts/popular", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        var e = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("  ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.inline;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var s = n.createMorphAt(d, 1, 1, a);
                        return i(t, s, e, "view", ["explore/posts/popular-mobile"], {}), d
                    }
                }
            }(),
            t = function () {
                var e = function () {
                    var e = function () {
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createTextNode("        ");
                                e.appendChild(t, a);
                                var a = e.createComment("");
                                e.appendChild(t, a);
                                var a = e.createTextNode("\n");
                                return e.appendChild(t, a), t
                            },
                            render: function (e, t, a) {
                                var n = t.dom,
                                    r = t.hooks,
                                    i = r.content;
                                n.detectNamespace(a);
                                var d;
                                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                                var s = n.createMorphAt(d, 1, 1, a);
                                return i(t, s, e, "username"), d
                            }
                        }
                    }();
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null,
                        hasRendered: !1,
                        build: function (e) {
                            var t = e.createDocumentFragment(),
                                a = e.createTextNode("    ");
                            e.appendChild(t, a);
                            var a = e.createElement("div");
                            e.setAttribute(a, "class", "post-info");
                            var n = e.createTextNode("\n");
                            e.appendChild(a, n);
                            var n = e.createComment("");
                            e.appendChild(a, n);
                            var n = e.createTextNode("      ");
                            e.appendChild(a, n);
                            var n = e.createElement("div");
                            e.setAttribute(n, "class", "description");
                            var r = e.createTextNode("\n        ");
                            e.appendChild(n, r);
                            var r = e.createComment("");
                            e.appendChild(n, r);
                            var r = e.createTextNode("\n      ");
                            e.appendChild(n, r), e.appendChild(a, n);
                            var n = e.createTextNode("\n    ");
                            e.appendChild(a, n), e.appendChild(t, a);
                            var a = e.createTextNode("\n");
                            return e.appendChild(t, a), t
                        },
                        render: function (t, a, n) {
                            var r = a.dom,
                                i = a.hooks,
                                d = i.get,
                                s = i.block,
                                c = i.inline;
                            r.detectNamespace(n);
                            var o;
                            a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (o = this.build(r), this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0), this.cachedFragment && (o = r.cloneNode(this.cachedFragment, !0))) : o = this.build(r);
                            var l = r.childAt(o, [1]),
                                h = r.createMorphAt(l, 1, 1),
                                u = r.createMorphAt(r.childAt(l, [3]), 1, 1);
                            return s(a, h, t, "link-user", [], {
                                user: d(a, t, "this"),
                                className: "user"
                            }, e, null), c(a, u, t, "replace-emoji", [d(a, t, "description")], {}), o
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createComment("");
                        return e.appendChild(t, a), t
                    },
                    render: function (t, a, n) {
                        var r = a.dom,
                            i = a.hooks,
                            d = i.get,
                            s = i.block;
                        r.detectNamespace(n);
                        var c;
                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r), this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0), this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                        var o = r.createMorphAt(c, 0, 0, n);
                        return r.insertBoundary(c, null), r.insertBoundary(c, 0), s(a, o, t, "mouseover-video", [], {
                            post: d(a, t, "this"),
                            className: "small"
                        }, e, null), c
                    }
                }
            }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createComment("");
                return e.appendChild(t, a), t
            },
            render: function (a, n, r) {
                var i = n.dom,
                    d = n.hooks,
                    s = d.get,
                    c = d.block;
                i.detectNamespace(r);
                var o;
                n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (o = this.build(i), this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0), this.cachedFragment && (o = i.cloneNode(this.cachedFragment, !0))) : o = this.build(i);
                var l = i.createMorphAt(o, 0, 0, r);
                return i.insertBoundary(o, null), i.insertBoundary(o, 0), c(n, l, a, "if", [s(n, a, "isMobile")], {}, e, t), o
            }
        }
    }())
}), define("vine-ember/templates/explore/posts/three", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        var e = function () {
            var e = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("      ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.get,
                            d = r.inline;
                        n.detectNamespace(a);
                        var s;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                        var c = n.createMorphAt(s, 1, 1, a);
                        return d(t, c, e, "loop-count", [], {
                            postId: i(t, e, "postIdStr"),
                            loops: i(t, e, "loops"),
                            postDate: i(t, e, "created")
                        }), s
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null,
                hasRendered: !1,
                build: function (e) {
                    var t = e.createDocumentFragment(),
                        a = e.createTextNode("  ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "info");
                    var n = e.createTextNode("\n    ");
                    e.appendChild(a, n);
                    var n = e.createComment("");
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n    ");
                    e.appendChild(a, n);
                    var n = e.createElement("div");
                    e.setAttribute(n, "class", "description");
                    var r = e.createComment("");
                    e.appendChild(n, r), e.appendChild(a, n);
                    var n = e.createTextNode("\n    ");
                    e.appendChild(a, n);
                    var n = e.createElement("div");
                    e.setAttribute(n, "class", "post-actions");
                    var r = e.createTextNode("\n      ");
                    e.appendChild(n, r);
                    var r = e.createComment("");
                    e.appendChild(n, r);
                    var r = e.createTextNode("\n      ");
                    e.appendChild(n, r);
                    var r = e.createElement("button");
                    e.setAttribute(r, "class", "clear twitter");
                    var i = e.createTextNode("\n        ");
                    e.appendChild(r, i);
                    var i = e.createElement("span");
                    e.setAttribute(i, "class", "icon-twitter"), e.appendChild(r, i);
                    var i = e.createTextNode("\n      ");
                    e.appendChild(r, i), e.appendChild(n, r);
                    var r = e.createTextNode("\n      ");
                    e.appendChild(n, r);
                    var r = e.createElement("button");
                    e.setAttribute(r, "class", "clear facebook");
                    var i = e.createTextNode("\n        ");
                    e.appendChild(r, i);
                    var i = e.createElement("span");
                    e.setAttribute(i, "class", "icon-facebook"), e.appendChild(r, i);
                    var i = e.createTextNode("\n      ");
                    e.appendChild(r, i), e.appendChild(n, r);
                    var r = e.createTextNode("\n    ");
                    e.appendChild(n, r), e.appendChild(a, n);
                    var n = e.createTextNode("\n");
                    e.appendChild(a, n);
                    var n = e.createComment("");
                    e.appendChild(a, n);
                    var n = e.createTextNode("  ");
                    e.appendChild(a, n), e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a), t
                },
                render: function (t, a, n) {
                    var r = a.dom,
                        i = a.hooks,
                        d = i.get,
                        s = i.inline,
                        c = i.element,
                        o = i.block;
                    r.detectNamespace(n);
                    var l;
                    a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (l = this.build(r), this.hasRendered ? this.cachedFragment = l : this.hasRendered = !0), this.cachedFragment && (l = r.cloneNode(this.cachedFragment, !0))) : l = this.build(r);
                    var h = r.childAt(l, [1]),
                        u = r.childAt(h, [5]),
                        p = r.childAt(u, [3]),
                        m = r.childAt(u, [5]),
                        v = r.createMorphAt(h, 1, 1),
                        g = r.createMorphAt(r.childAt(h, [3]), 0, 0),
                        b = r.createMorphAt(u, 1, 1),
                        C = r.createMorphAt(h, 7, 7);
                    return s(a, v, t, "user-info", [], {
                        data: d(a, t, "this"),
                        cssClass: "user-info-size-24"
                    }), s(a, g, t, "linkify-entities", [], {
                        text: d(a, t, "description"),
                        entities: d(a, t, "entities")
                    }), s(a, b, t, "animated-button", [], {
                        actionName: "like",
                        iconName: "like_stroked",
                        action: "like",
                        isActive: d(a, t, "liked")
                    }), c(a, p, t, "action", ["tweet"], {}), c(a, m, t, "action", ["facebookShare"], {}), o(a, C, t, "if", [d(a, t, "loops")], {}, e, null), l
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createComment("");
                return e.appendChild(t, a), t
            },
            render: function (t, a, n) {
                var r = a.dom,
                    i = a.hooks,
                    d = i.get,
                    s = i.block;
                r.detectNamespace(n);
                var c;
                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r), this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0), this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                var o = r.createMorphAt(c, 0, 0, n);
                return r.insertBoundary(c, null), r.insertBoundary(c, 0), s(a, o, t, "mouseover-video", [], {
                    post: d(a, t, "this")
                }, e, null), c
            }
        }
    }())
}), define("vine-ember/templates/explore/sidebar-list", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        var e = function () {
            var e = function () {
                var e = function () {
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createComment("");
                                return e.appendChild(t, a), t
                            },
                            render: function (e, t, a) {
                                var n = t.dom,
                                    r = t.hooks,
                                    i = r.content;
                                n.detectNamespace(a);
                                var d;
                                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                                var s = n.createMorphAt(d, 0, 0, a);
                                return n.insertBoundary(d, null), n.insertBoundary(d, 0), i(t, s, e, "list.title"), d
                            }
                        }
                    }(),
                    t = function () {
                        var e = function () {
                            return {
                                isHTMLBars: !0,
                                revision: "Ember@1.11.3",
                                blockParams: 0,
                                cachedFragment: null,
                                hasRendered: !1,
                                build: function (e) {
                                    var t = e.createDocumentFragment(),
                                        a = e.createComment("");
                                    return e.appendChild(t, a), t
                                },
                                render: function (e, t, a) {
                                    var n = t.dom,
                                        r = t.hooks,
                                        i = r.content;
                                    n.detectNamespace(a);
                                    var d;
                                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                                    var s = n.createMorphAt(d, 0, 0, a);
                                    return n.insertBoundary(d, null), n.insertBoundary(d, 0), i(t, s, e, "username"), d
                                }
                            }
                        }();
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createTextNode("            by ");
                                e.appendChild(t, a);
                                var a = e.createComment("");
                                e.appendChild(t, a);
                                var a = e.createTextNode("\n");
                                return e.appendChild(t, a), t
                            },
                            render: function (t, a, n) {
                                var r = a.dom,
                                    i = a.hooks,
                                    d = i.get,
                                    s = i.block;
                                r.detectNamespace(n);
                                var c;
                                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r), this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0), this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                                var o = r.createMorphAt(c, 1, 1, n);
                                return s(a, o, t, "link-user", [], {
                                    user: d(a, t, "this")
                                }, e, null), c
                            }
                        }
                    }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("      ");
                        e.appendChild(t, a);
                        var a = e.createElement("div");
                        e.setAttribute(a, "class", "post-info");
                        var n = e.createTextNode("\n        ");
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        e.appendChild(a, n);
                        var n = e.createTextNode("\n        ");
                        e.appendChild(a, n);
                        var n = e.createElement("div");
                        e.setAttribute(n, "class", "author");
                        var r = e.createTextNode("\n");
                        e.appendChild(n, r);
                        var r = e.createComment("");
                        e.appendChild(n, r);
                        var r = e.createTextNode("        ");
                        e.appendChild(n, r), e.appendChild(a, n);
                        var n = e.createTextNode("\n      ");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (a, n, r) {
                        var i = n.dom,
                            d = n.hooks,
                            s = d.get,
                            c = d.block;
                        i.detectNamespace(r);
                        var o;
                        n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (o = this.build(i), this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0), this.cachedFragment && (o = i.cloneNode(this.cachedFragment, !0))) : o = this.build(i);
                        var l = i.childAt(o, [1]),
                            h = i.createMorphAt(l, 1, 1),
                            u = i.createMorphAt(i.childAt(l, [3]), 1, 1);
                        return c(n, h, a, "link-to", ["list", s(n, a, "list.vanityUrl")], {
                            classNames: "user"
                        }, e, null), c(n, u, a, "with", [s(n, a, "list.createdByUser")], {}, t, null), o
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null,
                hasRendered: !1,
                build: function (e) {
                    var t = e.createDocumentFragment(),
                        a = e.createComment("");
                    return e.appendChild(t, a), t
                },
                render: function (t, a, n) {
                    var r = a.dom,
                        i = a.hooks,
                        d = i.get,
                        s = i.block;
                    r.detectNamespace(n);
                    var c;
                    a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r), this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0), this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                    var o = r.createMorphAt(c, 0, 0, n);
                    return r.insertBoundary(c, null), r.insertBoundary(c, 0), s(a, o, t, "mouseover-video", [], {
                        post: d(a, t, "currentPost"),
                        className: "small",
                        mouseEntered: "bindFullscreenListener",
                        mouseLeft: "unbindFullscreenListener"
                    }, e, null), c
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createElement("div");
                e.setAttribute(a, "class", "sidebar-video sidebar-list");
                var n = e.createTextNode("\n");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n), e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a), t
            },
            render: function (t, a, n) {
                var r = a.dom,
                    i = a.hooks,
                    d = i.get,
                    s = i.block;
                r.detectNamespace(n);
                var c;
                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r), this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0), this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                var o = r.createMorphAt(r.childAt(c, [0]), 1, 1);
                return s(a, o, t, "if", [d(a, t, "currentPost")], {}, e, null), c
            }
        }
    }())
}), define("vine-ember/templates/explore/tags", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        var e = function () {
            var e = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createComment("");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.get,
                            d = r.inline;
                        n.detectNamespace(a);
                        var s;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                        var c = n.createMorphAt(s, 0, 0, a);
                        return n.insertBoundary(s, null), n.insertBoundary(s, 0), d(t, c, e, "tv-link", [], {
                            route: "tag",
                            routeParam: i(t, e, "tag"),
                            text: i(t, e, "hashtag")
                        }), s
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null,
                hasRendered: !1,
                build: function (e) {
                    var t = e.createDocumentFragment(),
                        a = e.createTextNode("  ");
                    e.appendChild(t, a);
                    var a = e.createComment("");
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a), t
                },
                render: function (t, a, n) {
                    var r = a.dom,
                        i = a.hooks,
                        d = i.block;
                    r.detectNamespace(n);
                    var s;
                    a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                    var c = r.createMorphAt(s, 1, 1, n);
                    return d(a, c, t, "each", [], {}, e, null), s
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createComment("");
                return e.appendChild(t, a), t
            },
            render: function (t, a, n) {
                var r = a.dom,
                    i = a.hooks,
                    d = i.block;
                r.detectNamespace(n);
                var s;
                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                var c = r.createMorphAt(s, 0, 0, n);
                return r.insertBoundary(s, null), r.insertBoundary(s, 0), d(a, c, t, "module-block", [], {
                    className: "trending-metadata",
                    icon: "tag",
                    title: "Trending Tags"
                }, e, null), s
            }
        }
    }())
}), define("vine-ember/templates/forgot-password", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        var e = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("      ");
                        e.appendChild(t, a);
                        var a = e.createElement("div");
                        e.setAttribute(a, "class", "icon-smiley"), e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom;
                        n.detectNamespace(a);
                        var r;
                        return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n), this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0), this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n), r
                    }
                }
            }(),
            t = function () {
                var e = function () {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null,
                        hasRendered: !1,
                        build: function (e) {
                            var t = e.createDocumentFragment(),
                                a = e.createElement("button"),
                                n = e.createTextNode("Back to Sign In");
                            return e.appendChild(a, n), e.appendChild(t, a), t
                        },
                        render: function (e, t, a) {
                            var n = t.dom;
                            n.detectNamespace(a);
                            var r;
                            return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n), this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0), this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n), r
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("      ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (t, a, n) {
                        var r = a.dom,
                            i = a.hooks,
                            d = i.block;
                        r.detectNamespace(n);
                        var s;
                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                        var c = r.createMorphAt(s, 1, 1, n);
                        return d(a, c, t, "link-to", ["login"], {}, e, null), s
                    }
                }
            }(),
            a = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("      ");
                        e.appendChild(t, a);
                        var a = e.createElement("form");
                        e.setAttribute(a, "id", "forgot-password");
                        var n = e.createTextNode("\n        ");
                        e.appendChild(a, n);
                        var n = e.createElement("div");
                        e.setAttribute(n, "class", "label-row");
                        var r = e.createTextNode("\n          ");
                        e.appendChild(n, r);
                        var r = e.createElement("div");
                        e.setAttribute(r, "class", "icon-frowny"), e.appendChild(n, r);
                        var r = e.createTextNode("\n          ");
                        e.appendChild(n, r);
                        var r = e.createElement("div");
                        e.setAttribute(r, "class", "message");
                        var i = e.createTextNode("Forgot your password?");
                        e.appendChild(r, i), e.appendChild(n, r);
                        var r = e.createTextNode("\n        ");
                        e.appendChild(n, r), e.appendChild(a, n);
                        var n = e.createTextNode("\n        ");
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        e.appendChild(a, n);
                        var n = e.createTextNode("\n        ");
                        e.appendChild(a, n);
                        var n = e.createElement("button");
                        e.setAttribute(n, "type", "submit");
                        var r = e.createTextNode("Reset Password");
                        e.appendChild(n, r), e.appendChild(a, n);
                        var n = e.createTextNode("\n      ");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.element,
                            d = r.get,
                            s = r.inline;
                        n.detectNamespace(a);
                        var c;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n), this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0), this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                        var o = n.childAt(c, [1]),
                            l = n.createMorphAt(o, 3, 3);
                        return i(t, o, e, "action", ["submitEmail"], {
                            on: "submit"
                        }), s(t, l, e, "my-input", [], {
                            name: "email",
                            placeholder: "Email",
                            value: d(t, e, "email")
                        }), c
                    }
                }
            }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createElement("div");
                e.setAttribute(a, "class", "login-page");
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("div"),
                    r = e.createTextNode("\n");
                e.appendChild(n, r);
                var r = e.createComment("");
                e.appendChild(n, r);
                var r = e.createTextNode("    ");
                e.appendChild(n, r);
                var r = e.createElement("div"),
                    i = e.createComment("");
                e.appendChild(r, i), e.appendChild(n, r);
                var r = e.createTextNode("\n\n");
                e.appendChild(n, r);
                var r = e.createComment("");
                e.appendChild(n, r);
                var r = e.createTextNode("  ");
                e.appendChild(n, r), e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n), e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a), t
            },
            render: function (n, r, i) {
                var d = r.dom,
                    s = r.hooks,
                    c = s.element,
                    o = s.get,
                    l = s.block,
                    h = s.content;
                d.detectNamespace(i);
                var u;
                r.useFragmentCache && d.canClone ? (null === this.cachedFragment && (u = this.build(d), this.hasRendered ? this.cachedFragment = u : this.hasRendered = !0), this.cachedFragment && (u = d.cloneNode(this.cachedFragment, !0))) : u = this.build(d);
                var p = d.childAt(u, [0, 1]),
                    m = d.childAt(p, [3]),
                    v = d.createMorphAt(p, 1, 1),
                    g = d.createMorphAt(m, 0, 0),
                    b = d.createMorphAt(p, 5, 5);
                return c(r, p, n, "bind-attr", [], {
                    "class": ":login-container submitted"
                }), l(r, v, n, "if", [o(r, n, "submitted")], {}, e, null), c(r, m, n, "bind-attr", [], {
                    "class": ":message message.type"
                }), h(r, g, n, "message.text"), l(r, b, n, "if", [o(r, n, "submitted")], {}, t, a), u
            }
        }
    }())
}), define("vine-ember/templates/fullscreen-post", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        var e = function () {
                var e = function () {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null,
                        hasRendered: !1,
                        build: function (e) {
                            var t = e.createDocumentFragment(),
                                a = e.createTextNode("      ");
                            e.appendChild(t, a);
                            var a = e.createComment("");
                            e.appendChild(t, a);
                            var a = e.createTextNode("\n");
                            return e.appendChild(t, a), t
                        },
                        render: function (e, t, a) {
                            var n = t.dom,
                                r = t.hooks,
                                i = r.inline;
                            n.detectNamespace(a);
                            var d;
                            t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                            var s = n.createMorphAt(d, 1, 1, a);
                            return i(t, s, e, "partial", ["explicit-content"], {}), d
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createComment("");
                        return e.appendChild(t, a), t
                    },
                    render: function (t, a, n) {
                        var r = a.dom,
                            i = a.hooks,
                            d = i.get,
                            s = i.block;
                        r.detectNamespace(n);
                        var c;
                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r), this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0), this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                        var o = r.createMorphAt(c, 0, 0, n);
                        return r.insertBoundary(c, null), r.insertBoundary(c, 0), s(a, o, t, "if", [d(a, t, "explicitContent")], {}, e, null), c
                    }
                }
            }(),
            t = function () {
                var e = function () {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null,
                        hasRendered: !1,
                        build: function (e) {
                            var t = e.createDocumentFragment(),
                                a = e.createTextNode("            ");
                            e.appendChild(t, a);
                            var a = e.createComment("");
                            e.appendChild(t, a);
                            var a = e.createTextNode("\n            ");
                            e.appendChild(t, a);
                            var a = e.createComment("");
                            e.appendChild(t, a);
                            var a = e.createTextNode("\n");
                            return e.appendChild(t, a), t
                        },
                        render: function (e, t, a) {
                            var n = t.dom,
                                r = t.hooks,
                                i = r.inline,
                                d = r.get;
                            n.detectNamespace(a);
                            var s;
                            t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                            var c = n.createMorphAt(s, 1, 1, a),
                                o = n.createMorphAt(s, 3, 3, a);
                            return i(t, c, e, "partial", ["post-byline"], {}), i(t, o, e, "user-info", [], {
                                data: d(t, e, "this"),
                                cssClass: "user-info-size-60 user-info-stacked user-info-hide-metadata user-info-inherit-color"
                            }), s
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createComment("");
                        return e.appendChild(t, a), t
                    },
                    render: function (t, a, n) {
                        var r = a.dom,
                            i = a.hooks,
                            d = i.get,
                            s = i.block;
                        r.detectNamespace(n);
                        var c;
                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r), this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0), this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                        var o = r.createMorphAt(c, 0, 0, n);
                        return r.insertBoundary(c, null), r.insertBoundary(c, 0), s(a, o, t, "with", [d(a, t, "view.post")], {}, e, null), c
                    }
                }
            }(),
            a = function () {
                var e = function () {
                    var e = function () {
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createComment("");
                                return e.appendChild(t, a), t
                            },
                            render: function (e, t, a) {
                                var n = t.dom,
                                    r = t.hooks,
                                    i = r.get,
                                    d = r.inline;
                                n.detectNamespace(a);
                                var s;
                                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                                var c = n.createMorphAt(s, 0, 0, a);
                                return n.insertBoundary(s, null), n.insertBoundary(s, 0), d(t, c, e, "secure-img", [], {
                                    src: i(t, e, "iconUrl")
                                }), s
                            }
                        }
                    }();
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null,
                        hasRendered: !1,
                        build: function (e) {
                            var t = e.createDocumentFragment(),
                                a = e.createTextNode("              ");
                            e.appendChild(t, a);
                            var a = e.createElement("div");
                            e.setAttribute(a, "class", "icon");
                            var n = e.createTextNode("\n                ");
                            e.appendChild(a, n);
                            var n = e.createComment("");
                            e.appendChild(a, n);
                            var n = e.createTextNode("\n              ");
                            e.appendChild(a, n), e.appendChild(t, a);
                            var a = e.createTextNode("\n");
                            return e.appendChild(t, a), t
                        },
                        render: function (t, a, n) {
                            var r = a.dom,
                                i = a.hooks,
                                d = i.get,
                                s = i.element,
                                c = i.block;
                            r.detectNamespace(n);
                            var o;
                            a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (o = this.build(r), this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0), this.cachedFragment && (o = r.cloneNode(this.cachedFragment, !0))) : o = this.build(r);
                            var l = r.childAt(o, [1]),
                                h = r.createMorphAt(l, 1, 1);
                            return s(a, l, t, "bind-attr", [], {
                                style: d(a, t, "iconStyle")
                            }), c(a, h, t, "if", [d(a, t, "iconUrl")], {}, e, null), o
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("          ");
                        e.appendChild(t, a);
                        var a = e.createElement("h2");
                        e.setAttribute(a, "class", "timeline-name");
                        var n = e.createTextNode("\n");
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        e.appendChild(a, n);
                        var n = e.createElement("span"),
                            r = e.createComment("");
                        e.appendChild(n, r), e.appendChild(a, n);
                        var n = e.createTextNode("\n          ");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (t, a, n) {
                        var r = a.dom,
                            i = a.hooks,
                            d = i.get,
                            s = i.block,
                            c = i.inline;
                        r.detectNamespace(n);
                        var o;
                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (o = this.build(r), this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0), this.cachedFragment && (o = r.cloneNode(this.cachedFragment, !0))) : o = this.build(r);
                        var l = r.childAt(o, [1]),
                            h = r.createMorphAt(l, 1, 1),
                            u = r.createMorphAt(r.childAt(l, [2]), 0, 0);
                        return s(a, h, t, "if", [d(a, t, "iconStyle")], {}, e, null), c(a, u, t, "html-linebreak", [d(a, t, "timelineName")], {}), o
                    }
                }
            }(),
            n = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("          ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.get,
                            d = r.inline;
                        n.detectNamespace(a);
                        var s;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                        var c = n.createMorphAt(s, 1, 1, a);
                        return d(t, c, e, "share-widgets", [], {
                            fbUrl: i(t, e, "view.fbUrl"),
                            tweetUrl: i(t, e, "view.tweetUrl")
                        }), s
                    }
                }
            }(),
            r = function () {
                var e = function () {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null,
                        hasRendered: !1,
                        build: function (e) {
                            var t = e.createDocumentFragment(),
                                a = e.createTextNode("          ");
                            e.appendChild(t, a);
                            var a = e.createComment("");
                            e.appendChild(t, a);
                            var a = e.createTextNode("\n          ");
                            e.appendChild(t, a);
                            var a = e.createComment("");
                            e.appendChild(t, a);
                            var a = e.createTextNode("\n");
                            return e.appendChild(t, a), t
                        },
                        render: function (e, t, a) {
                            var n = t.dom,
                                r = t.hooks,
                                i = r.inline,
                                d = r.get;
                            n.detectNamespace(a);
                            var s;
                            t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                            var c = n.createMorphAt(s, 1, 1, a),
                                o = n.createMorphAt(s, 3, 3, a);
                            return i(t, c, e, "partial", ["post-byline"], {}), i(t, o, e, "user-info", [], {
                                data: d(t, e, "this"),
                                cssClass: "user-info-size-38 user-info-hide-metadata user-info-inherit-color user-info-stacked"
                            }), s
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createComment("");
                        return e.appendChild(t, a), t
                    },
                    render: function (t, a, n) {
                        var r = a.dom,
                            i = a.hooks,
                            d = i.get,
                            s = i.block;
                        r.detectNamespace(n);
                        var c;
                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r), this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0), this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                        var o = r.createMorphAt(c, 0, 0, n);
                        return r.insertBoundary(c, null), r.insertBoundary(c, 0), s(a, o, t, "with", [d(a, t, "view.post")], {}, e, null), c
                    }
                }
            }(),
            i = function () {
                var e = function () {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null,
                        hasRendered: !1,
                        build: function (e) {
                            var t = e.createDocumentFragment(),
                                a = e.createTextNode("            ·\n            ");
                            e.appendChild(t, a);
                            var a = e.createComment("");
                            e.appendChild(t, a);
                            var a = e.createTextNode("\n");
                            return e.appendChild(t, a), t
                        },
                        render: function (e, t, a) {
                            var n = t.dom,
                                r = t.hooks,
                                i = r.get,
                                d = r.inline;
                            n.detectNamespace(a);
                            var s;
                            t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                            var c = n.createMorphAt(s, 1, 1, a);
                            return d(t, c, e, "loop-count", [], {
                                postId: i(t, e, "postIdStr"),
                                loops: i(t, e, "loops"),
                                postDate: i(t, e, "created")
                            }), s
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("        ");
                        e.appendChild(t, a);
                        var a = e.createElement("h2");
                        e.setAttribute(a, "class", "description");
                        var n = e.createComment("");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n        ");
                        e.appendChild(t, a);
                        var a = e.createElement("h5"),
                            n = e.createTextNode("\n          ");
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        e.appendChild(a, n);
                        var n = e.createTextNode("\n");
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        e.appendChild(a, n);
                        var n = e.createTextNode("        ");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (t, a, n) {
                        var r = a.dom,
                            i = a.hooks,
                            d = i.get,
                            s = i.inline,
                            c = i.block;
                        r.detectNamespace(n);
                        var o;
                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (o = this.build(r), this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0), this.cachedFragment && (o = r.cloneNode(this.cachedFragment, !0))) : o = this.build(r);
                        var l = r.childAt(o, [3]),
                            h = r.createMorphAt(r.childAt(o, [1]), 0, 0),
                            u = r.createMorphAt(l, 1, 1),
                            p = r.createMorphAt(l, 3, 3);
                        return s(a, h, t, "linkify-entities", [], {
                            text: d(a, t, "description"),
                            entities: d(a, t, "entities")
                        }), s(a, u, t, "partial", ["time-and-location"], {}), c(a, p, t, "if", [d(a, t, "loops")], {}, e, null), o
                    }
                }
            }(),
            d = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createElement("div");
                        e.setAttribute(a, "class", "logo");
                        var n = e.createElement("div");
                        return e.setAttribute(n, "class", "icon-vine_logo"), e.appendChild(a, n), e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom;
                        n.detectNamespace(a);
                        var r;
                        return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n), this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0), this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n), r
                    }
                }
            }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createElement("div");
                e.setAttribute(a, "class", "video-container continuous");
                var n = e.createTextNode("\n");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n), e.appendChild(t, a);
                var a = e.createTextNode("\n\n");
                e.appendChild(t, a);
                var a = e.createElement("div");
                e.setAttribute(a, "class", "vine-metadata");
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("div");
                e.setAttribute(n, "class", "metadata-wrapper");
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("div"),
                    i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("div");
                e.setAttribute(i, "bind-attr", ""), e.setAttribute(i, "class", "fullscreen-header");
                var d = e.createTextNode("\n");
                e.appendChild(i, d);
                var d = e.createComment("");
                e.appendChild(i, d);
                var d = e.createTextNode("        ");
                e.appendChild(i, d);
                var d = e.createElement("h5");
                e.setAttribute(d, "class", "post-position");
                var s = e.createComment("");
                e.appendChild(d, s);
                var s = e.createTextNode(" of ");
                e.appendChild(d, s);
                var s = e.createComment("");
                e.appendChild(d, s), e.appendChild(i, d);
                var d = e.createTextNode("\n");
                e.appendChild(i, d);
                var d = e.createComment("");
                e.appendChild(i, d);
                var d = e.createTextNode("      ");
                e.appendChild(i, d), e.appendChild(r, i);
                var i = e.createTextNode("\n\n      ");
                e.appendChild(r, i);
                var i = e.createElement("div");
                e.setAttribute(i, "class", "share-close");
                var d = e.createTextNode("\n        ");
                e.appendChild(i, d);
                var d = e.createElement("div");
                e.setAttribute(d, "class", "icon-close_x"), e.appendChild(i, d);
                var d = e.createTextNode("\n      ");
                e.appendChild(i, d), e.appendChild(r, i);
                var i = e.createTextNode("\n\n");
                e.appendChild(r, i);
                var i = e.createComment("");
                e.appendChild(r, i);
                var i = e.createTextNode("\n");
                e.appendChild(r, i);
                var i = e.createComment("");
                e.appendChild(r, i);
                var i = e.createTextNode("    ");
                e.appendChild(r, i), e.appendChild(n, r);
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("div");
                e.setAttribute(r, "class", "fullscreen-actions");
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("div"),
                    d = e.createTextNode("\n        ");
                e.appendChild(i, d);
                var d = e.createElement("div");
                e.setAttribute(d, "class", "icon-arrow_left"), e.appendChild(i, d);
                var d = e.createTextNode("\n      ");
                e.appendChild(i, d), e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("div"),
                    d = e.createTextNode("\n        ");
                e.appendChild(i, d);
                var d = e.createElement("div");
                e.setAttribute(d, "class", "icon-like"), e.appendChild(i, d);
                var d = e.createTextNode("\n      ");
                e.appendChild(i, d), e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("div"),
                    d = e.createTextNode("\n        ");
                e.appendChild(i, d);
                var d = e.createElement("div");
                e.setAttribute(d, "class", "icon-arrow_right"), e.appendChild(i, d);
                var d = e.createTextNode("\n      ");
                e.appendChild(i, d), e.appendChild(r, i);
                var i = e.createTextNode("\n    ");
                e.appendChild(r, i), e.appendChild(n, r);
                var r = e.createTextNode("\n\n    ");
                e.appendChild(n, r);
                var r = e.createComment("");
                e.appendChild(n, r);
                var r = e.createTextNode("\n  ");
                e.appendChild(n, r), e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n), e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a), t
            },
            render: function (s, c, o) {
                var l = c.dom,
                    h = c.hooks,
                    u = h.get,
                    p = h.element,
                    m = h.block,
                    v = h.inline;
                l.detectNamespace(o);
                var g;
                c.useFragmentCache && l.canClone ? (null === this.cachedFragment && (g = this.build(l), this.hasRendered ? this.cachedFragment = g : this.hasRendered = !0), this.cachedFragment && (g = l.cloneNode(this.cachedFragment, !0))) : g = this.build(l);
                var b = l.childAt(g, [0]),
                    C = l.childAt(g, [2, 1]),
                    f = l.childAt(C, [1]),
                    F = l.childAt(f, [1]),
                    N = l.childAt(F, [3]),
                    T = l.childAt(f, [3]),
                    x = l.childAt(C, [3]),
                    A = l.childAt(x, [1]),
                    k = l.childAt(x, [3]),
                    E = l.childAt(x, [5]),
                    R = l.createMorphAt(b, 1, 1),
                    M = l.createMorphAt(F, 1, 1),
                    y = l.createMorphAt(N, 0, 0),
                    w = l.createMorphAt(N, 2, 2),
                    B = l.createMorphAt(F, 5, 5),
                    P = l.createMorphAt(f, 5, 5),
                    L = l.createMorphAt(f, 7, 7),
                    H = l.createMorphAt(C, 5, 5);
                return p(c, b, s, "bind-attr", [], {
                    style: u(c, s, "backgroundImageStyle")
                }), m(c, R, s, "with", [u(c, s, "view.post")], {}, e, null), p(c, f, s, "bind-attr", [], {
                    "class": ":post-info-container isUserTimeline"
                }), m(c, M, s, "if", [u(c, s, "isUserTimeline")], {}, t, a), v(c, y, s, "format-count", [u(c, s, "positionIndex")], {}), v(c, w, s, "format-count", [u(c, s, "totalPosts")], {}), m(c, B, s, "if", [u(c, s, "view.shouldShowShare")], {}, n, null), p(c, T, s, "action", ["closeFullscreen"], {}), m(c, P, s, "unless", [u(c, s, "isUserTimeline")], {}, r, null), m(c, L, s, "with", [u(c, s, "view.post")], {}, i, null), p(c, A, s, "bind-attr", [], {
                    "class": ":action :nav-action :left prevAvailable::disabled"
                }), p(c, A, s, "action", ["navLeft"], {}), p(c, k, s, "bind-attr", [], {
                    "class": ":action :like view.post.liked:active"
                }), p(c, k, s, "action", ["like"], {}), p(c, E, s, "bind-attr", [], {
                    "class": ":action :nav-action :right nextAvailable::disabled"
                }), p(c, E, s, "action", ["navRight"], {}), m(c, H, s, "link-to", ["index"], {}, d, null), g
            }
        }
    }())
}), define("vine-ember/templates/grid-post", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        var e = function () {
            var e = function () {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null,
                        hasRendered: !1,
                        build: function (e) {
                            var t = e.createDocumentFragment();
                            return t
                        },
                        render: function (e, t, a) {
                            var n = t.dom;
                            n.detectNamespace(a);
                            var r;
                            return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n), this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0), this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n), r
                        }
                    }
                }(),
                t = function () {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null,
                        hasRendered: !1,
                        build: function (e) {
                            var t = e.createDocumentFragment(),
                                a = e.createTextNode("      ");
                            e.appendChild(t, a);
                            var a = e.createComment("");
                            e.appendChild(t, a);
                            var a = e.createTextNode("\n");
                            return e.appendChild(t, a), t
                        },
                        render: function (e, t, a) {
                            var n = t.dom,
                                r = t.hooks,
                                i = r.get,
                                d = r.inline;
                            n.detectNamespace(a);
                            var s;
                            t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                            var c = n.createMorphAt(s, 1, 1, a);
                            return d(t, c, e, "loop-count", [], {
                                postId: i(t, e, "postIdStr"),
                                loops: i(t, e, "loops"),
                                postDate: i(t, e, "created")
                            }), s
                        }
                    }
                }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null,
                hasRendered: !1,
                build: function (e) {
                    var t = e.createDocumentFragment(),
                        a = e.createTextNode("  ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "info");
                    var n = e.createTextNode("\n    ");
                    e.appendChild(a, n);
                    var n = e.createComment("");
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n\n    ");
                    e.appendChild(a, n);
                    var n = e.createElement("h3");
                    e.setAttribute(n, "class", "description");
                    var r = e.createComment("");
                    e.appendChild(n, r), e.appendChild(a, n);
                    var n = e.createTextNode("\n\n    ");
                    e.appendChild(a, n);
                    var n = e.createElement("div");
                    e.setAttribute(n, "class", "post-actions");
                    var r = e.createTextNode("\n");
                    e.appendChild(n, r);
                    var r = e.createComment("");
                    e.appendChild(n, r);
                    var r = e.createTextNode("      ");
                    e.appendChild(n, r);
                    var r = e.createElement("button");
                    e.setAttribute(r, "class", "clear twitter");
                    var i = e.createTextNode("\n        ");
                    e.appendChild(r, i);
                    var i = e.createElement("span");
                    e.setAttribute(i, "class", "icon-twitter"), e.appendChild(r, i);
                    var i = e.createTextNode("\n      ");
                    e.appendChild(r, i), e.appendChild(n, r);
                    var r = e.createTextNode("\n      ");
                    e.appendChild(n, r);
                    var r = e.createElement("button");
                    e.setAttribute(r, "class", "clear facebook");
                    var i = e.createTextNode("\n        ");
                    e.appendChild(r, i);
                    var i = e.createElement("span");
                    e.setAttribute(i, "class", "icon-facebook"), e.appendChild(r, i);
                    var i = e.createTextNode("\n      ");
                    e.appendChild(r, i), e.appendChild(n, r);
                    var r = e.createTextNode("\n    ");
                    e.appendChild(n, r), e.appendChild(a, n);
                    var n = e.createTextNode("\n");
                    e.appendChild(a, n);
                    var n = e.createComment("");
                    e.appendChild(a, n);
                    var n = e.createTextNode("  ");
                    e.appendChild(a, n), e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a), t
                },
                render: function (a, n, r) {
                    var i = n.dom,
                        d = n.hooks,
                        s = d.get,
                        c = d.inline,
                        o = d.block,
                        l = d.element;
                    i.detectNamespace(r);
                    var h;
                    n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (h = this.build(i), this.hasRendered ? this.cachedFragment = h : this.hasRendered = !0), this.cachedFragment && (h = i.cloneNode(this.cachedFragment, !0))) : h = this.build(i);
                    var u = i.childAt(h, [1]),
                        p = i.childAt(u, [5]),
                        m = i.childAt(p, [3]),
                        v = i.childAt(p, [5]),
                        g = i.createMorphAt(u, 1, 1),
                        b = i.createMorphAt(i.childAt(u, [3]), 0, 0),
                        C = i.createMorphAt(p, 1, 1),
                        f = i.createMorphAt(u, 7, 7);
                    return c(n, g, a, "user-info", [], {
                        data: s(n, a, "this"),
                        cssClass: "user-info-size-38"
                    }), c(n, b, a, "linkify-entities", [], {
                        text: s(n, a, "description"),
                        entities: s(n, a, "entities")
                    }), o(n, C, a, "animated-button", [], {
                        actionName: "like",
                        iconName: "like_stroked",
                        action: "like",
                        isActive: s(n, a, "liked")
                    }, e, null), l(n, m, a, "action", ["tweet"], {}), l(n, v, a, "action", ["facebookShare"], {}), o(n, f, a, "if", [s(n, a, "loops")], {}, t, null), h
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createComment("");
                return e.appendChild(t, a), t
            },
            render: function (t, a, n) {
                var r = a.dom,
                    i = a.hooks,
                    d = i.get,
                    s = i.block;
                r.detectNamespace(n);
                var c;
                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r), this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0), this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                var o = r.createMorphAt(c, 0, 0, n);
                return r.insertBoundary(c, null), r.insertBoundary(c, 0), s(a, o, t, "mouseover-video", [], {
                    post: d(a, t, "this")
                }, e, null), c
            }
        }
    }())
}), define("vine-ember/templates/header", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        var e = function () {
                var e = function () {
                        var e = function () {
                            return {
                                isHTMLBars: !0,
                                revision: "Ember@1.11.3",
                                blockParams: 0,
                                cachedFragment: null,
                                hasRendered: !1,
                                build: function (e) {
                                    var t = e.createDocumentFragment(),
                                        a = e.createElement("button"),
                                        n = e.createElement("span");
                                    e.setAttribute(n, "class", "icon-feed"), e.appendChild(a, n);
                                    var n = e.createElement("h3"),
                                        r = e.createTextNode("Home Feed");
                                    return e.appendChild(n, r), e.appendChild(a, n), e.appendChild(t, a), t
                                },
                                render: function (e, t, a) {
                                    var n = t.dom;
                                    n.detectNamespace(a);
                                    var r;
                                    return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n), this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0), this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n), r
                                }
                            }
                        }();
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createTextNode("      ");
                                e.appendChild(t, a);
                                var a = e.createComment("");
                                e.appendChild(t, a);
                                var a = e.createTextNode("\n");
                                return e.appendChild(t, a), t
                            },
                            render: function (t, a, n) {
                                var r = a.dom,
                                    i = a.hooks,
                                    d = i.block;
                                r.detectNamespace(n);
                                var s;
                                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                                var c = r.createMorphAt(s, 1, 1, n);
                                return d(a, c, t, "link-to", ["feed"], {}, e, null), s
                            }
                        }
                    }(),
                    t = function () {
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createTextNode("      ");
                                e.appendChild(t, a);
                                var a = e.createElement("button"),
                                    n = e.createElement("span");
                                e.setAttribute(n, "class", "icon-index"), e.appendChild(a, n);
                                var n = e.createElement("h3"),
                                    r = e.createTextNode("Explore");
                                e.appendChild(n, r), e.appendChild(a, n), e.appendChild(t, a);
                                var a = e.createTextNode("\n");
                                return e.appendChild(t, a), t
                            },
                            render: function (e, t, a) {
                                var n = t.dom;
                                n.detectNamespace(a);
                                var r;
                                return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n), this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0), this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n), r
                            }
                        }
                    }(),
                    a = function () {
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createTextNode("      ");
                                e.appendChild(t, a);
                                var a = e.createElement("button"),
                                    n = e.createElement("span");
                                e.setAttribute(n, "class", "icon-popular_now"), e.appendChild(a, n);
                                var n = e.createElement("h3"),
                                    r = e.createTextNode("Popular Now");
                                e.appendChild(n, r), e.appendChild(a, n), e.appendChild(t, a);
                                var a = e.createTextNode("\n");
                                return e.appendChild(t, a), t
                            },
                            render: function (e, t, a) {
                                var n = t.dom;
                                n.detectNamespace(a);
                                var r;
                                return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n), this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0), this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n), r
                            }
                        }
                    }(),
                    n = function () {
                        var e = function () {
                            return {
                                isHTMLBars: !0,
                                revision: "Ember@1.11.3",
                                blockParams: 0,
                                cachedFragment: null,
                                hasRendered: !1,
                                build: function (e) {
                                    var t = e.createDocumentFragment(),
                                        a = e.createTextNode("        ");
                                    e.appendChild(t, a);
                                    var a = e.createElement("button"),
                                        n = e.createTextNode("\n          ");
                                    e.appendChild(a, n);
                                    var n = e.createComment("");
                                    e.appendChild(a, n);
                                    var n = e.createTextNode("\n          ");
                                    e.appendChild(a, n);
                                    var n = e.createElement("h3"),
                                        r = e.createTextNode("Profile");
                                    e.appendChild(n, r), e.appendChild(a, n);
                                    var n = e.createTextNode("\n        ");
                                    e.appendChild(a, n), e.appendChild(t, a);
                                    var a = e.createTextNode("\n");
                                    return e.appendChild(t, a), t
                                },
                                render: function (e, t, a) {
                                    var n = t.dom,
                                        r = t.hooks,
                                        i = r.get,
                                        d = r.inline;
                                    n.detectNamespace(a);
                                    var s;
                                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                                    var c = n.createMorphAt(n.childAt(s, [1]), 1, 1);
                                    return d(t, c, e, "secure-img", [], {
                                        src: i(t, e, "currentUser.avatarUrl"),
                                        "class": "avatar",
                                        style: i(t, e, "currentUser.borderColorStyle")
                                    }), s
                                }
                            }
                        }();
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createComment("");
                                return e.appendChild(t, a), t
                            },
                            render: function (t, a, n) {
                                var r = a.dom,
                                    i = a.hooks,
                                    d = i.get,
                                    s = i.block;
                                r.detectNamespace(n);
                                var c;
                                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r), this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0), this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                                var o = r.createMorphAt(c, 0, 0, n);
                                return r.insertBoundary(c, null), r.insertBoundary(c, 0), s(a, o, t, "link-user", [], {
                                    user: d(a, t, "currentUser")
                                }, e, null), c
                            }
                        }
                    }(),
                    r = function () {
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createTextNode("      ");
                                e.appendChild(t, a);
                                var a = e.createElement("button"),
                                    n = e.createTextNode("\n        ");
                                e.appendChild(a, n);
                                var n = e.createElement("span");
                                e.setAttribute(n, "class", "icon-logout"), e.appendChild(a, n);
                                var n = e.createTextNode("\n        ");
                                e.appendChild(a, n);
                                var n = e.createElement("h3"),
                                    r = e.createTextNode("Logout");
                                e.appendChild(n, r), e.appendChild(a, n);
                                var n = e.createTextNode("\n      ");
                                e.appendChild(a, n), e.appendChild(t, a);
                                var a = e.createTextNode("\n");
                                return e.appendChild(t, a), t
                            },
                            render: function (e, t, a) {
                                var n = t.dom,
                                    r = t.hooks,
                                    i = r.element;
                                n.detectNamespace(a);
                                var d;
                                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                                var s = n.childAt(d, [1]);
                                return i(t, s, e, "action", ["logout"], {}), d
                            }
                        }
                    }(),
                    i = function () {
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createTextNode("      ");
                                e.appendChild(t, a);
                                var a = e.createElement("button"),
                                    n = e.createTextNode("\n        ");
                                e.appendChild(a, n);
                                var n = e.createElement("span");
                                e.setAttribute(n, "class", "icon-logout"), e.appendChild(a, n);
                                var n = e.createTextNode("\n        ");
                                e.appendChild(a, n);
                                var n = e.createElement("h3"),
                                    r = e.createTextNode("Login");
                                e.appendChild(n, r), e.appendChild(a, n);
                                var n = e.createTextNode("\n      ");
                                e.appendChild(a, n), e.appendChild(t, a);
                                var a = e.createTextNode("\n");
                                return e.appendChild(t, a), t
                            },
                            render: function (e, t, a) {
                                var n = t.dom,
                                    r = t.hooks,
                                    i = r.element;
                                n.detectNamespace(a);
                                var d;
                                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                                var s = n.childAt(d, [1]);
                                return i(t, s, e, "action", ["login"], {}), d
                            }
                        }
                    }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("  ");
                        e.appendChild(t, a);
                        var a = e.createElement("div");
                        e.setAttribute(a, "class", "mobile-menu");
                        var n = e.createTextNode("\n");
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        e.appendChild(a, n);
                        var n = e.createTextNode("  ");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n  ");
                        e.appendChild(t, a);
                        var a = e.createElement("div");
                        e.setAttribute(a, "class", "global-search");
                        var n = e.createComment("");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (d, s, c) {
                        var o = s.dom,
                            l = s.hooks,
                            h = l.element,
                            u = l.get,
                            p = l.block,
                            m = l.inline;
                        o.detectNamespace(c);
                        var v;
                        s.useFragmentCache && o.canClone ? (null === this.cachedFragment && (v = this.build(o), this.hasRendered ? this.cachedFragment = v : this.hasRendered = !0), this.cachedFragment && (v = o.cloneNode(this.cachedFragment, !0))) : v = this.build(o);
                        var g = o.childAt(v, [1]),
                            b = o.createMorphAt(g, 1, 1),
                            C = o.createMorphAt(g, 2, 2),
                            f = o.createMorphAt(g, 3, 3),
                            F = o.createMorphAt(g, 4, 4),
                            N = o.createMorphAt(g, 5, 5),
                            T = o.createMorphAt(o.childAt(v, [3]), 0, 0);
                        return h(s, g, d, "action", ["hideMobileMenu"], {
                            target: "view"
                        }), p(s, b, d, "if", [u(s, d, "session.isAuthenticated")], {}, e, null), p(s, C, d, "link-to", ["index"], {}, t, null), p(s, f, d, "link-to", ["popular-now"], {}, a, null), p(s, F, d, "if", [u(s, d, "currentUser")], {}, n, null), p(s, N, d, "if", [u(s, d, "session.isAuthenticated")], {}, r, i), m(s, T, d, "search-autocomplete", [], {
                            tagCount: 1,
                            venueCount: 1,
                            resultOrder: u(s, d, "searchAutocompleteOrder"),
                            isMobile: u(s, d, "isMobile")
                        }), v
                    }
                }
            }(),
            t = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("    ");
                        e.appendChild(t, a);
                        var a = e.createElement("button");
                        e.setAttribute(a, "class", "clear icon icon-menu"), e.appendChild(t, a);
                        var a = e.createTextNode("\n    ");
                        e.appendChild(t, a);
                        var a = e.createElement("button");
                        e.setAttribute(a, "class", "clear icon icon-search"), e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.element;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var s = n.childAt(d, [1]),
                            c = n.childAt(d, [3]);
                        return i(t, s, e, "action", ["toggleMobileMenu"], {
                            target: "view"
                        }), i(t, c, e, "action", ["toggleSearchMenu"], {
                            target: "view"
                        }), d
                    }
                }
            }(),
            a = function () {
                var e = function () {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null,
                        hasRendered: !1,
                        build: function (e) {
                            var t = e.createDocumentFragment(),
                                a = e.createComment("");
                            return e.appendChild(t, a), t
                        },
                        render: function (e, t, a) {
                            var n = t.dom,
                                r = t.hooks,
                                i = r.inline;
                            n.detectNamespace(a);
                            var d;
                            t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                            var s = n.createMorphAt(d, 0, 0, a);
                            return n.insertBoundary(d, null), n.insertBoundary(d, 0), i(t, s, e, "nav-button", [], {
                                route: "feed"
                            }), d
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("    ");
                        e.appendChild(t, a);
                        var a = e.createElement("div");
                        e.setAttribute(a, "class", "nav-buttons");
                        var n = e.createTextNode("\n      ");
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        e.appendChild(a, n);
                        var n = e.createTextNode("\n      ");
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        e.appendChild(a, n);
                        var n = e.createTextNode("\n      ");
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        e.appendChild(a, n);
                        var n = e.createTextNode("\n    ");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n    ");
                        e.appendChild(t, a);
                        var a = e.createElement("div");
                        e.setAttribute(a, "class", "global-search");
                        var n = e.createComment("");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (t, a, n) {
                        var r = a.dom,
                            i = a.hooks,
                            d = i.get,
                            s = i.block,
                            c = i.inline;
                        r.detectNamespace(n);
                        var o;
                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (o = this.build(r), this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0), this.cachedFragment && (o = r.cloneNode(this.cachedFragment, !0))) : o = this.build(r);
                        var l = r.childAt(o, [1]),
                            h = r.createMorphAt(l, 1, 1),
                            u = r.createMorphAt(l, 3, 3),
                            p = r.createMorphAt(l, 5, 5),
                            m = r.createMorphAt(r.childAt(o, [3]), 0, 0);
                        return s(a, h, t, "if", [d(a, t, "session.isAuthenticated")], {}, e, null), c(a, u, t, "nav-button", [], {
                            route: "index"
                        }), c(a, p, t, "nav-button", [], {
                            route: "popular-now"
                        }), c(a, m, t, "search-autocomplete", [], {
                            tagCount: 1,
                            venueCount: 1,
                            resultOrder: d(a, t, "searchAutocompleteOrder")
                        }), o
                    }
                }
            }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createComment("");
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                e.appendChild(t, a);
                var a = e.createElement("header"),
                    n = e.createTextNode("\n");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createTextNode("  ");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n), e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a), t
            },
            render: function (n, r, i) {
                var d = r.dom,
                    s = r.hooks,
                    c = s.get,
                    o = s.block,
                    l = s.element,
                    h = s.inline;
                d.detectNamespace(i);
                var u;
                r.useFragmentCache && d.canClone ? (null === this.cachedFragment && (u = this.build(d), this.hasRendered ? this.cachedFragment = u : this.hasRendered = !0), this.cachedFragment && (u = d.cloneNode(this.cachedFragment, !0))) : u = this.build(d);
                var p = d.childAt(u, [2]),
                    m = d.createMorphAt(u, 0, 0, i),
                    v = d.createMorphAt(p, 1, 1),
                    g = d.createMorphAt(p, 3, 3);
                return d.insertBoundary(u, 0), o(r, m, n, "if", [c(r, n, "isMobile")], {}, e, null), l(r, p, n, "bind-attr", [], {
                    "class": "session.isAuthenticated:logged-in:logged-out"
                }), o(r, v, n, "if", [c(r, n, "isMobile")], {}, t, a), h(r, g, n, "header-logo", [], {
                    isMobile: c(r, n, "isMobile"),
                    mobileTitle: c(r, n, "mobileTitle")
                }), u
            }
        }
    }())
}), define("vine-ember/templates/index", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        var e = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("  ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.inline;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var s = n.createMorphAt(d, 1, 1, a);
                        return i(t, s, e, "render", ["explore/mobile"], {}), d
                    }
                }
            }(),
            t = function () {
                var e = function () {
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createTextNode("    ");
                                e.appendChild(t, a);
                                var a = e.createComment("");
                                e.appendChild(t, a);
                                var a = e.createTextNode("\n");
                                return e.appendChild(t, a), t
                            },
                            render: function (e, t, a) {
                                var n = t.dom,
                                    r = t.hooks,
                                    i = r.inline;
                                n.detectNamespace(a);
                                var d;
                                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                                var s = n.createMorphAt(d, 1, 1, a);
                                return i(t, s, e, "partial", ["timelines/fullscreen"], {}), d
                            }
                        }
                    }(),
                    t = function () {
                        var e = function () {
                            return {
                                isHTMLBars: !0,
                                revision: "Ember@1.11.3",
                                blockParams: 0,
                                cachedFragment: null,
                                hasRendered: !1,
                                build: function (e) {
                                    var t = e.createDocumentFragment(),
                                        a = e.createTextNode("        ");
                                    e.appendChild(t, a);
                                    var a = e.createElement("div"),
                                        n = e.createTextNode("\n          ");
                                    e.appendChild(a, n);
                                    var n = e.createElement("h3"),
                                        r = e.createTextNode("TV Mode");
                                    e.appendChild(n, r), e.appendChild(a, n);
                                    var n = e.createTextNode("\n          ");
                                    e.appendChild(a, n);
                                    var n = e.createElement("div");
                                    e.setAttribute(n, "class", "icon-fullscreen"), e.appendChild(a, n);
                                    var n = e.createTextNode("\n        ");
                                    e.appendChild(a, n), e.appendChild(t, a);
                                    var a = e.createTextNode("\n");
                                    return e.appendChild(t, a), t
                                },
                                render: function (e, t, a) {
                                    var n = t.dom,
                                        r = t.hooks,
                                        i = r.element;
                                    n.detectNamespace(a);
                                    var d;
                                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                                    var s = n.childAt(d, [1]);
                                    return i(t, s, e, "bind-attr", [], {
                                        "class": ":fullscreen session.isAuthenticated::offset"
                                    }), i(t, s, e, "action", ["openFullscreen"], {}), d
                                }
                            }
                        }();
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createTextNode("    ");
                                e.appendChild(t, a);
                                var a = e.createElement("section");
                                e.setAttribute(a, "id", "explore-header");
                                var n = e.createTextNode("\n      ");
                                e.appendChild(a, n);
                                var n = e.createComment("");
                                e.appendChild(a, n);
                                var n = e.createTextNode("\n    ");
                                e.appendChild(a, n), e.appendChild(t, a);
                                var a = e.createTextNode("\n    ");
                                e.appendChild(t, a);
                                var a = e.createElement("div");
                                e.setAttribute(a, "id", "search-input");
                                var n = e.createComment("");
                                e.appendChild(a, n), e.appendChild(t, a);
                                var a = e.createTextNode("\n    ");
                                e.appendChild(t, a);
                                var a = e.createElement("section");
                                e.setAttribute(a, "id", "explore-content");
                                var n = e.createTextNode("\n");
                                e.appendChild(a, n);
                                var n = e.createComment("");
                                e.appendChild(a, n);
                                var n = e.createTextNode("      ");
                                e.appendChild(a, n);
                                var n = e.createElement("section");
                                e.setAttribute(n, "id", "explore-sidebar");
                                var r = e.createTextNode("\n        ");
                                e.appendChild(n, r);
                                var r = e.createComment("");
                                e.appendChild(n, r);
                                var r = e.createTextNode("\n        ");
                                e.appendChild(n, r);
                                var r = e.createComment("");
                                e.appendChild(n, r);
                                var r = e.createTextNode("\n        ");
                                e.appendChild(n, r);
                                var r = e.createComment("");
                                e.appendChild(n, r);
                                var r = e.createTextNode("\n        ");
                                e.appendChild(n, r);
                                var r = e.createComment("");
                                e.appendChild(n, r);
                                var r = e.createTextNode("\n      ");
                                e.appendChild(n, r), e.appendChild(a, n);
                                var n = e.createTextNode("\n      ");
                                e.appendChild(a, n);
                                var n = e.createElement("section");
                                e.setAttribute(n, "id", "explore-timeline");
                                var r = e.createTextNode("\n        ");
                                e.appendChild(n, r);
                                var r = e.createComment("");
                                e.appendChild(n, r);
                                var r = e.createTextNode("\n      ");
                                e.appendChild(n, r), e.appendChild(a, n);
                                var n = e.createTextNode("\n    ");
                                e.appendChild(a, n), e.appendChild(t, a);
                                var a = e.createTextNode("\n");
                                return e.appendChild(t, a), t
                            },
                            render: function (t, a, n) {
                                var r = a.dom,
                                    i = a.hooks,
                                    d = i.inline,
                                    s = i.get,
                                    c = i.block;
                                r.detectNamespace(n);
                                var o;
                                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (o = this.build(r), this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0), this.cachedFragment && (o = r.cloneNode(this.cachedFragment, !0))) : o = this.build(r);
                                var l = r.childAt(o, [5]),
                                    h = r.childAt(l, [3]),
                                    u = r.createMorphAt(r.childAt(o, [1]), 1, 1),
                                    p = r.createMorphAt(r.childAt(o, [3]), 0, 0),
                                    m = r.createMorphAt(l, 1, 1),
                                    v = r.createMorphAt(h, 1, 1),
                                    g = r.createMorphAt(h, 3, 3),
                                    b = r.createMorphAt(h, 5, 5),
                                    C = r.createMorphAt(h, 7, 7),
                                    f = r.createMorphAt(r.childAt(l, [5]), 1, 1);
                                return d(a, u, t, "render", ["splash"], {}), d(a, p, t, "search-autocomplete", [], {
                                    autofocus: !0,
                                    columnSize: 3
                                }), c(a, m, t, "if", [s(a, t, "fullscreenAvailable")], {}, e, null), d(a, v, t, "render", ["explore/channels"], {}), d(a, g, t, "render", ["explore/popular-now"], {}), d(a, b, t, "render", ["explore/lists"], {}), d(a, C, t, "render", ["explore/tags"], {}), d(a, f, t, "render", ["explore"], {}), o
                            }
                        }
                    }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createComment("");
                        return e.appendChild(t, a), t
                    },
                    render: function (a, n, r) {
                        var i = n.dom,
                            d = n.hooks,
                            s = d.get,
                            c = d.block;
                        i.detectNamespace(r);
                        var o;
                        n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (o = this.build(i), this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0), this.cachedFragment && (o = i.cloneNode(this.cachedFragment, !0))) : o = this.build(i);
                        var l = i.createMorphAt(o, 0, 0, r);
                        return i.insertBoundary(o, null), i.insertBoundary(o, 0), c(n, l, a, "if", [s(n, a, "isTvMode")], {}, e, t), o
                    }
                }
            }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createComment("");
                return e.appendChild(t, a), t
            },
            render: function (a, n, r) {
                var i = n.dom,
                    d = n.hooks,
                    s = d.get,
                    c = d.block;
                i.detectNamespace(r);
                var o;
                n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (o = this.build(i), this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0), this.cachedFragment && (o = i.cloneNode(this.cachedFragment, !0))) : o = this.build(i);
                var l = i.createMorphAt(o, 0, 0, r);
                return i.insertBoundary(o, null), i.insertBoundary(o, 0), c(n, l, a, "if", [s(n, a, "isMobile")], {}, e, t), o
            }
        }
    }())
}), define("vine-ember/templates/jobs", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        var e = function () {
                var e = function () {
                    var e = function () {
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createComment("");
                                return e.appendChild(t, a), t
                            },
                            render: function (e, t, a) {
                                var n = t.dom,
                                    r = t.hooks,
                                    i = r.content;
                                n.detectNamespace(a);
                                var d;
                                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                                var s = n.createMorphAt(d, 0, 0, a);
                                return n.insertBoundary(d, null), n.insertBoundary(d, 0), i(t, s, e, "title"), d
                            }
                        }
                    }();
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null,
                        hasRendered: !1,
                        build: function (e) {
                            var t = e.createDocumentFragment(),
                                a = e.createTextNode("              ");
                            e.appendChild(t, a);
                            var a = e.createElement("li"),
                                n = e.createComment("");
                            e.appendChild(a, n), e.appendChild(t, a);
                            var a = e.createTextNode("\n");
                            return e.appendChild(t, a), t
                        },
                        render: function (t, a, n) {
                            var r = a.dom,
                                i = a.hooks,
                                d = i.get,
                                s = i.block;
                            r.detectNamespace(n);
                            var c;
                            a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r), this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0), this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                            var o = r.createMorphAt(r.childAt(c, [1]), 0, 0);
                            return s(a, o, t, "link-to", ["jobs.job", d(a, t, "id")], {}, e, null), c
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("          ");
                        e.appendChild(t, a);
                        var a = e.createElement("ul");
                        e.setAttribute(a, "class", "position-list");
                        var n = e.createTextNode("\n");
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        e.appendChild(a, n);
                        var n = e.createTextNode("          ");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (t, a, n) {
                        var r = a.dom,
                            i = a.hooks,
                            d = i.block;
                        r.detectNamespace(n);
                        var s;
                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                        var c = r.createMorphAt(r.childAt(s, [1]), 1, 1);
                        return d(a, c, t, "each", [], {}, e, null), s
                    }
                }
            }(),
            t = function () {
                var e = function () {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null,
                        hasRendered: !1,
                        build: function (e) {
                            var t = e.createDocumentFragment(),
                                a = e.createTextNode("          ");
                            e.appendChild(t, a);
                            var a = e.createElement("li"),
                                n = e.createTextNode("\n            ");
                            e.appendChild(a, n);
                            var n = e.createComment("");
                            e.appendChild(a, n);
                            var n = e.createTextNode("\n          ");
                            e.appendChild(a, n), e.appendChild(t, a);
                            var a = e.createTextNode("\n");
                            return e.appendChild(t, a), t
                        },
                        render: function (e, t, a) {
                            var n = t.dom,
                                r = t.hooks,
                                i = r.get,
                                d = r.inline;
                            n.detectNamespace(a);
                            var s;
                            t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                            var c = n.createMorphAt(n.childAt(s, [1]), 1, 1);
                            return d(t, c, e, "cdn-img", [], {
                                src: i(t, e, "this")
                            }), s
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createComment("");
                        return e.appendChild(t, a), t
                    },
                    render: function (t, a, n) {
                        var r = a.dom,
                            i = a.hooks,
                            d = i.get,
                            s = i.block;
                        r.detectNamespace(n);
                        var c;
                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r), this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0), this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                        var o = r.createMorphAt(c, 0, 0, n);
                        return r.insertBoundary(c, null), r.insertBoundary(c, 0), s(a, o, t, "each", [d(a, t, "employeeGifs")], {}, e, null), c
                    }
                }
            }(),
            a = function () {
                var e = function () {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null,
                        hasRendered: !1,
                        build: function (e) {
                            var t = e.createDocumentFragment(),
                                a = e.createTextNode("          ");
                            e.appendChild(t, a);
                            var a = e.createElement("li"),
                                n = e.createTextNode("\n            ");
                            e.appendChild(a, n);
                            var n = e.createElement("video");
                            e.setAttribute(n, "width", "100%"), e.setAttribute(n, "muted", ""), e.setAttribute(n, "loop", ""), e.appendChild(a, n);
                            var n = e.createTextNode("\n          ");
                            e.appendChild(a, n), e.appendChild(t, a);
                            var a = e.createTextNode("\n");
                            return e.appendChild(t, a), t
                        },
                        render: function (e, t, a) {
                            var n = t.dom,
                                r = t.hooks,
                                i = r.element;
                            n.detectNamespace(a);
                            var d;
                            t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                            var s = n.childAt(d, [1, 1]);
                            return i(t, s, e, "bind-attr", [], {
                                src: "this"
                            }), d
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createComment("");
                        return e.appendChild(t, a), t
                    },
                    render: function (t, a, n) {
                        var r = a.dom,
                            i = a.hooks,
                            d = i.get,
                            s = i.block;
                        r.detectNamespace(n);
                        var c;
                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r), this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0), this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                        var o = r.createMorphAt(c, 0, 0, n);
                        return r.insertBoundary(c, null), r.insertBoundary(c, 0), s(a, o, t, "each", [d(a, t, "employeeVines")], {}, e, null), c
                    }
                }
            }(),
            n = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("        ");
                        e.appendChild(t, a);
                        var a = e.createElement("li"),
                            n = e.createTextNode("\n          ");
                        e.appendChild(a, n);
                        var n = e.createElement("div");
                        e.setAttribute(n, "class", "perk-icon");
                        var r = e.createComment("");
                        e.appendChild(n, r), e.appendChild(a, n);
                        var n = e.createTextNode("\n          ");
                        e.appendChild(a, n);
                        var n = e.createElement("div");
                        e.setAttribute(n, "class", "perk-title");
                        var r = e.createComment("");
                        e.appendChild(n, r), e.appendChild(a, n);
                        var n = e.createTextNode("\n          ");
                        e.appendChild(a, n);
                        var n = e.createElement("div");
                        e.setAttribute(n, "class", "perk-description");
                        var r = e.createComment("");
                        e.appendChild(n, r), e.appendChild(a, n);
                        var n = e.createTextNode("\n        ");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.element,
                            d = r.get,
                            s = r.inline,
                            c = r.content;
                        n.detectNamespace(a);
                        var o;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (o = this.build(n), this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0), this.cachedFragment && (o = n.cloneNode(this.cachedFragment, !0))) : o = this.build(n);
                        var l = n.childAt(o, [1]),
                            h = n.createMorphAt(n.childAt(l, [1]), 0, 0),
                            u = n.createMorphAt(n.childAt(l, [3]), 0, 0),
                            p = n.createMorphAt(n.childAt(l, [5]), 0, 0);
                        return i(t, l, e, "bind-attr", [], {
                            "class": "className"
                        }), s(t, h, e, "cdn-img", [], {
                            src: d(t, e, "img"),
                            width: "200",
                            height: "200"
                        }), c(t, u, e, "title"), c(t, p, e, "description"), o
                    }
                }
            }(),
            r = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("          ");
                        e.appendChild(t, a);
                        var a = e.createElement("div"),
                            n = e.createTextNode("·");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom;
                        n.detectNamespace(a);
                        var r;
                        return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n), this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0), this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n), r
                    }
                }
            }(),
            i = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("            ");
                        e.appendChild(t, a);
                        var a = e.createElement("li"),
                            n = e.createElement("a"),
                            r = e.createComment("");
                        e.appendChild(n, r), e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.element,
                            d = r.get,
                            s = r.content;
                        n.detectNamespace(a);
                        var c;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n), this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0), this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                        var o = n.childAt(c, [1, 0]),
                            l = n.createMorphAt(o, 0, 0);
                        return i(t, o, e, "bind-attr", [], {
                            href: "detail-url"
                        }), i(t, o, e, "action", ["openModalForJobId", d(t, e, "id")], {}), s(t, l, e, "title"), c
                    }
                }
            }(),
            d = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("            ");
                        e.appendChild(t, a);
                        var a = e.createElement("li"),
                            n = e.createElement("a"),
                            r = e.createComment("");
                        e.appendChild(n, r), e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.element,
                            d = r.get,
                            s = r.content;
                        n.detectNamespace(a);
                        var c;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n), this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0), this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                        var o = n.childAt(c, [1, 0]),
                            l = n.createMorphAt(o, 0, 0);
                        return i(t, o, e, "bind-attr", [], {
                            href: "detail-url"
                        }), i(t, o, e, "action", ["openModalForJobId", d(t, e, "id")], {}), s(t, l, e, "title"), c
                    }
                }
            }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createElement("div");
                e.setAttribute(a, "class", "jobs-wrapper");
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("section");
                e.setAttribute(n, "class", "hero");
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("div");
                e.setAttribute(r, "class", "hero-overlay");
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("div");
                e.setAttribute(i, "class", "hero-overlay-bg"), e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("a");
                e.setAttribute(i, "class", "toggle-credits");
                var d = e.createTextNode("\n        ");
                e.appendChild(i, d);
                var d = e.createElement("span"),
                    s = e.createTextNode("Show credits");
                e.appendChild(d, s), e.appendChild(i, d);
                var d = e.createTextNode("\n        ");
                e.appendChild(i, d);
                var d = e.createElement("span"),
                    s = e.createTextNode("Hide credits");
                e.appendChild(d, s), e.appendChild(i, d);
                var d = e.createTextNode("\n      ");
                e.appendChild(i, d), e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("h2"),
                    d = e.createTextNode("1,500,000,000");
                e.appendChild(i, d);
                var d = e.createElement("br");
                e.appendChild(i, d);
                var d = e.createTextNode("loops per day");
                e.appendChild(i, d), e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("div");
                e.setAttribute(i, "class", "hero-play-button"), e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("div");
                e.setAttribute(i, "class", "credits");
                var d = e.createTextNode("\n        ");
                e.appendChild(i, d);
                var d = e.createElement("h2"),
                    s = e.createTextNode("Thank you.");
                e.appendChild(d, s), e.appendChild(i, d);
                var d = e.createTextNode("\n        ");
                e.appendChild(i, d);
                var d = e.createElement("p"),
                    s = e.createTextNode("The following users contributed Vines for this video: ");
                e.appendChild(d, s);
                var s = e.createElement("a");
                e.setAttribute(s, "href", "");
                var c = e.createTextNode("Alesia Antonucci");
                e.appendChild(s, c), e.appendChild(d, s);
                var s = e.createTextNode(", ");
                e.appendChild(d, s);
                var s = e.createElement("a");
                e.setAttribute(s, "href", "");
                var c = e.createTextNode("Tammara Twitty");
                e.appendChild(s, c), e.appendChild(d, s);
                var s = e.createTextNode(", ");
                e.appendChild(d, s);
                var s = e.createElement("a");
                e.setAttribute(s, "href", "");
                var c = e.createTextNode("Bridgett Blood");
                e.appendChild(s, c), e.appendChild(d, s);
                var s = e.createTextNode(", ");
                e.appendChild(d, s);
                var s = e.createElement("a");
                e.setAttribute(s, "href", "");
                var c = e.createTextNode("Melany Morvant");
                e.appendChild(s, c), e.appendChild(d, s);
                var s = e.createTextNode(", ");
                e.appendChild(d, s);
                var s = e.createElement("a");
                e.setAttribute(s, "href", "");
                var c = e.createTextNode("Forest Folkers");
                e.appendChild(s, c), e.appendChild(d, s);
                var s = e.createTextNode(", ");
                e.appendChild(d, s);
                var s = e.createElement("a");
                e.setAttribute(s, "href", "");
                var c = e.createTextNode("Kimiko Kadlec");
                e.appendChild(s, c), e.appendChild(d, s);
                var s = e.createTextNode(", ");
                e.appendChild(d, s);
                var s = e.createElement("a");
                e.setAttribute(s, "href", "");
                var c = e.createTextNode("Alec Aldaco");
                e.appendChild(s, c), e.appendChild(d, s);
                var s = e.createTextNode(", ");
                e.appendChild(d, s);
                var s = e.createElement("a");
                e.setAttribute(s, "href", "");
                var c = e.createTextNode("Cordia Copp");
                e.appendChild(s, c), e.appendChild(d, s);
                var s = e.createTextNode(", ");
                e.appendChild(d, s);
                var s = e.createElement("a");
                e.setAttribute(s, "href", "");
                var c = e.createTextNode("Luigi Lavallee");
                e.appendChild(s, c), e.appendChild(d, s);
                var s = e.createTextNode(", ");
                e.appendChild(d, s);
                var s = e.createElement("a");
                e.setAttribute(s, "href", "");
                var c = e.createTextNode("Sterling Siegmund");
                e.appendChild(s, c), e.appendChild(d, s);
                var s = e.createTextNode(", ");
                e.appendChild(d, s);
                var s = e.createElement("a");
                e.setAttribute(s, "href", "");
                var c = e.createTextNode("Adrien Applewhite");
                e.appendChild(s, c), e.appendChild(d, s);
                var s = e.createTextNode(", ");
                e.appendChild(d, s);
                var s = e.createElement("a");
                e.setAttribute(s, "href", "");
                var c = e.createTextNode("Otis Overholt");
                e.appendChild(s, c), e.appendChild(d, s);
                var s = e.createTextNode(", ");
                e.appendChild(d, s);
                var s = e.createElement("a");
                e.setAttribute(s, "href", "");
                var c = e.createTextNode("Rickey Riedel");
                e.appendChild(s, c), e.appendChild(d, s);
                var s = e.createTextNode(", ");
                e.appendChild(d, s);
                var s = e.createElement("a");
                e.setAttribute(s, "href", "");
                var c = e.createTextNode("Erwin Estell");
                e.appendChild(s, c), e.appendChild(d, s);
                var s = e.createTextNode(", ");
                e.appendChild(d, s);
                var s = e.createElement("a");
                e.setAttribute(s, "href", "");
                var c = e.createTextNode("Anneliese Altschuler");
                e.appendChild(s, c), e.appendChild(d, s);
                var s = e.createTextNode(", ");
                e.appendChild(d, s);
                var s = e.createElement("a");
                e.setAttribute(s, "href", "");
                var c = e.createTextNode("Kalyn Karlson");
                e.appendChild(s, c), e.appendChild(d, s);
                var s = e.createTextNode(", ");
                e.appendChild(d, s);
                var s = e.createElement("a");
                e.setAttribute(s, "href", "");
                var c = e.createTextNode("Lottie Lipps");
                e.appendChild(s, c), e.appendChild(d, s);
                var s = e.createTextNode(", ");
                e.appendChild(d, s);
                var s = e.createElement("a");
                e.setAttribute(s, "href", "");
                var c = e.createTextNode("Cythia Cremeans");
                e.appendChild(s, c), e.appendChild(d, s);
                var s = e.createTextNode(", ");
                e.appendChild(d, s);
                var s = e.createElement("a");
                e.setAttribute(s, "href", "");
                var c = e.createTextNode("Hermila Heier");
                e.appendChild(s, c), e.appendChild(d, s);
                var s = e.createTextNode(", ");
                e.appendChild(d, s);
                var s = e.createElement("a");
                e.setAttribute(s, "href", "");
                var c = e.createTextNode("Goldie Gomes");
                e.appendChild(s, c), e.appendChild(d, s);
                var s = e.createTextNode(", ");
                e.appendChild(d, s);
                var s = e.createElement("a");
                e.setAttribute(s, "href", "");
                var c = e.createTextNode("Shannan Syverson");
                e.appendChild(s, c), e.appendChild(d, s);
                var s = e.createTextNode(", ");
                e.appendChild(d, s);
                var s = e.createElement("a");
                e.setAttribute(s, "href", "");
                var c = e.createTextNode("Nanette Nanney");
                e.appendChild(s, c), e.appendChild(d, s);
                var s = e.createTextNode(", ");
                e.appendChild(d, s);
                var s = e.createElement("a");
                e.setAttribute(s, "href", "");
                var c = e.createTextNode("Cherise Caba");
                e.appendChild(s, c), e.appendChild(d, s);
                var s = e.createTextNode(", ");
                e.appendChild(d, s);
                var s = e.createElement("a");
                e.setAttribute(s, "href", "");
                var c = e.createTextNode("Cindie Crosby");
                e.appendChild(s, c), e.appendChild(d, s);
                var s = e.createTextNode(", ");
                e.appendChild(d, s);
                var s = e.createElement("a");
                e.setAttribute(s, "href", "");
                var c = e.createTextNode("Virgie Voisin");
                e.appendChild(s, c), e.appendChild(d, s);
                var s = e.createTextNode(", ");
                e.appendChild(d, s);
                var s = e.createElement("a");
                e.setAttribute(s, "href", "");
                var c = e.createTextNode("Dario Deschenes");
                e.appendChild(s, c), e.appendChild(d, s);
                var s = e.createTextNode(", ");
                e.appendChild(d, s);
                var s = e.createElement("a");
                e.setAttribute(s, "href", "");
                var c = e.createTextNode("Cammy Coward");
                e.appendChild(s, c), e.appendChild(d, s);
                var s = e.createTextNode(", ");
                e.appendChild(d, s);
                var s = e.createElement("a");
                e.setAttribute(s, "href", "");
                var c = e.createTextNode("Shannon Sautner");
                e.appendChild(s, c), e.appendChild(d, s);
                var s = e.createTextNode(", ");
                e.appendChild(d, s);
                var s = e.createElement("a");
                e.setAttribute(s, "href", "");
                var c = e.createTextNode("Holley Hallee");
                e.appendChild(s, c), e.appendChild(d, s);
                var s = e.createTextNode(", ");
                e.appendChild(d, s);
                var s = e.createElement("a");
                e.setAttribute(s, "href", "");
                var c = e.createTextNode("Lolita Levering");
                e.appendChild(s, c), e.appendChild(d, s);
                var s = e.createTextNode(".");
                e.appendChild(d, s), e.appendChild(i, d);
                var d = e.createTextNode("\n      ");
                e.appendChild(i, d), e.appendChild(r, i);
                var i = e.createTextNode("\n    ");
                e.appendChild(r, i), e.appendChild(n, r);
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("video");
                e.setAttribute(r, "autoplay", ""), e.setAttribute(r, "preload", ""), e.setAttribute(r, "muted", ""), e.setAttribute(r, "width", "100%"), e.appendChild(n, r);
                var r = e.createTextNode("\n  ");
                e.appendChild(n, r), e.appendChild(a, n);
                var n = e.createTextNode("\n\n  ");
                e.appendChild(a, n);
                var n = e.createElement("section");
                e.setAttribute(n, "class", "current-openings");
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("div");
                e.setAttribute(r, "class", "content");
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("h2"),
                    d = e.createTextNode("Current openings in NYC");
                e.appendChild(i, d), e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("div");
                e.setAttribute(i, "class", "column");
                var d = e.createTextNode("\n");
                e.appendChild(i, d);
                var d = e.createComment("");
                e.appendChild(i, d);
                var d = e.createTextNode("      ");
                e.appendChild(i, d), e.appendChild(r, i);
                var i = e.createTextNode("\n    ");
                e.appendChild(r, i), e.appendChild(n, r);
                var r = e.createTextNode("\n  ");
                e.appendChild(n, r), e.appendChild(a, n);
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("section");
                e.setAttribute(n, "class", "intro-text");
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("div");
                e.setAttribute(r, "class", "content");
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("h2"),
                    d = e.createTextNode("Vine is the best way to see & share life in motion.");
                e.appendChild(i, d), e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("p"),
                    d = e.createTextNode("With Vine, you can watch, create and share short looping videos -- anytime, anywhere. Through these videos, called Vines, people now have an entirely new medium to express themselves and their creativity.  More than 100 million people enjoy Vines across the web every month, leading to more than 1 billion loops each day. Follow ");
                e.appendChild(i, d);
                var d = e.createElement("a");
                e.setAttribute(d, "href", "https://web.archive.org/web/20150701150124/https://twitter.com/vine");
                var s = e.createTextNode("@vine");
                e.appendChild(d, s), e.appendChild(i, d);
                var d = e.createTextNode(" to keep up with product releases and other Vine news, and to see great Vines.");
                e.appendChild(i, d), e.appendChild(r, i);
                var i = e.createTextNode("\n    ");
                e.appendChild(r, i), e.appendChild(n, r);
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createComment("");
                e.appendChild(n, r);
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createComment("");
                e.appendChild(n, r);
                var r = e.createTextNode("\n\n    ");
                e.appendChild(n, r);
                var r = e.createElement("div");
                e.setAttribute(r, "class", "plants");
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createComment("");
                e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createComment("");
                e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createComment("");
                e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createComment("");
                e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createComment("");
                e.appendChild(r, i);
                var i = e.createTextNode("\n    ");
                e.appendChild(r, i), e.appendChild(n, r);
                var r = e.createTextNode("\n  ");
                e.appendChild(n, r), e.appendChild(a, n);
                var n = e.createTextNode("\n\n  ");
                e.appendChild(a, n);
                var n = e.createElement("section");
                e.setAttribute(n, "class", "vines-all-the-way-down");
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("ul"),
                    i = e.createTextNode("\n");
                e.appendChild(r, i);
                var i = e.createComment("");
                e.appendChild(r, i);
                var i = e.createTextNode("    ");
                e.appendChild(r, i), e.appendChild(n, r);
                var r = e.createTextNode("\n  ");
                e.appendChild(n, r), e.appendChild(a, n);
                var n = e.createTextNode("\n\n  ");
                e.appendChild(a, n);
                var n = e.createElement("section"),
                    r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("div"),
                    i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("h3"),
                    d = e.createTextNode("Our Perks");
                e.appendChild(i, d), e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("ul");
                e.setAttribute(i, "class", "perk-slides");
                var d = e.createTextNode("\n");
                e.appendChild(i, d);
                var d = e.createComment("");
                e.appendChild(i, d);
                var d = e.createTextNode("      ");
                e.appendChild(i, d), e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("div");
                e.setAttribute(i, "class", "bullets");
                var d = e.createTextNode("\n");
                e.appendChild(i, d);
                var d = e.createComment("");
                e.appendChild(i, d);
                var d = e.createTextNode("      ");
                e.appendChild(i, d), e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("div");
                e.setAttribute(i, "class", "next-perk");
                var d = e.createTextNode("next");
                e.appendChild(i, d), e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("div");
                e.setAttribute(i, "class", "prev-perk");
                var d = e.createTextNode("prev");
                e.appendChild(i, d), e.appendChild(r, i);
                var i = e.createTextNode("\n    ");
                e.appendChild(r, i), e.appendChild(n, r);
                var r = e.createTextNode("\n  ");
                e.appendChild(n, r), e.appendChild(a, n);
                var n = e.createTextNode("\n\n  ");
                e.appendChild(a, n);
                var n = e.createElement("section");
                e.setAttribute(n, "class", "organization-description engineering");
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("div");
                e.setAttribute(r, "class", "content");
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("h3");
                e.setAttribute(i, "class", "org-title");
                var d = e.createTextNode("Engineering");
                e.appendChild(i, d), e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("div");
                e.setAttribute(i, "class", "top-org-section");
                var d = e.createTextNode("\n        ");
                e.appendChild(i, d);
                var d = e.createComment("");
                e.appendChild(i, d);
                var d = e.createTextNode("\n\n        ");
                e.appendChild(i, d);
                var d = e.createElement("blockquote"),
                    s = e.createTextNode("\n          We're building the future of mobile video.\n          ");
                e.appendChild(d, s);
                var s = e.createElement("cite"),
                    c = e.createTextNode("\n            Ben Sheats, ");
                e.appendChild(s, c);
                var c = e.createElement("span");
                e.setAttribute(c, "class", "mobile-break"), e.appendChild(s, c);
                var c = e.createTextNode("Engineering Manager\n            ");
                e.appendChild(s, c);
                var c = e.createElement("ul");
                e.setAttribute(c, "class", "social-networks");
                var o = e.createTextNode("\n              ");
                e.appendChild(c, o);
                var o = e.createElement("li"),
                    l = e.createElement("a");
                e.setAttribute(l, "href", "https://web.archive.org/web/20150701150124/https://www.linkedin.com/in/benjaminsheats"), e.setAttribute(l, "title", "Ben on LinkedIn"), e.setAttribute(l, "class", "linked-in"), e.appendChild(o, l), e.appendChild(c, o);
                var o = e.createTextNode("\n            ");
                e.appendChild(c, o), e.appendChild(s, c);
                var c = e.createTextNode("\n          ");
                e.appendChild(s, c), e.appendChild(d, s);
                var s = e.createTextNode("\n        ");
                e.appendChild(d, s), e.appendChild(i, d);
                var d = e.createTextNode("\n      ");
                e.appendChild(i, d), e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("div");
                e.setAttribute(i, "class", "lower-org-section");
                var d = e.createTextNode("\n        ");
                e.appendChild(i, d);
                var d = e.createElement("h5");
                e.setAttribute(d, "class", "org-positions-title");
                var s = e.createTextNode("Join the team");
                e.appendChild(d, s), e.appendChild(i, d);
                var d = e.createTextNode("\n        ");
                e.appendChild(i, d);
                var d = e.createElement("ul");
                e.setAttribute(d, "class", "position-list");
                var s = e.createTextNode("\n");
                e.appendChild(d, s);
                var s = e.createComment("");
                e.appendChild(d, s);
                var s = e.createTextNode("        ");
                e.appendChild(d, s), e.appendChild(i, d);
                var d = e.createTextNode("\n      ");
                e.appendChild(i, d), e.appendChild(r, i);
                var i = e.createTextNode("\n    ");
                e.appendChild(r, i), e.appendChild(n, r);
                var r = e.createTextNode("\n  ");
                e.appendChild(n, r), e.appendChild(a, n);
                var n = e.createTextNode("\n\n  ");
                e.appendChild(a, n);
                var n = e.createElement("section");
                e.setAttribute(n, "class", "organization-description design");
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("div");
                e.setAttribute(r, "class", "content");
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("div");
                e.setAttribute(i, "class", "top-org-section");
                var d = e.createTextNode("\n        ");
                e.appendChild(i, d);
                var d = e.createComment("");
                e.appendChild(i, d);
                var d = e.createTextNode("\n        ");
                e.appendChild(i, d);
                var d = e.createElement("h3");
                e.setAttribute(d, "class", "org-title");
                var s = e.createTextNode("Product & Design");
                e.appendChild(d, s), e.appendChild(i, d);
                var d = e.createTextNode("\n        ");
                e.appendChild(i, d);
                var d = e.createElement("blockquote"),
                    s = e.createTextNode("\n          Vine starts ");
                e.appendChild(d, s);
                var s = e.createElement("span");
                e.setAttribute(s, "class", "mobile-break"), e.appendChild(d, s);
                var s = e.createTextNode("with design. ");
                e.appendChild(d, s);
                var s = e.createElement("span");
                e.setAttribute(s, "class", "mobile-break"), e.appendChild(d, s);
                var s = e.createTextNode("It’s in our ");
                e.appendChild(d, s);
                var s = e.createElement("span");
                e.setAttribute(s, "class", "mobile-break"), e.appendChild(d, s);
                var s = e.createTextNode("DNA.\n          ");
                e.appendChild(d, s);
                var s = e.createElement("cite"),
                    c = e.createTextNode("\n            Jason Toff, ");
                e.appendChild(s, c);
                var c = e.createElement("span");
                e.setAttribute(c, "class", "mobile-break"), e.appendChild(s, c);
                var c = e.createTextNode("General Manager\n            ");
                e.appendChild(s, c);
                var c = e.createElement("ul");
                e.setAttribute(c, "class", "social-networks");
                var o = e.createTextNode("\n              ");
                e.appendChild(c, o);
                var o = e.createElement("li"),
                    l = e.createElement("a");
                e.setAttribute(l, "href", "https://web.archive.org/web/20150701150124/https://www.linkedin.com/in/jasontoff"), e.setAttribute(l, "title", "Jason on LinkedIn"), e.setAttribute(l, "class", "linked-in"), e.appendChild(o, l), e.appendChild(c, o);
                var o = e.createTextNode("\n            ");
                e.appendChild(c, o), e.appendChild(s, c);
                var c = e.createTextNode("\n          ");
                e.appendChild(s, c), e.appendChild(d, s);
                var s = e.createTextNode("\n        ");
                e.appendChild(d, s), e.appendChild(i, d);
                var d = e.createTextNode("\n      ");
                e.appendChild(i, d), e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("div");
                e.setAttribute(i, "class", "lower-org-section");
                var d = e.createTextNode("\n        ");
                e.appendChild(i, d);
                var d = e.createElement("h5");
                e.setAttribute(d, "class", "org-positions-title");
                var s = e.createTextNode("Join the team");
                e.appendChild(d, s), e.appendChild(i, d);
                var d = e.createTextNode("\n        ");
                e.appendChild(i, d);
                var d = e.createElement("ul");
                e.setAttribute(d, "class", "position-list");
                var s = e.createTextNode("\n");
                e.appendChild(d, s);
                var s = e.createComment("");
                e.appendChild(d, s);
                var s = e.createTextNode("        ");
                e.appendChild(d, s), e.appendChild(i, d);
                var d = e.createTextNode("\n      ");
                e.appendChild(i, d), e.appendChild(r, i);
                var i = e.createTextNode("\n    ");
                e.appendChild(r, i), e.appendChild(n, r);
                var r = e.createTextNode("\n  ");
                e.appendChild(n, r), e.appendChild(a, n);
                var n = e.createTextNode("\n\n  ");
                e.appendChild(a, n);
                var n = e.createElement("div");
                e.setAttribute(n, "class", "footer");
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("ul");
                e.setAttribute(r, "class", "social-networks");
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("li"),
                    d = e.createElement("a");
                e.setAttribute(d, "href", "https://web.archive.org/web/20150701150124/https://vine.co/vine"), e.setAttribute(d, "title", "Vine on Vine"), e.setAttribute(d, "class", "vine"), e.appendChild(i, d), e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("li"),
                    d = e.createElement("a");
                e.setAttribute(d, "href", "https://web.archive.org/web/20150701150124/https://twitter.com/vine"), e.setAttribute(d, "title", "Vine on Twitter"), e.setAttribute(d, "class", "twitter"), e.appendChild(i, d), e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("li"),
                    d = e.createElement("a");
                e.setAttribute(d, "href", "https://web.archive.org/web/20150701150124/https://www.facebook.com/vineapp"), e.setAttribute(d, "title", "Vine on Facebook"), e.setAttribute(d, "class", "facebook"), e.appendChild(i, d), e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("li"),
                    d = e.createElement("a");
                e.setAttribute(d, "href", "https://web.archive.org/web/20150701150124/http://www.linkedin.com/company/vine"), e.setAttribute(d, "title", "Vine on LinkedIn"), e.setAttribute(d, "class", "linked-in"), e.appendChild(i, d), e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("li"),
                    d = e.createElement("a");
                e.setAttribute(d, "href", "https://web.archive.org/web/20150701150124/http://blog.vine.co"), e.setAttribute(d, "title", "Vine on Tumblr"), e.setAttribute(d, "class", "tumblr"), e.appendChild(i, d), e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("li"),
                    d = e.createElement("a");
                e.setAttribute(d, "href", "https://web.archive.org/web/20150701150124/http://www.glassdoor.com/Reviews/Vine-Reviews-E785002.htm"), e.setAttribute(d, "title", "Vine on Glassdoor"), e.setAttribute(d, "class", "glassdoor"), e.appendChild(i, d), e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("li"),
                    d = e.createElement("a");
                e.setAttribute(d, "href", "https://web.archive.org/web/20150701150124/https://dribbble.com/vineapp"), e.setAttribute(d, "title", "Vine on Dribbble"), e.setAttribute(d, "class", "dribbble"), e.appendChild(i, d), e.appendChild(r, i);
                var i = e.createTextNode("\n    ");
                e.appendChild(r, i), e.appendChild(n, r);
                var r = e.createTextNode("\n  ");
                e.appendChild(n, r), e.appendChild(a, n);
                var n = e.createTextNode("\n\n ");
                e.appendChild(a, n), e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a), t
            },
            render: function (s, c, o) {
                var l = c.dom,
                    h = c.hooks,
                    u = h.element,
                    p = h.get,
                    m = h.block,
                    v = h.inline;
                l.detectNamespace(o);
                var g;
                c.useFragmentCache && l.canClone ? (null === this.cachedFragment && (g = this.build(l), this.hasRendered ? this.cachedFragment = g : this.hasRendered = !0), this.cachedFragment && (g = l.cloneNode(this.cachedFragment, !0))) : g = this.build(l);
                var b = l.childAt(g, [0]),
                    C = l.childAt(b, [1]),
                    f = l.childAt(C, [1]),
                    F = l.childAt(f, [3]),
                    N = l.childAt(f, [7]),
                    T = l.childAt(C, [3]),
                    x = l.childAt(b, [5]),
                    A = l.childAt(x, [7]),
                    k = l.childAt(b, [9]),
                    E = l.childAt(k, [1]),
                    R = l.childAt(E, [3]),
                    M = l.childAt(E, [7]),
                    y = l.childAt(E, [9]),
                    w = l.childAt(b, [11, 1]),
                    B = l.childAt(b, [13, 1]),
                    P = l.createMorphAt(l.childAt(b, [3, 1, 3]), 1, 1),
                    L = l.createMorphAt(x, 3, 3),
                    H = l.createMorphAt(x, 5, 5),
                    D = l.createMorphAt(A, 1, 1),
                    S = l.createMorphAt(A, 3, 3),
                    _ = l.createMorphAt(A, 5, 5),
                    I = l.createMorphAt(A, 7, 7),
                    U = l.createMorphAt(A, 9, 9),
                    V = l.createMorphAt(l.childAt(b, [7, 1]), 1, 1),
                    $ = l.createMorphAt(R, 1, 1),
                    j = l.createMorphAt(l.childAt(E, [5]), 1, 1),
                    O = l.createMorphAt(l.childAt(w, [3]), 1, 1),
                    q = l.createMorphAt(l.childAt(w, [5, 3]), 1, 1),
                    z = l.createMorphAt(l.childAt(B, [1]), 1, 1),
                    G = l.createMorphAt(l.childAt(B, [3, 3]), 1, 1);
                return u(c, F, s, "action", ["toggleCredits"], {}), u(c, N, s, "action", ["playHeroVideo"], {
                    target: "view"
                }), u(c, T, s, "bind-attr", [], {
                    src: "heroVideoUrl",
                    poster: "heroPosterUrl"
                }), m(c, P, s, "each", [p(c, s, "allJobsColumns")], {}, e, null), v(c, L, s, "cdn-img", [], {
                    "class": "drone-1",
                    src: "images/jobs/drone-1-8fd5373fe830e0932f70592e8d13155d.png"
                }), v(c, H, s, "cdn-img", [], {
                    "class": "drone-2",
                    src: "images/jobs/drone-2-cb82ab1f42f4829e66abe127ceb85c29.png"
                }), v(c, D, s, "cdn-img", [], {
                    src: "images/jobs/plant-4-812cd5be129b3247bce068552bc13a52.png",
                    alt: "a plant",
                    "class": "plant-1",
                    "data-parallax": '{"startsAtScroll":1200,"stopsAtScroll":2400,"startValue":425,"endValue":555,"property":"left"}'
                }), v(c, S, s, "cdn-img", [], {
                    src: "images/jobs/plant-1-c673afa6a3b9c624c8ab9c74ebfccba6.png",
                    alt: "a plant",
                    "class": "plant-2",
                    "data-parallax": '{"startsAtScroll":1200,"stopsAtScroll":2400,"startValue":567,"endValue":617,"property":"left"}'
                }), v(c, _, s, "cdn-img", [], {
                    src: "images/jobs/plant-2-b5af804ea8eb0afd1cd3aedbaf0e8d61.png",
                    alt: "a plant",
                    "class": "plant-3",
                    "data-parallax": '{"startsAtScroll":1200,"stopsAtScroll":2400,"startValue":622,"endValue":642,"property":"left"}'
                }), v(c, I, s, "cdn-img", [], {
                    src: "images/jobs/plant-3-e3587fd5bfe57bc565afa4ab205aa46d.png",
                    alt: "a plant",
                    "class": "plant-4",
                    "data-parallax": '{"startsAtScroll":1200,"stopsAtScroll":2400,"startValue":840,"endValue":847,"property":"left"}'
                }), v(c, U, s, "cdn-img", [], {
                    src: "images/jobs/plant-5-15c273773204a29737ec57ccd8307157.png",
                    alt: "a plant",
                    "class": "plant-5"
                }), m(c, V, s, "if", [p(c, s, "useEmployeeGifs")], {}, t, a), u(c, k, s, "bind-attr", [], {
                    "class": ":perks currentPerkClassName"
                }), u(c, k, s, "action", ["pausePerkAnimation"], {
                    on: "mouseEnter"
                }), u(c, E, s, "action", ["resumePerkAnimation"], {
                    on: "mouseLeave"
                }), u(c, R, s, "bind-attr", [], {
                    style: "perkSliderStyle"
                }), m(c, $, s, "each", [p(c, s, "perks")], {}, n, null), m(c, j, s, "each", [p(c, s, "perks")], {}, r, null), u(c, M, s, "action", ["nextPerk"], {}), u(c, y, s, "action", ["prevPerk"], {}), v(c, O, s, "cdn-img", [], {
                    src: "images/jobs/ben-sheats-19b590c0f6b55b40e2e2c085082d59c9.png",
                    alt: "Ben Sheats",
                    "class": "headshot"
                }), m(c, q, s, "each", [p(c, s, "engineeringJobs")], {}, i, null), v(c, z, s, "cdn-img", [], {
                    src: "images/jobs/jason-toff-c1a81c133bbedf7f3d3a3b4a7d96736b.png",
                    alt: "Jason Toff",
                    "class": "headshot"
                }), m(c, G, s, "each", [p(c, s, "nonEngineeringJobs")], {}, d, null), g
            }
        }
    }())
}), define("vine-ember/templates/loading-fullscreen", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createElement("div");
                e.setAttribute(a, "class", "loading-fullscreen");
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n), e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a), t
            },
            render: function (e, t, a) {
                var n = t.dom,
                    r = t.hooks,
                    i = r.inline;
                n.detectNamespace(a);
                var d;
                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                var s = n.createMorphAt(n.childAt(d, [0]), 1, 1);
                return i(t, s, e, "cdn-img", [], {
                    src: "images/loading_black-eba83ac14d1ce0d2c128e8f6e47076f6.gif",
                    width: "50",
                    height: "50"
                }), d
            }
        }
    }())
}), define("vine-ember/templates/loading", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createElement("div");
                e.setAttribute(a, "class", "loading-fullscreen");
                var n = e.createTextNode("\n");
                return e.appendChild(a, n), e.appendChild(t, a), t
            },
            render: function (e, t, a) {
                var n = t.dom;
                n.detectNamespace(a);
                var r;
                return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n), this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0), this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n), r
            }
        }
    }())
}), define("vine-ember/templates/login-form", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        var e = function () {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null,
                hasRendered: !1,
                build: function (e) {
                    var t = e.createDocumentFragment(),
                        a = e.createTextNode("Forgot your password?");
                    return e.appendChild(t, a), t
                },
                render: function (e, t, a) {
                    var n = t.dom;
                    n.detectNamespace(a);
                    var r;
                    return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n), this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0), this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n), r
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createElement("div");
                e.setAttribute(a, "class", "message");
                var n = e.createComment("");
                e.appendChild(a, n), e.appendChild(t, a);
                var a = e.createTextNode("\n\n");
                e.appendChild(t, a);
                var a = e.createElement("button");
                e.setAttribute(a, "class", "twitter-signin");
                var n = e.createTextNode("Sign in with Twitter");
                e.appendChild(a, n), e.appendChild(t, a);
                var a = e.createTextNode("\n\n");
                e.appendChild(t, a);
                var a = e.createElement("p"),
                    n = e.createTextNode("or");
                e.appendChild(a, n), e.appendChild(t, a);
                var a = e.createTextNode("\n\n");
                e.appendChild(t, a);
                var a = e.createElement("form");
                e.setAttribute(a, "id", "login");
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createElement("br");
                e.appendChild(a, n);
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createElement("br");
                e.appendChild(a, n);
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("div");
                e.setAttribute(n, "class", "submit-container");
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("span");
                e.setAttribute(r, "class", "forgot-password");
                var i = e.createComment("");
                e.appendChild(r, i), e.appendChild(n, r);
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("button");
                e.setAttribute(r, "type", "submit");
                var i = e.createTextNode("Sign In");
                e.appendChild(r, i), e.appendChild(n, r);
                var r = e.createTextNode("\n  ");
                e.appendChild(n, r), e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n), e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a), t
            },
            render: function (t, a, n) {
                var r = a.dom,
                    i = a.hooks,
                    d = i.content,
                    s = i.element,
                    c = i.get,
                    o = i.inline,
                    l = i.block;
                r.detectNamespace(n);
                var h;
                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (h = this.build(r), this.hasRendered ? this.cachedFragment = h : this.hasRendered = !0), this.cachedFragment && (h = r.cloneNode(this.cachedFragment, !0))) : h = this.build(r);
                var u = r.childAt(h, [2]),
                    p = r.childAt(h, [6]),
                    m = r.createMorphAt(r.childAt(h, [0]), 0, 0),
                    v = r.createMorphAt(p, 1, 1),
                    g = r.createMorphAt(p, 4, 4),
                    b = r.createMorphAt(r.childAt(p, [7, 1]), 0, 0);
                return d(a, m, t, "message.text"), s(a, u, t, "action", ["twitterSignin"], {}), s(a, p, t, "action", ["login"], {
                    on: "submit"
                }), o(a, v, t, "my-input", [], {
                    email: !0,
                    name: "email",
                    placeholder: "Email",
                    value: c(a, t, "identification"),
                    messageType: c(a, t, "message.type")
                }), o(a, g, t, "my-input", [], {
                    type: "password",
                    name: "password",
                    placeholder: "Password",
                    value: c(a, t, "password"),
                    messageType: c(a, t, "message.type")
                }), l(a, b, t, "link-to", ["forgot-password"], {}, e, null), h
            }
        }
    }())
}), define("vine-ember/templates/login", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createElement("div");
                e.setAttribute(a, "class", "login-container");
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createTextNode("\n\n  ");
                e.appendChild(a, n);
                var n = e.createElement("div");
                e.setAttribute(n, "class", "signup");
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("b"),
                    i = e.createTextNode("Don't have an account?");
                e.appendChild(r, i), e.appendChild(n, r);
                var r = e.createTextNode("\n    Download the app to sign up!\n    ");
                e.appendChild(n, r);
                var r = e.createComment("");
                e.appendChild(n, r);
                var r = e.createTextNode("\n  ");
                e.appendChild(n, r), e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n), e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a), t
            },
            render: function (e, t, a) {
                var n = t.dom,
                    r = t.hooks,
                    i = r.inline,
                    d = r.content;
                n.detectNamespace(a);
                var s;
                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                var c = n.childAt(s, [0]),
                    o = n.createMorphAt(c, 1, 1),
                    l = n.createMorphAt(n.childAt(c, [3]), 3, 3);
                return i(t, o, e, "partial", ["login-form"], {}), d(t, l, e, "download-buttons"), s
            }
        }
    }())
}), define("vine-ember/templates/modal/embed", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        var e = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("On");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom;
                        n.detectNamespace(a);
                        var r;
                        return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n), this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0), this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n), r
                    }
                }
            }(),
            t = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("Off");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom;
                        n.detectNamespace(a);
                        var r;
                        return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n), this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0), this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n), r
                    }
                }
            }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createElement("div");
                e.setAttribute(a, "class", "modal"), e.appendChild(t, a);
                var a = e.createTextNode("\n");
                e.appendChild(t, a);
                var a = e.createElement("div");
                e.setAttribute(a, "class", "container");
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("div");
                e.setAttribute(n, "class", "content-modal embed-modal");
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("div");
                e.setAttribute(r, "class", "content");
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("div");
                e.setAttribute(i, "class", "embed-settings");
                var d = e.createTextNode("\n        ");
                e.appendChild(i, d);
                var d = e.createElement("div");
                e.setAttribute(d, "class", "embed-setting");
                var s = e.createTextNode("\n          ");
                e.appendChild(d, s);
                var s = e.createElement("label"),
                    c = e.createTextNode("Type");
                e.appendChild(s, c), e.appendChild(d, s);
                var s = e.createTextNode("\n          ");
                e.appendChild(d, s);
                var s = e.createElement("button"),
                    c = e.createTextNode("Simple");
                e.appendChild(s, c), e.appendChild(d, s);
                var s = e.createTextNode("\n          ");
                e.appendChild(d, s);
                var s = e.createElement("button"),
                    c = e.createTextNode("Postcard");
                e.appendChild(s, c), e.appendChild(d, s);
                var s = e.createTextNode("\n        ");
                e.appendChild(d, s), e.appendChild(i, d);
                var d = e.createTextNode("\n        ");
                e.appendChild(i, d);
                var d = e.createElement("div");
                e.setAttribute(d, "class", "embed-setting");
                var s = e.createTextNode("\n          ");
                e.appendChild(d, s);
                var s = e.createElement("label"),
                    c = e.createTextNode("Autoplay audio");
                e.appendChild(s, c), e.appendChild(d, s);
                var s = e.createTextNode("\n          ");
                e.appendChild(d, s);
                var s = e.createElement("div"),
                    c = e.createTextNode("\n            ");
                e.appendChild(s, c);
                var c = e.createComment("");
                e.appendChild(s, c);
                var c = e.createTextNode("\n            ");
                e.appendChild(s, c);
                var c = e.createElement("div");
                e.setAttribute(c, "class", "toggle"), e.appendChild(s, c);
                var c = e.createTextNode("\n          ");
                e.appendChild(s, c), e.appendChild(d, s);
                var s = e.createTextNode("\n        ");
                e.appendChild(d, s), e.appendChild(i, d);
                var d = e.createTextNode("\n        ");
                e.appendChild(i, d);
                var d = e.createElement("div");
                e.setAttribute(d, "class", "embed-setting");
                var s = e.createTextNode("\n          ");
                e.appendChild(d, s);
                var s = e.createElement("label"),
                    c = e.createTextNode("Size");
                e.appendChild(s, c), e.appendChild(d, s);
                var s = e.createTextNode("\n          ");
                e.appendChild(d, s);
                var s = e.createElement("button"),
                    c = e.createTextNode("600px");
                e.appendChild(s, c), e.appendChild(d, s);
                var s = e.createTextNode("\n          ");
                e.appendChild(d, s);
                var s = e.createElement("button"),
                    c = e.createTextNode("480px");
                e.appendChild(s, c), e.appendChild(d, s);
                var s = e.createTextNode("\n          ");
                e.appendChild(d, s);
                var s = e.createElement("button"),
                    c = e.createTextNode("300px");
                e.appendChild(s, c), e.appendChild(d, s);
                var s = e.createTextNode("\n        ");
                e.appendChild(d, s), e.appendChild(i, d);
                var d = e.createTextNode("\n      ");
                e.appendChild(i, d), e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("div");
                e.setAttribute(i, "class", "embed-preview");
                var d = e.createTextNode("\n        ");
                e.appendChild(i, d);
                var d = e.createComment("");
                e.appendChild(i, d);
                var d = e.createTextNode("\n      ");
                e.appendChild(i, d), e.appendChild(r, i);
                var i = e.createTextNode("\n    ");
                e.appendChild(r, i), e.appendChild(n, r);
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("div");
                e.setAttribute(r, "class", "footer");
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("h5"),
                    d = e.createTextNode("Embed code");
                e.appendChild(i, d), e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createComment("");
                e.appendChild(r, i);
                var i = e.createTextNode("\n    ");
                e.appendChild(r, i), e.appendChild(n, r);
                var r = e.createTextNode("\n  ");
                e.appendChild(n, r), e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n), e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a), t
            },
            render: function (a, n, r) {
                var i = n.dom,
                    d = n.hooks,
                    s = d.element,
                    c = d.get,
                    o = d.block,
                    l = d.content,
                    h = d.inline;
                i.detectNamespace(r);
                var u;
                n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (u = this.build(i), this.hasRendered ? this.cachedFragment = u : this.hasRendered = !0), this.cachedFragment && (u = i.cloneNode(this.cachedFragment, !0))) : u = this.build(i);
                var p = i.childAt(u, [2, 1]),
                    m = i.childAt(p, [1]),
                    v = i.childAt(m, [1]),
                    g = i.childAt(v, [1]),
                    b = i.childAt(g, [3]),
                    C = i.childAt(g, [5]),
                    f = i.childAt(v, [3, 3]),
                    F = i.childAt(v, [5]),
                    N = i.childAt(F, [3]),
                    T = i.childAt(F, [5]),
                    x = i.childAt(F, [7]),
                    A = i.createMorphAt(f, 1, 1),
                    k = i.createUnsafeMorphAt(i.childAt(m, [3]), 1, 1),
                    E = i.createMorphAt(i.childAt(p, [3]), 3, 3);
                return s(n, b, a, "bind-attr", [], {
                    "class": ":small isSimpleEmbed:active"
                }), s(n, b, a, "action", ["setEmbedType", "simple"], {}), s(n, C, a, "bind-attr", [], {
                    "class": ":small isPostcardEmbed:active"
                }), s(n, C, a, "action", ["setEmbedType", "postcard"], {}), s(n, f, a, "bind-attr", [], {
                    "class": ":switch audioEnabled:on:off"
                }), s(n, f, a, "action", ["toggleAudio"], {}), o(n, A, a, "if", [c(n, a, "audioEnabled")], {}, e, t), s(n, N, a, "bind-attr", [], {
                    "class": ":small isSize600:active"
                }), s(n, N, a, "action", ["setEmbedSize", 600], {}), s(n, T, a, "bind-attr", [], {
                    "class": ":small isSize480:active"
                }), s(n, T, a, "action", ["setEmbedSize", 480], {}), s(n, x, a, "bind-attr", [], {
                    "class": ":small isSize300:active"
                }), s(n, x, a, "action", ["setEmbedSize", 300], {}), l(n, k, a, "iframeHtml"), h(n, E, a, "textarea", [], {
                    value: c(n, a, "embedCode")
                }), u
            }
        }
    }())
}), define("vine-ember/templates/modal/flash-error", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createElement("div");
                e.setAttribute(a, "class", "container vertically-center");
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("div");
                e.setAttribute(n, "class", "card");
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("div");
                e.setAttribute(r, "class", "icon-vine_logo"), e.appendChild(n, r);
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("div");
                e.setAttribute(r, "class", "header");
                var i = e.createTextNode("Oops! Something went wrong!");
                e.appendChild(r, i), e.appendChild(n, r);
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("div");
                e.setAttribute(r, "class", "content");
                var i = e.createTextNode("\n      For the best experience, you must install Flash.");
                e.appendChild(r, i);
                var i = e.createElement("br");
                e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("a");
                e.setAttribute(i, "href", "https://web.archive.org/web/20150701150124/http://get.adobe.com/flashplayer/"), e.setAttribute(i, "target", "_blank");
                var d = e.createElement("button"),
                    s = e.createTextNode("Install Flash");
                e.appendChild(d, s), e.appendChild(i, d), e.appendChild(r, i);
                var i = e.createTextNode("\n    ");
                e.appendChild(r, i), e.appendChild(n, r);
                var r = e.createTextNode("\n  ");
                e.appendChild(n, r), e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n), e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a), t
            },
            render: function (e, t, a) {
                var n = t.dom;
                n.detectNamespace(a);
                var r;
                return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n), this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0), this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n), r
            }
        }
    }())
}), define("vine-ember/templates/modal/job", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        var e = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("        ");
                        e.appendChild(t, a);
                        var a = e.createElement("div");
                        e.setAttribute(a, "class", "job-sharing");
                        var n = e.createTextNode("\n          ");
                        e.appendChild(a, n);
                        var n = e.createElement("div"),
                            r = e.createTextNode("Share this!");
                        e.appendChild(n, r), e.appendChild(a, n);
                        var n = e.createTextNode("\n          ");
                        e.appendChild(a, n);
                        var n = e.createElement("ul");
                        e.setAttribute(n, "class", "social-networks");
                        var r = e.createTextNode("\n            ");
                        e.appendChild(n, r);
                        var r = e.createElement("li"),
                            i = e.createElement("a");
                        e.setAttribute(i, "target", "_blank"), e.setAttribute(i, "title", "Share on Twitter"), e.setAttribute(i, "class", "twitter"), e.appendChild(r, i), e.appendChild(n, r);
                        var r = e.createTextNode("\n            ");
                        e.appendChild(n, r);
                        var r = e.createElement("li"),
                            i = e.createElement("a");
                        e.setAttribute(i, "target", "_blank"), e.setAttribute(i, "title", "Share on Facebook"), e.setAttribute(i, "class", "facebook"), e.appendChild(r, i), e.appendChild(n, r);
                        var r = e.createTextNode("\n            ");
                        e.appendChild(n, r);
                        var r = e.createElement("li"),
                            i = e.createElement("a");
                        e.setAttribute(i, "target", "_blank"), e.setAttribute(i, "title", "Share on LinkedIn"), e.setAttribute(i, "class", "linked-in"), e.appendChild(r, i), e.appendChild(n, r);
                        var r = e.createTextNode("\n            ");
                        e.appendChild(n, r);
                        var r = e.createElement("li"),
                            i = e.createElement("a");
                        e.setAttribute(i, "title", "Share via Email"), e.setAttribute(i, "class", "email"), e.appendChild(r, i), e.appendChild(n, r);
                        var r = e.createTextNode("\n          ");
                        e.appendChild(n, r), e.appendChild(a, n);
                        var n = e.createTextNode("\n        ");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.element;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var s = n.childAt(d, [1, 3]),
                            c = n.childAt(s, [1, 0]),
                            o = n.childAt(s, [3, 0]),
                            l = n.childAt(s, [5, 0]),
                            h = n.childAt(s, [7, 0]);
                        return i(t, c, e, "bind-attr", [], {
                            href: "twitterShareUrl"
                        }), i(t, o, e, "bind-attr", [], {
                            href: "facebookShareUrl"
                        }), i(t, l, e, "bind-attr", [], {
                            href: "linkedInShareUrl"
                        }), i(t, h, e, "bind-attr", [], {
                            href: "emailShareUrl"
                        }), d
                    }
                }
            }(),
            t = function () {
                var e = function () {
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createTextNode("          ");
                                e.appendChild(t, a);
                                var a = e.createElement("img");
                                e.setAttribute(a, "src", "https://web.archive.org/web/20150701150124/http://i.imgur.com/TxCiJo0.gif"), e.appendChild(t, a);
                                var a = e.createTextNode("\n");
                                return e.appendChild(t, a), t
                            },
                            render: function (e, t, a) {
                                var n = t.dom;
                                n.detectNamespace(a);
                                var r;
                                return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n), this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0), this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n), r
                            }
                        }
                    }(),
                    t = function () {
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createTextNode("          ");
                                e.appendChild(t, a);
                                var a = e.createElement("iframe");
                                e.appendChild(t, a);
                                var a = e.createTextNode("\n");
                                return e.appendChild(t, a), t
                            },
                            render: function (e, t, a) {
                                var n = t.dom,
                                    r = t.hooks,
                                    i = r.element;
                                n.detectNamespace(a);
                                var d;
                                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                                var s = n.childAt(d, [1]);
                                return i(t, s, e, "bind-attr", [], {
                                    src: "secureApplyUrl"
                                }), d
                            }
                        }
                    }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createComment("");
                        return e.appendChild(t, a), t
                    },
                    render: function (a, n, r) {
                        var i = n.dom,
                            d = n.hooks,
                            s = d.get,
                            c = d.block;
                        i.detectNamespace(r);
                        var o;
                        n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (o = this.build(i), this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0), this.cachedFragment && (o = i.cloneNode(this.cachedFragment, !0))) : o = this.build(i);
                        var l = i.createMorphAt(o, 0, 0, r);
                        return i.insertBoundary(o, null), i.insertBoundary(o, 0), c(n, l, a, "if", [s(n, a, "job.isOfficeDog")], {}, e, t), o
                    }
                }
            }(),
            a = function () {
                var e = function () {
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createTextNode("          ");
                                e.appendChild(t, a);
                                var a = e.createElement("p"),
                                    n = e.createElement("strong"),
                                    r = e.createTextNode("View on desktop to apply.");
                                e.appendChild(n, r), e.appendChild(a, n), e.appendChild(t, a);
                                var a = e.createTextNode("\n");
                                return e.appendChild(t, a), t
                            },
                            render: function (e, t, a) {
                                var n = t.dom;
                                n.detectNamespace(a);
                                var r;
                                return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n), this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0), this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n), r
                            }
                        }
                    }(),
                    t = function () {
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createTextNode("        ");
                                e.appendChild(t, a);
                                var a = e.createElement("div"),
                                    n = e.createTextNode("\n          ");
                                e.appendChild(a, n);
                                var n = e.createElement("button");
                                e.setAttribute(n, "class", "apply-button small");
                                var r = e.createTextNode("\n            Apply now\n          ");
                                e.appendChild(n, r), e.appendChild(a, n);
                                var n = e.createTextNode("\n        ");
                                e.appendChild(a, n), e.appendChild(t, a);
                                var a = e.createTextNode("\n");
                                return e.appendChild(t, a), t
                            },
                            render: function (e, t, a) {
                                var n = t.dom,
                                    r = t.hooks,
                                    i = r.element;
                                n.detectNamespace(a);
                                var d;
                                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                                var s = n.childAt(d, [1, 1]);
                                return i(t, s, e, "action", ["apply"], {}), d
                            }
                        }
                    }(),
                    a = function () {
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createTextNode("          ");
                                e.appendChild(t, a);
                                var a = e.createElement("p"),
                                    n = e.createElement("strong"),
                                    r = e.createTextNode("View on desktop to apply.");
                                e.appendChild(n, r), e.appendChild(a, n), e.appendChild(t, a);
                                var a = e.createTextNode("\n");
                                return e.appendChild(t, a), t
                            },
                            render: function (e, t, a) {
                                var n = t.dom;
                                n.detectNamespace(a);
                                var r;
                                return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n), this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0), this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n), r
                            }
                        }
                    }(),
                    n = function () {
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createTextNode("        ");
                                e.appendChild(t, a);
                                var a = e.createElement("div"),
                                    n = e.createTextNode("\n          ");
                                e.appendChild(a, n);
                                var n = e.createElement("button");
                                e.setAttribute(n, "class", "apply-button small");
                                var r = e.createTextNode("\n            Apply now\n          ");
                                e.appendChild(n, r), e.appendChild(a, n);
                                var n = e.createTextNode("\n        ");
                                e.appendChild(a, n), e.appendChild(t, a);
                                var a = e.createTextNode("\n");
                                return e.appendChild(t, a), t
                            },
                            render: function (e, t, a) {
                                var n = t.dom,
                                    r = t.hooks,
                                    i = r.element;
                                n.detectNamespace(a);
                                var d;
                                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                                var s = n.childAt(d, [1, 1]);
                                return i(t, s, e, "action", ["apply"], {}), d
                            }
                        }
                    }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("        ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        return e.appendChild(t, a), t
                    },
                    render: function (r, i, d) {
                        var s = i.dom,
                            c = i.hooks,
                            o = c.get,
                            l = c.block,
                            h = c.content;
                        s.detectNamespace(d);
                        var u;
                        i.useFragmentCache && s.canClone ? (null === this.cachedFragment && (u = this.build(s), this.hasRendered ? this.cachedFragment = u : this.hasRendered = !0), this.cachedFragment && (u = s.cloneNode(this.cachedFragment, !0))) : u = this.build(s);
                        var p = s.createMorphAt(u, 0, 0, d),
                            m = s.createUnsafeMorphAt(u, 2, 2, d),
                            v = s.createMorphAt(u, 4, 4, d);
                        return s.insertBoundary(u, null), s.insertBoundary(u, 0), l(i, p, r, "if", [o(i, r, "isMobile")], {}, e, t), h(i, m, r, "job.description"), l(i, v, r, "if", [o(i, r, "isMobile")], {}, a, n), u
                    }
                }
            }(),
            n = function () {
                var e = function () {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null,
                        hasRendered: !1,
                        build: function (e) {
                            var t = e.createDocumentFragment(),
                                a = e.createComment("");
                            return e.appendChild(t, a), t
                        },
                        render: function (e, t, a) {
                            var n = t.dom,
                                r = t.hooks,
                                i = r.content;
                            n.detectNamespace(a);
                            var d;
                            t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                            var s = n.createMorphAt(d, 0, 0, a);
                            return n.insertBoundary(d, null), n.insertBoundary(d, 0), i(t, s, e, "title"), d
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("          ");
                        e.appendChild(t, a);
                        var a = e.createElement("li"),
                            n = e.createComment("");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (t, a, n) {
                        var r = a.dom,
                            i = a.hooks,
                            d = i.get,
                            s = i.block;
                        r.detectNamespace(n);
                        var c;
                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r), this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0), this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                        var o = r.createMorphAt(r.childAt(c, [1]), 0, 0);
                        return s(a, o, t, "link-to", ["jobs.job", d(a, t, "id")], {}, e, null), c
                    }
                }
            }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createElement("div");
                e.setAttribute(a, "class", "modal"), e.appendChild(t, a);
                var a = e.createTextNode("\n");
                e.appendChild(t, a);
                var a = e.createElement("div");
                e.setAttribute(a, "class", "container");
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("div");
                e.setAttribute(n, "class", "job-modal content-modal");
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("div");
                e.setAttribute(r, "class", "header");
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("span");
                e.setAttribute(i, "class", "close");
                var d = e.createTextNode("×");
                e.appendChild(i, d), e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createComment("");
                e.appendChild(r, i);
                var i = e.createTextNode("\n    ");
                e.appendChild(r, i), e.appendChild(n, r);
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("div");
                e.setAttribute(r, "class", "content");
                var i = e.createTextNode("\n");
                e.appendChild(r, i);
                var i = e.createComment("");
                e.appendChild(r, i);
                var i = e.createComment("");
                e.appendChild(r, i);
                var i = e.createTextNode("    ");
                e.appendChild(r, i), e.appendChild(n, r);
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("div");
                e.setAttribute(r, "class", "footer");
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("h5"),
                    d = e.createTextNode("More openings at Vine");
                e.appendChild(i, d), e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("ul");
                e.setAttribute(i, "class", "position-list");
                var d = e.createTextNode("\n");
                e.appendChild(i, d);
                var d = e.createComment("");
                e.appendChild(i, d);
                var d = e.createTextNode("      ");
                e.appendChild(i, d), e.appendChild(r, i);
                var i = e.createTextNode("\n    ");
                e.appendChild(r, i), e.appendChild(n, r);
                var r = e.createTextNode("\n  ");
                e.appendChild(n, r), e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n), e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a), t
            },
            render: function (r, i, d) {
                var s = i.dom,
                    c = i.hooks,
                    o = c.element,
                    l = c.content,
                    h = c.get,
                    u = c.block;
                s.detectNamespace(d);
                var p;
                i.useFragmentCache && s.canClone ? (null === this.cachedFragment && (p = this.build(s), this.hasRendered ? this.cachedFragment = p : this.hasRendered = !0), this.cachedFragment && (p = s.cloneNode(this.cachedFragment, !0))) : p = this.build(s);
                var m = s.childAt(p, [2, 1]),
                    v = s.childAt(m, [1]),
                    g = s.childAt(v, [1]),
                    b = s.childAt(m, [3]),
                    C = s.createMorphAt(v, 3, 3),
                    f = s.createMorphAt(b, 1, 1),
                    F = s.createMorphAt(b, 2, 2),
                    N = s.createMorphAt(s.childAt(m, [5, 3]), 1, 1);
                return o(i, g, r, "action", ["hideModal"], {}), l(i, C, r, "job.title"), u(i, f, r, "unless", [h(i, r, "isMobile")], {}, e, null), u(i, F, r, "if", [h(i, r, "applying")], {}, t, a), u(i, N, r, "each", [h(i, r, "content")], {}, n, null), p
            }
        }
    }())
}), define("vine-ember/templates/modal/login", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        var e = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("      To ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode(", you must sign in.\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.content;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var s = n.createMorphAt(d, 1, 1, a);
                        return i(t, s, e, "attemptedAction"), d
                    }
                }
            }(),
            t = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("      Please sign into your Vine account.\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom;
                        n.detectNamespace(a);
                        var r;
                        return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n), this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0), this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n), r
                    }
                }
            }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createElement("div");
                e.setAttribute(a, "class", "container vertically-center");
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("div");
                e.setAttribute(n, "class", "card");
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("div");
                e.setAttribute(r, "class", "icon-vine_logo"), e.appendChild(n, r);
                var r = e.createTextNode("\n");
                e.appendChild(n, r);
                var r = e.createComment("");
                e.appendChild(n, r);
                var r = e.createTextNode("    ");
                e.appendChild(n, r);
                var r = e.createElement("div");
                e.setAttribute(r, "class", "content");
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createComment("");
                e.appendChild(r, i);
                var i = e.createTextNode("\n    ");
                e.appendChild(r, i), e.appendChild(n, r);
                var r = e.createTextNode("\n  ");
                e.appendChild(n, r), e.appendChild(a, n);
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("div");
                e.setAttribute(n, "class", "signup");
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("b"),
                    i = e.createTextNode("Don't have an account?");
                e.appendChild(r, i), e.appendChild(n, r);
                var r = e.createTextNode("\n    Download the app to sign up!\n    ");
                e.appendChild(n, r);
                var r = e.createComment("");
                e.appendChild(n, r);
                var r = e.createTextNode("\n  ");
                e.appendChild(n, r), e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n), e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a), t
            },
            render: function (a, n, r) {
                var i = n.dom,
                    d = n.hooks,
                    s = d.get,
                    c = d.block,
                    o = d.inline,
                    l = d.content;
                i.detectNamespace(r);
                var h;
                n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (h = this.build(i), this.hasRendered ? this.cachedFragment = h : this.hasRendered = !0), this.cachedFragment && (h = i.cloneNode(this.cachedFragment, !0))) : h = this.build(i);
                var u = i.childAt(h, [0]),
                    p = i.childAt(u, [1]),
                    m = i.createMorphAt(p, 3, 3),
                    v = i.createMorphAt(i.childAt(p, [5]), 1, 1),
                    g = i.createMorphAt(i.childAt(u, [3]), 3, 3);
                return c(n, m, a, "if", [s(n, a, "attemptedAction")], {}, e, t), o(n, v, a, "render", ["login"], {}), l(n, g, a, "download-buttons"), h
            }
        }
    }())
}), define("vine-ember/templates/modal/post", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        var e = function () {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null,
                hasRendered: !1,
                build: function (e) {
                    var t = e.createDocumentFragment(),
                        a = e.createTextNode("  ");
                    e.appendChild(t, a);
                    var a = e.createComment("");
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n  ");
                    e.appendChild(t, a);
                    var a = e.createComment("");
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a), t
                },
                render: function (e, t, a) {
                    var n = t.dom,
                        r = t.hooks,
                        i = r.get,
                        d = r.inline;
                    n.detectNamespace(a);
                    var s;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                    var c = n.createMorphAt(s, 1, 1, a),
                        o = n.createMorphAt(s, 3, 3, a);
                    return d(t, c, e, "render", ["permalink-post", i(t, e, "currentPost")], {}), d(t, o, e, "modal-post-context", [], {
                        postContext: i(t, e, "currentPost.context")
                    }), s
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createComment("");
                e.appendChild(t, a);
                var a = e.createElement("div"),
                    n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("div");
                e.setAttribute(n, "class", "icon-carrow"), e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n), e.appendChild(t, a);
                var a = e.createTextNode("\n");
                e.appendChild(t, a);
                var a = e.createElement("div"),
                    n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("div");
                e.setAttribute(n, "class", "icon-carrow_left"), e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n), e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a), t
            },
            render: function (t, a, n) {
                var r = a.dom,
                    i = a.hooks,
                    d = i.get,
                    s = i.block,
                    c = i.element;
                r.detectNamespace(n);
                var o;
                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (o = this.build(r), this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0), this.cachedFragment && (o = r.cloneNode(this.cachedFragment, !0))) : o = this.build(r);
                var l = r.childAt(o, [1]),
                    h = r.childAt(o, [3]),
                    u = r.createMorphAt(o, 0, 0, n);
                return r.insertBoundary(o, 0), s(a, u, t, "if", [d(a, t, "currentPost")], {}, e, null), c(a, l, t, "bind-attr", [], {
                    "class": ":action :nav-action :right nextAvailable::disabled"
                }), c(a, l, t, "action", ["navRight"], {}), c(a, h, t, "bind-attr", [], {
                    "class": ":action :nav-action :left prevAvailable::disabled"
                }), c(a, h, t, "action", ["navLeft"], {}), o
            }
        }
    }())
}), define("vine-ember/templates/modal/report", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        var e = function () {
                var e = function () {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null,
                        hasRendered: !1,
                        build: function (e) {
                            var t = e.createDocumentFragment(),
                                a = e.createElement("br");
                            e.appendChild(t, a);
                            var a = e.createComment("");
                            return e.appendChild(t, a), t
                        },
                        render: function (e, t, a) {
                            var n = t.dom,
                                r = t.hooks,
                                i = r.content;
                            n.detectNamespace(a);
                            var d;
                            t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                            var s = n.createMorphAt(d, 1, 1, a);
                            return n.insertBoundary(d, null), i(t, s, e, "error.message"), d
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("        ");
                        e.appendChild(t, a);
                        var a = e.createElement("div");
                        e.setAttribute(a, "class", "error");
                        var n = e.createTextNode("\n          Oops! Something went wrong.  Please try again.\n          ");
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        e.appendChild(a, n);
                        var n = e.createTextNode("\n        ");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (t, a, n) {
                        var r = a.dom,
                            i = a.hooks,
                            d = i.get,
                            s = i.block;
                        r.detectNamespace(n);
                        var c;
                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r), this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0), this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                        var o = r.createMorphAt(r.childAt(c, [1]), 1, 1);
                        return s(a, o, t, "if", [d(a, t, "error.message")], {}, e, null), c
                    }
                }
            }(),
            t = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("        ");
                        e.appendChild(t, a);
                        var a = e.createElement("div");
                        e.setAttribute(a, "class", "confirmation");
                        var n = e.createTextNode("\n          ");
                        e.appendChild(a, n);
                        var n = e.createElement("div");
                        e.setAttribute(n, "class", "icon-check_mark"), e.appendChild(a, n);
                        var n = e.createTextNode("\n          ");
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        e.appendChild(a, n);
                        var n = e.createTextNode("\n        ");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.content;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var s = n.createMorphAt(n.childAt(d, [1]), 3, 3);
                        return i(t, s, e, "confirmation"), d
                    }
                }
            }(),
            a = function () {
                var e = function () {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null,
                        hasRendered: !1,
                        build: function (e) {
                            var t = e.createDocumentFragment(),
                                a = e.createTextNode("                ");
                            e.appendChild(t, a);
                            var a = e.createElement("div");
                            e.setAttribute(a, "class", "row");
                            var n = e.createTextNode("\n                  ");
                            e.appendChild(a, n);
                            var n = e.createElement("input");
                            e.setAttribute(n, "name", "reason"), e.setAttribute(n, "type", "radio"), e.appendChild(a, n);
                            var n = e.createTextNode("\n                  ");
                            e.appendChild(a, n);
                            var n = e.createElement("span"),
                                r = e.createComment("");
                            e.appendChild(n, r), e.appendChild(a, n);
                            var n = e.createTextNode("\n                ");
                            e.appendChild(a, n), e.appendChild(t, a);
                            var a = e.createTextNode("\n");
                            return e.appendChild(t, a), t
                        },
                        render: function (e, t, a) {
                            var n = t.dom,
                                r = t.hooks,
                                i = r.get,
                                d = r.element,
                                s = r.content;
                            n.detectNamespace(a);
                            var c;
                            t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n), this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0), this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                            var o = n.childAt(c, [1]),
                                l = n.childAt(o, [1]),
                                h = n.createMorphAt(n.childAt(o, [3]), 0, 0);
                            return d(t, l, e, "bind-attr", [], {
                                value: i(t, e, "value")
                            }), d(t, l, e, "action", ["selectReason", i(t, e, "value"), i(t, e, "confirmation")], {
                                preventDefault: !1
                            }), s(t, h, e, "title"), c
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("        ");
                        e.appendChild(t, a);
                        var a = e.createElement("form");
                        e.setAttribute(a, "id", "report");
                        var n = e.createTextNode("\n          ");
                        e.appendChild(a, n);
                        var n = e.createElement("div");
                        e.setAttribute(n, "class", "block");
                        var r = e.createTextNode("\n            ");
                        e.appendChild(n, r);
                        var r = e.createElement("div");
                        e.setAttribute(r, "class", "row action selected");
                        var i = e.createTextNode("\n              ");
                        e.appendChild(r, i);
                        var i = e.createComment("");
                        e.appendChild(r, i);
                        var i = e.createTextNode("\n              ");
                        e.appendChild(r, i);
                        var i = e.createElement("span"),
                            d = e.createTextNode("Block ");
                        e.appendChild(i, d);
                        var d = e.createComment("");
                        e.appendChild(i, d), e.appendChild(r, i);
                        var i = e.createTextNode("\n            ");
                        e.appendChild(r, i), e.appendChild(n, r);
                        var r = e.createTextNode("\n          ");
                        e.appendChild(n, r), e.appendChild(a, n);
                        var n = e.createTextNode("\n          ");
                        e.appendChild(a, n);
                        var n = e.createElement("div");
                        e.setAttribute(n, "class", "report");
                        var r = e.createTextNode("\n            ");
                        e.appendChild(n, r);
                        var r = e.createElement("div");
                        e.setAttribute(r, "class", "row action");
                        var i = e.createTextNode("\n              ");
                        e.appendChild(r, i);
                        var i = e.createComment("");
                        e.appendChild(r, i);
                        var i = e.createTextNode("\n              ");
                        e.appendChild(r, i);
                        var i = e.createElement("span"),
                            d = e.createTextNode("File a report");
                        e.appendChild(i, d), e.appendChild(r, i);
                        var i = e.createTextNode("\n            ");
                        e.appendChild(r, i), e.appendChild(n, r);
                        var r = e.createTextNode("\n            ");
                        e.appendChild(n, r);
                        var r = e.createElement("div"),
                            i = e.createTextNode("\n              ");
                        e.appendChild(r, i);
                        var i = e.createElement("p");
                        e.setAttribute(i, "class", "prompt");
                        var d = e.createComment("");
                        e.appendChild(i, d), e.appendChild(r, i);
                        var i = e.createTextNode("\n");
                        e.appendChild(r, i);
                        var i = e.createComment("");
                        e.appendChild(r, i);
                        var i = e.createTextNode("            ");
                        e.appendChild(r, i), e.appendChild(n, r);
                        var r = e.createTextNode("\n          ");
                        e.appendChild(n, r), e.appendChild(a, n);
                        var n = e.createTextNode("\n\n          ");
                        e.appendChild(a, n);
                        var n = e.createElement("div");
                        e.setAttribute(n, "class", "submit");
                        var r = e.createTextNode("\n            ");
                        e.appendChild(n, r);
                        var r = e.createElement("button");
                        e.setAttribute(r, "class", "small"), e.setAttribute(r, "type", "submit");
                        var i = e.createTextNode("\n              ");
                        e.appendChild(r, i);
                        var i = e.createComment("");
                        e.appendChild(r, i);
                        var i = e.createTextNode("\n            ");
                        e.appendChild(r, i), e.appendChild(n, r);
                        var r = e.createTextNode("\n          ");
                        e.appendChild(n, r), e.appendChild(a, n);
                        var n = e.createTextNode("\n        ");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (t, a, n) {
                        var r = a.dom,
                            i = a.hooks,
                            d = i.element,
                            s = i.get,
                            c = i.inline,
                            o = i.content,
                            l = i.block;
                        r.detectNamespace(n);
                        var h;
                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (h = this.build(r), this.hasRendered ? this.cachedFragment = h : this.hasRendered = !0), this.cachedFragment && (h = r.cloneNode(this.cachedFragment, !0))) : h = this.build(r);
                        var u = r.childAt(h, [1]),
                            p = r.childAt(u, [1, 1]),
                            m = r.childAt(u, [3]),
                            v = r.childAt(m, [3]),
                            g = r.childAt(u, [5, 1]),
                            b = r.createMorphAt(p, 1, 1),
                            C = r.createMorphAt(r.childAt(p, [3]), 1, 1),
                            f = r.createMorphAt(r.childAt(m, [1]), 1, 1),
                            F = r.createMorphAt(r.childAt(v, [1]), 0, 0),
                            N = r.createMorphAt(v, 3, 3),
                            T = r.createMorphAt(g, 1, 1);
                        return d(a, u, t, "action", ["submitReport"], {
                            on: "submit"
                        }), c(a, b, t, "input", [], {
                            type: "checkbox",
                            name: "block",
                            checked: s(a, t, "isBlock")
                        }), c(a, C, t, "replace-emoji", [s(a, t, "username")], {}), c(a, f, t, "input", [], {
                            type: "checkbox",
                            name: "report",
                            checked: s(a, t, "isReport")
                        }), d(a, v, t, "bind-attr", [], {
                            "class": ":reasons isReport::hidden"
                        }), o(a, F, t, "prompt"), l(a, N, t, "each", [s(a, t, "choices")], {}, e, null), d(a, g, t, "bind-attr", [], {
                            disabled: s(a, t, "disableSubmit")
                        }), o(a, T, t, "submitText"), h
                    }
                }
            }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createElement("div");
                e.setAttribute(a, "class", "container vertically-center");
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("div");
                e.setAttribute(n, "class", "card");
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("div");
                e.setAttribute(r, "class", "icon-close_x"), e.appendChild(n, r);
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("div");
                e.setAttribute(r, "class", "header");
                var i = e.createTextNode("\n      Block user or report\n");
                e.appendChild(r, i);
                var i = e.createComment("");
                e.appendChild(r, i);
                var i = e.createTextNode("    ");
                e.appendChild(r, i), e.appendChild(n, r);
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("div");
                e.setAttribute(r, "class", "content");
                var i = e.createTextNode("\n");
                e.appendChild(r, i);
                var i = e.createComment("");
                e.appendChild(r, i);
                var i = e.createTextNode("    ");
                e.appendChild(r, i), e.appendChild(n, r);
                var r = e.createTextNode("\n  ");
                e.appendChild(n, r), e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n), e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a), t
            },
            render: function (n, r, i) {
                var d = r.dom,
                    s = r.hooks,
                    c = s.element,
                    o = s.get,
                    l = s.block;
                d.detectNamespace(i);
                var h;
                r.useFragmentCache && d.canClone ? (null === this.cachedFragment && (h = this.build(d), this.hasRendered ? this.cachedFragment = h : this.hasRendered = !0), this.cachedFragment && (h = d.cloneNode(this.cachedFragment, !0))) : h = this.build(d);
                var u = d.childAt(h, [0, 1]),
                    p = d.childAt(u, [1]),
                    m = d.createMorphAt(d.childAt(u, [3]), 1, 1),
                    v = d.createMorphAt(d.childAt(u, [5]), 1, 1);
                return c(r, p, n, "action", ["hideModal"], {}), l(r, m, n, "if", [o(r, n, "error")], {}, e, null), l(r, v, n, "if", [o(r, n, "isConfirmation")], {}, t, a), h
            }
        }
    }())
}), define("vine-ember/templates/modal/vm-user", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        var e = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("    ");
                        e.appendChild(t, a);
                        var a = e.createElement("div");
                        e.setAttribute(a, "class", "checkbox selected");
                        var n = e.createTextNode("\n      ");
                        e.appendChild(a, n);
                        var n = e.createElement("i");
                        e.setAttribute(n, "class", "icon-check_mark"), e.appendChild(a, n);
                        var n = e.createTextNode("\n    ");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.get,
                            d = r.element;
                        n.detectNamespace(a);
                        var s;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                        var c = n.childAt(s, [1]);
                        return d(t, c, e, "bind-attr", [], {
                            style: i(t, e, "backgroundColorStyle")
                        }), s
                    }
                }
            }(),
            t = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("    ");
                        e.appendChild(t, a);
                        var a = e.createElement("div");
                        e.setAttribute(a, "class", "checkbox");
                        var n = e.createTextNode("\n      ");
                        e.appendChild(a, n);
                        var n = e.createElement("i");
                        e.setAttribute(n, "class", "icon-check_mark"), e.appendChild(a, n);
                        var n = e.createTextNode("\n    ");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom;
                        n.detectNamespace(a);
                        var r;
                        return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n), this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0), this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n), r
                    }
                }
            }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createElement("div");
                e.setAttribute(a, "class", "row");
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n), e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a), t
            },
            render: function (a, n, r) {
                var i = n.dom,
                    d = n.hooks,
                    s = d.get,
                    c = d.element,
                    o = d.inline,
                    l = d.block;
                i.detectNamespace(r);
                var h;
                n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (h = this.build(i), this.hasRendered ? this.cachedFragment = h : this.hasRendered = !0), this.cachedFragment && (h = i.cloneNode(this.cachedFragment, !0))) : h = this.build(i);
                var u = i.childAt(h, [0]),
                    p = i.createMorphAt(u, 1, 1),
                    m = i.createMorphAt(u, 3, 3);
                return c(n, u, a, "action", ["addRecipient", s(n, a, "this")], {}), o(n, p, a, "user-info", [], {
                    data: s(n, a, "this"),
                    cssClass: "user-info-size-20",
                    delinkify: !0,
                    textColor: s(n, a, "textColor")
                }), l(n, m, a, "if", [s(n, a, "selected")], {}, e, t), h
            }
        }
    }())
}), define("vine-ember/templates/modal/vm", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        var e = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createElement("div");
                        e.setAttribute(a, "class", "error");
                        var n = e.createTextNode("Oops! Something went wrong.  Please try again.");
                        e.appendChild(a, n);
                        var n = e.createElement("br");
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        return e.appendChild(a, n), e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.content;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var s = n.createMorphAt(n.childAt(d, [0]), 2, 2);
                        return i(t, s, e, "error"), d
                    }
                }
            }(),
            t = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("          ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n          ");
                        e.appendChild(t, a);
                        var a = e.createElement("div");
                        e.setAttribute(a, "class", "post-thumbnail"), e.appendChild(t, a);
                        var a = e.createTextNode("\n          ");
                        e.appendChild(t, a);
                        var a = e.createElement("div");
                        e.setAttribute(a, "class", "description");
                        var n = e.createComment("");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.get,
                            d = r.inline,
                            s = r.element;
                        n.detectNamespace(a);
                        var c;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n), this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0), this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                        var o = n.childAt(c, [3]),
                            l = n.createMorphAt(c, 1, 1, a),
                            h = n.createMorphAt(n.childAt(c, [5]), 0, 0);
                        return d(t, l, e, "user-info", [], {
                            data: i(t, e, "this"),
                            cssClass: "user-info-size-20"
                        }), s(t, o, e, "bind-attr", [], {
                            style: i(t, e, "backgroundImageStyle")
                        }), d(t, h, e, "linkify-entities", [], {
                            text: i(t, e, "description"),
                            entities: i(t, e, "entities")
                        }), c
                    }
                }
            }(),
            a = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("          ");
                        e.appendChild(t, a);
                        var a = e.createElement("div");
                        e.setAttribute(a, "class", "confirmation");
                        var n = e.createTextNode("\n            ");
                        e.appendChild(a, n);
                        var n = e.createElement("span");
                        e.setAttribute(n, "class", "icon-smiley"), e.appendChild(a, n);
                        var n = e.createTextNode("\n            ");
                        e.appendChild(a, n);
                        var n = e.createElement("div");
                        e.setAttribute(n, "class", "title");
                        var r = e.createTextNode("Message sent!");
                        e.appendChild(n, r), e.appendChild(a, n);
                        var n = e.createTextNode("\n          ");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom;
                        n.detectNamespace(a);
                        var r;
                        return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n), this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0), this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n), r
                    }
                }
            }(),
            n = function () {
                var e = function () {
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createElement("span");
                                e.setAttribute(a, "class", "recipient");
                                var n = e.createTextNode("\n                ");
                                e.appendChild(a, n);
                                var n = e.createComment("");
                                e.appendChild(a, n);
                                var n = e.createTextNode("\n                ");
                                e.appendChild(a, n);
                                var n = e.createElement("a");
                                e.setAttribute(n, "class", "close");
                                var r = e.createTextNode("x");
                                e.appendChild(n, r), e.appendChild(a, n);
                                var n = e.createTextNode("\n              ");
                                return e.appendChild(a, n), e.appendChild(t, a), t
                            },
                            render: function (e, t, a) {
                                var n = t.dom,
                                    r = t.hooks,
                                    i = r.get,
                                    d = r.element,
                                    s = r.content;
                                n.detectNamespace(a);
                                var c;
                                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n), this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0), this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                                var o = n.childAt(c, [0]),
                                    l = n.childAt(o, [3]),
                                    h = n.createMorphAt(o, 1, 1);
                                return d(t, o, e, "bind-attr", [], {
                                    style: i(t, e, "backgroundColorStyle")
                                }), s(t, h, e, "username"), d(t, l, e, "action", ["removeRecipient", i(t, e, "this")], {}), c
                            }
                        }
                    }(),
                    t = function () {
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createElement("i");
                                e.setAttribute(a, "class", "close");
                                var n = e.createTextNode("x");
                                return e.appendChild(a, n), e.appendChild(t, a), t
                            },
                            render: function (e, t, a) {
                                var n = t.dom,
                                    r = t.hooks,
                                    i = r.element;
                                n.detectNamespace(a);
                                var d;
                                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                                var s = n.childAt(d, [0]);
                                return i(t, s, e, "action", ["resetAutocomplete"], {}), d
                            }
                        }
                    }(),
                    a = function () {
                        var e = function () {
                            return {
                                isHTMLBars: !0,
                                revision: "Ember@1.11.3",
                                blockParams: 0,
                                cachedFragment: null,
                                hasRendered: !1,
                                build: function (e) {
                                    var t = e.createDocumentFragment(),
                                        a = e.createTextNode("                    ");
                                    e.appendChild(t, a);
                                    var a = e.createComment("");
                                    e.appendChild(t, a);
                                    var a = e.createTextNode("\n");
                                    return e.appendChild(t, a), t
                                },
                                render: function (e, t, a) {
                                    var n = t.dom,
                                        r = t.hooks,
                                        i = r.inline;
                                    n.detectNamespace(a);
                                    var d;
                                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                                    var s = n.createMorphAt(d, 1, 1, a);
                                    return i(t, s, e, "partial", ["modal/vm-user"], {}), d
                                }
                            }
                        }();
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createTextNode("                  ");
                                e.appendChild(t, a);
                                var a = e.createElement("div");
                                e.setAttribute(a, "class", "category");
                                var n = e.createComment("");
                                e.appendChild(a, n), e.appendChild(t, a);
                                var a = e.createTextNode("\n");
                                e.appendChild(t, a);
                                var a = e.createComment("");
                                return e.appendChild(t, a), t
                            },
                            render: function (t, a, n) {
                                var r = a.dom,
                                    i = a.hooks,
                                    d = i.content,
                                    s = i.get,
                                    c = i.block;
                                r.detectNamespace(n);
                                var o;
                                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (o = this.build(r), this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0), this.cachedFragment && (o = r.cloneNode(this.cachedFragment, !0))) : o = this.build(r);
                                var l = r.createMorphAt(r.childAt(o, [1]), 0, 0),
                                    h = r.createMorphAt(o, 3, 3, n);
                                return r.insertBoundary(o, null), d(a, l, t, "category"), c(a, h, t, "each", [s(a, t, "users")], {}, e, null), o
                            }
                        }
                    }(),
                    n = function () {
                        var e = function () {
                            return {
                                isHTMLBars: !0,
                                revision: "Ember@1.11.3",
                                blockParams: 0,
                                cachedFragment: null,
                                hasRendered: !1,
                                build: function (e) {
                                    var t = e.createDocumentFragment(),
                                        a = e.createTextNode("                  ");
                                    e.appendChild(t, a);
                                    var a = e.createComment("");
                                    e.appendChild(t, a);
                                    var a = e.createTextNode("\n");
                                    return e.appendChild(t, a), t
                                },
                                render: function (e, t, a) {
                                    var n = t.dom,
                                        r = t.hooks,
                                        i = r.inline;
                                    n.detectNamespace(a);
                                    var d;
                                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                                    var s = n.createMorphAt(d, 1, 1, a);
                                    return i(t, s, e, "partial", ["modal/vm-user"], {}), d
                                }
                            }
                        }();
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createComment("");
                                return e.appendChild(t, a), t
                            },
                            render: function (t, a, n) {
                                var r = a.dom,
                                    i = a.hooks,
                                    d = i.get,
                                    s = i.block;
                                r.detectNamespace(n);
                                var c;
                                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r), this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0), this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                                var o = r.createMorphAt(c, 0, 0, n);
                                return r.insertBoundary(c, null), r.insertBoundary(c, 0), s(a, o, t, "each", [d(a, t, "autocompleteRecipients")], {}, e, null), c
                            }
                        }
                    }(),
                    r = function () {
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createComment("");
                                return e.appendChild(t, a), t
                            },
                            render: function (e, t, a) {
                                var n = t.dom,
                                    r = t.hooks,
                                    i = r.inline;
                                n.detectNamespace(a);
                                var d;
                                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                                var s = n.createMorphAt(d, 0, 0, a);
                                return n.insertBoundary(d, null), n.insertBoundary(d, 0), i(t, s, e, "cdn-img", [], {
                                    "class": "loading",
                                    src: "images/loading_black-eba83ac14d1ce0d2c128e8f6e47076f6.gif",
                                    width: "25",
                                    height: "25"
                                }), d
                            }
                        }
                    }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("          ");
                        e.appendChild(t, a);
                        var a = e.createElement("div");
                        e.setAttribute(a, "class", "recipients-label");
                        var n = e.createTextNode("To:");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n          ");
                        e.appendChild(t, a);
                        var a = e.createElement("div");
                        e.setAttribute(a, "class", "recipients");
                        var n = e.createTextNode("\n");
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        e.appendChild(a, n);
                        var n = e.createTextNode("          ");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n          ");
                        e.appendChild(t, a);
                        var a = e.createElement("form");
                        e.setAttribute(a, "id", "vm-compose");
                        var n = e.createTextNode("\n            ");
                        e.appendChild(a, n);
                        var n = e.createElement("i");
                        e.setAttribute(n, "class", "icon-search"), e.appendChild(a, n);
                        var n = e.createTextNode("\n            ");
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        e.appendChild(a, n);
                        var n = e.createTextNode("\n            ");
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        e.appendChild(a, n);
                        var n = e.createTextNode("\n          ");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n          ");
                        e.appendChild(t, a);
                        var a = e.createElement("div");
                        e.setAttribute(a, "class", "vm-recipients");
                        var n = e.createTextNode("\n            ");
                        e.appendChild(a, n);
                        var n = e.createElement("div");
                        e.setAttribute(n, "class", "recipients-container");
                        var r = e.createTextNode("\n              ");
                        e.appendChild(n, r);
                        var r = e.createElement("div"),
                            i = e.createTextNode("\n");
                        e.appendChild(r, i);
                        var i = e.createComment("");
                        e.appendChild(r, i);
                        var i = e.createTextNode("              ");
                        e.appendChild(r, i), e.appendChild(n, r);
                        var r = e.createTextNode("\n");
                        e.appendChild(n, r);
                        var r = e.createComment("");
                        e.appendChild(n, r);
                        var r = e.createTextNode("\n              ");
                        e.appendChild(n, r);
                        var r = e.createComment("");
                        e.appendChild(n, r);
                        var r = e.createTextNode("\n            ");
                        e.appendChild(n, r), e.appendChild(a, n);
                        var n = e.createTextNode("\n          ");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n\n          ");
                        e.appendChild(t, a);
                        var a = e.createElement("button");
                        e.setAttribute(a, "class", "small");
                        var n = e.createTextNode("Share");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (i, d, s) {
                        var c = d.dom,
                            o = d.hooks,
                            l = o.get,
                            h = o.block,
                            u = o.inline,
                            p = o.element;
                        c.detectNamespace(s);
                        var m;
                        d.useFragmentCache && c.canClone ? (null === this.cachedFragment && (m = this.build(c), this.hasRendered ? this.cachedFragment = m : this.hasRendered = !0), this.cachedFragment && (m = c.cloneNode(this.cachedFragment, !0))) : m = this.build(c);
                        var v = c.childAt(m, [5]),
                            g = c.childAt(m, [7, 1]),
                            b = c.childAt(g, [1]),
                            C = c.childAt(m, [9]),
                            f = c.createMorphAt(c.childAt(m, [3]), 1, 1),
                            F = c.createMorphAt(v, 3, 3),
                            N = c.createMorphAt(v, 5, 5),
                            T = c.createMorphAt(b, 1, 1),
                            x = c.createMorphAt(g, 3, 3),
                            A = c.createMorphAt(g, 5, 5);
                        return h(d, f, i, "each", [l(d, i, "recipients")], {}, e, null), u(d, F, i, "my-input", [], {
                            type: "input",
                            name: "recipient",
                            placeholder: "Who do you want to message?",
                            value: l(d, i, "recipient")
                        }), h(d, N, i, "if", [l(d, i, "recipient")], {}, t, null), p(d, b, i, "bind-attr", [], {
                            "class": "recipient:hidden"
                        }), h(d, T, i, "each", [l(d, i, "categorizedRecipients")], {}, a, null), h(d, x, i, "if", [l(d, i, "isAutocomplete")], {}, n, null), h(d, A, i, "if", [l(d, i, "paginating")], {}, r, null), p(d, C, i, "bind-attr", [], {
                            disabled: l(d, i, "sendDisabled")
                        }), p(d, C, i, "action", ["vmShare"], {}), m
                    }
                }
            }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createElement("div");
                e.setAttribute(a, "class", "modal"), e.appendChild(t, a);
                var a = e.createTextNode("\n");
                e.appendChild(t, a);
                var a = e.createElement("div");
                e.setAttribute(a, "class", "container");
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("div");
                e.setAttribute(n, "class", "vm-modal");
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("div");
                e.setAttribute(r, "class", "card");
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("div");
                e.setAttribute(i, "class", "icon-close_x"), e.appendChild(r, i);
                var i = e.createTextNode("\n\n      ");
                e.appendChild(r, i);
                var i = e.createElement("div");
                e.setAttribute(i, "class", "title");
                var d = e.createTextNode("\n        Share this post with a friend\n        ");
                e.appendChild(i, d);
                var d = e.createComment("");
                e.appendChild(i, d);
                var d = e.createTextNode("\n      ");
                e.appendChild(i, d), e.appendChild(r, i);
                var i = e.createTextNode("\n\n      ");
                e.appendChild(r, i);
                var i = e.createElement("div");
                e.setAttribute(i, "class", "post-preview");
                var d = e.createTextNode("\n");
                e.appendChild(i, d);
                var d = e.createComment("");
                e.appendChild(i, d);
                var d = e.createTextNode("      ");
                e.appendChild(i, d), e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("div");
                e.setAttribute(i, "class", "content");
                var d = e.createTextNode("\n");
                e.appendChild(i, d);
                var d = e.createComment("");
                e.appendChild(i, d);
                var d = e.createTextNode("      ");
                e.appendChild(i, d), e.appendChild(r, i);
                var i = e.createTextNode("\n    ");
                e.appendChild(r, i), e.appendChild(n, r);
                var r = e.createTextNode("\n  ");
                e.appendChild(n, r), e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n), e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a), t
            },
            render: function (r, i, d) {
                var s = i.dom,
                    c = i.hooks,
                    o = c.element,
                    l = c.get,
                    h = c.block;
                s.detectNamespace(d);
                var u;
                i.useFragmentCache && s.canClone ? (null === this.cachedFragment && (u = this.build(s), this.hasRendered ? this.cachedFragment = u : this.hasRendered = !0), this.cachedFragment && (u = s.cloneNode(this.cachedFragment, !0))) : u = this.build(s);
                var p = s.childAt(u, [2, 1, 1]),
                    m = s.childAt(p, [1]),
                    v = s.createMorphAt(s.childAt(p, [3]), 1, 1),
                    g = s.createMorphAt(s.childAt(p, [5]), 1, 1),
                    b = s.createMorphAt(s.childAt(p, [7]), 1, 1);
                return o(i, m, r, "action", ["hideModal"], {}), h(i, v, r, "if", [l(i, r, "error")], {}, e, null), h(i, g, r, "with", [l(i, r, "post")], {}, t, null), h(i, b, r, "if", [l(i, r, "confirmation")], {}, a, n), u
            }
        }
    }())
}), define("vine-ember/templates/not-found", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        var e = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createElement("p");
                        e.setAttribute(a, "class", "reason");
                        var n = e.createComment("");
                        return e.appendChild(a, n), e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.content;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var s = n.createMorphAt(n.childAt(d, [0]), 0, 0);
                        return i(t, s, e, "message"), d
                    }
                }
            }(),
            t = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("    ");
                        e.appendChild(t, a);
                        var a = e.createElement("button"),
                            n = e.createTextNode("Do it for the ");
                        e.appendChild(a, n);
                        var n = e.createElement("span");
                        e.setAttribute(n, "class", "icon-vine_logo"), e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom;
                        n.detectNamespace(a);
                        var r;
                        return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n), this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0), this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n), r
                    }
                }
            }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createComment("");
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                e.appendChild(t, a);
                var a = e.createElement("p"),
                    n = e.createTextNode("Oops!  Couldn't find it.");
                e.appendChild(a, n), e.appendChild(t, a);
                var a = e.createTextNode("\n");
                e.appendChild(t, a);
                var a = e.createComment("");
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                e.appendChild(t, a);
                var a = e.createElement("p"),
                    n = e.createTextNode("\n");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n), e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a), t
            },
            render: function (a, n, r) {
                var i = n.dom,
                    d = n.hooks,
                    s = d.inline,
                    c = d.get,
                    o = d.block;
                i.detectNamespace(r);
                var l;
                n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (l = this.build(i), this.hasRendered ? this.cachedFragment = l : this.hasRendered = !0), this.cachedFragment && (l = i.cloneNode(this.cachedFragment, !0))) : l = this.build(i);
                var h = i.createMorphAt(l, 0, 0, r),
                    u = i.createMorphAt(l, 4, 4, r),
                    p = i.createMorphAt(i.childAt(l, [6]), 1, 1);
                return i.insertBoundary(l, 0), s(n, h, a, "cdn-img", [], {
                    src: "images/frowny.svg",
                    width: "200"
                }), o(n, u, a, "if", [c(n, a, "message")], {}, e, null), o(n, p, a, "link-to", ["index"], {}, t, null), l
            }
        }
    }())
}), define("vine-ember/templates/pagination", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        var e = function () {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null,
                hasRendered: !1,
                build: function (e) {
                    var t = e.createDocumentFragment(),
                        a = e.createTextNode("  ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "pagination-container");
                    var n = e.createTextNode("\n    ");
                    e.appendChild(a, n);
                    var n = e.createElement("button"),
                        r = e.createTextNode("\n      Load more\n    ");
                    e.appendChild(n, r), e.appendChild(a, n);
                    var n = e.createTextNode("\n  ");
                    e.appendChild(a, n), e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a), t
                },
                render: function (e, t, a) {
                    var n = t.dom,
                        r = t.hooks,
                        i = r.get,
                        d = r.element;
                    n.detectNamespace(a);
                    var s;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                    var c = n.childAt(s, [1, 1]);
                    return d(t, c, e, "bind-attr", [], {
                        "class": ":pagination paginationLoading",
                        disabled: i(t, e, "paginationLoading")
                    }), d(t, c, e, "action", ["nextPage"], {}), s
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createComment("");
                return e.appendChild(t, a), t
            },
            render: function (t, a, n) {
                var r = a.dom,
                    i = a.hooks,
                    d = i.get,
                    s = i.block;
                r.detectNamespace(n);
                var c;
                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r), this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0), this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                var o = r.createMorphAt(c, 0, 0, n);
                return r.insertBoundary(c, null), r.insertBoundary(c, 0), s(a, o, t, "if", [d(a, t, "pagination.nextPage")], {}, e, null), c
            }
        }
    }())
}), define("vine-ember/templates/permalink-mobile", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createComment("");
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a), t
            },
            render: function (e, t, a) {
                var n = t.dom,
                    r = t.hooks,
                    i = r.inline;
                n.detectNamespace(a);
                var d;
                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                var s = n.createMorphAt(d, 0, 0, a);
                return n.insertBoundary(d, 0), i(t, s, e, "view", ["post-mobile"], {}), d
            }
        }
    }())
}), define("vine-ember/templates/permalink-post", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        var e = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("          ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.inline;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var s = n.createMorphAt(d, 1, 1, a);
                        return i(t, s, e, "partial", ["explicit-content"], {}), d
                    }
                }
            }(),
            t = function () {
                var e = function () {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null,
                        hasRendered: !1,
                        build: function (e) {
                            var t = e.createDocumentFragment(),
                                a = e.createTextNode("            ");
                            e.appendChild(t, a);
                            var a = e.createElement("div");
                            e.setAttribute(a, "class", "vine-player mobile");
                            var n = e.createTextNode("\n              ");
                            e.appendChild(a, n);
                            var n = e.createElement("div");
                            e.setAttribute(n, "class", "vine-video-container");
                            var r = e.createTextNode("\n                ");
                            e.appendChild(n, r);
                            var r = e.createElement("video");
                            e.setAttribute(r, "preload", "auto");
                            var i = e.createTextNode("\n                  ");
                            e.appendChild(r, i);
                            var i = e.createElement("source");
                            e.setAttribute(i, "type", "video/mp4"), e.appendChild(r, i);
                            var i = e.createTextNode("\n                ");
                            e.appendChild(r, i), e.appendChild(n, r);
                            var r = e.createTextNode("\n              ");
                            e.appendChild(n, r), e.appendChild(a, n);
                            var n = e.createTextNode("\n            ");
                            e.appendChild(a, n), e.appendChild(t, a);
                            var a = e.createTextNode("\n            ");
                            e.appendChild(t, a);
                            var a = e.createElement("img");
                            e.setAttribute(a, "class", "thumbnail"), e.appendChild(t, a);
                            var a = e.createTextNode("\n            ");
                            e.appendChild(t, a);
                            var a = e.createElement("button");
                            e.setAttribute(a, "class", "play"), e.appendChild(t, a);
                            var a = e.createTextNode("\n");
                            return e.appendChild(t, a), t
                        },
                        render: function (e, t, a) {
                            var n = t.dom,
                                r = t.hooks,
                                i = r.element,
                                d = r.get;
                            n.detectNamespace(a);
                            var s;
                            t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                            var c = n.childAt(s, [1]),
                                o = n.childAt(c, [1, 1, 1]),
                                l = n.childAt(s, [3]),
                                h = n.childAt(s, [5]);
                            return i(t, c, e, "action", ["pause"], {
                                target: "view"
                            }), i(t, o, e, "bind-attr", [], {
                                src: d(t, e, "secureVideoUrl")
                            }), i(t, l, e, "bind-attr", [], {
                                src: d(t, e, "secureThumbnailUrl")
                            }), i(t, h, e, "action", ["play"], {
                                target: "view"
                            }), s
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createComment("");
                        return e.appendChild(t, a), t
                    },
                    render: function (t, a, n) {
                        var r = a.dom,
                            i = a.hooks,
                            d = i.get,
                            s = i.block;
                        r.detectNamespace(n);
                        var c;
                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r), this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0), this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                        var o = r.createMorphAt(c, 0, 0, n);
                        return r.insertBoundary(c, null), r.insertBoundary(c, 0), s(a, o, t, "if", [d(a, t, "isMobile")], {}, e, null), c
                    }
                }
            }(),
            a = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createComment("");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.get,
                            d = r.inline;
                        n.detectNamespace(a);
                        var s;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                        var c = n.createMorphAt(s, 0, 0, a);
                        return n.insertBoundary(s, null), n.insertBoundary(s, 0), d(t, c, e, "follow-button", [], {
                            user: i(t, e, "this")
                        }), s
                    }
                }
            }(),
            n = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("              ");
                        e.appendChild(t, a);
                        var a = e.createElement("div");
                        e.setAttribute(a, "class", "post-description");
                        var n = e.createTextNode("\n                ");
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        e.appendChild(a, n);
                        var n = e.createTextNode("\n              ");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.get,
                            d = r.inline;
                        n.detectNamespace(a);
                        var s;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                        var c = n.createMorphAt(n.childAt(s, [1]), 1, 1);
                        return d(t, c, e, "linkify-entities", [], {
                            text: i(t, e, "description"),
                            entities: i(t, e, "entities")
                        }), s
                    }
                }
            }(),
            r = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("                ");
                        e.appendChild(t, a);
                        var a = e.createElement("span"),
                            n = e.createComment("");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.get,
                            d = r.inline;
                        n.detectNamespace(a);
                        var s;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                        var c = n.createMorphAt(n.childAt(s, [1]), 0, 0);
                        return d(t, c, e, "format-count", [i(t, e, "likes.count")], {
                            singleText: "Like",
                            pluralText: "Likes"
                        }), s
                    }
                }
            }(),
            i = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("                ");
                        e.appendChild(t, a);
                        var a = e.createElement("span"),
                            n = e.createComment("");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.get,
                            d = r.inline;
                        n.detectNamespace(a);
                        var s;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                        var c = n.createMorphAt(n.childAt(s, [1]), 0, 0);
                        return d(t, c, e, "format-count", [i(t, e, "reposts.count")], {
                            singleText: "Revine",
                            pluralText: "Revines"
                        }), s
                    }
                }
            }(),
            d = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("                ");
                        e.appendChild(t, a);
                        var a = e.createElement("span"),
                            n = e.createElement("a"),
                            r = e.createComment("");
                        e.appendChild(n, r), e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.element,
                            d = r.get,
                            s = r.inline;
                        n.detectNamespace(a);
                        var c;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n), this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0), this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                        var o = n.childAt(c, [1, 0]),
                            l = n.createMorphAt(o, 0, 0);
                        return i(t, o, e, "action", ["toggleComments"], {
                            target: "view"
                        }), s(t, l, e, "format-count", [d(t, e, "comments.count")], {
                            singleText: "Comment",
                            pluralText: "Comments"
                        }), c
                    }
                }
            }(),
            s = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("                ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.get,
                            d = r.inline;
                        n.detectNamespace(a);
                        var s;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                        var c = n.createMorphAt(s, 1, 1, a);
                        return d(t, c, e, "animated-button", [], {
                            actionName: "revine",
                            iconName: "revine_stroked",
                            isActive: i(t, e, "myRepostId"),
                            action: "revine"
                        }), s
                    }
                }
            }(),
            c = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("              ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.get,
                            d = r.inline;
                        n.detectNamespace(a);
                        var s;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                        var c = n.createMorphAt(s, 1, 1, a);
                        return d(t, c, e, "loop-count", [], {
                            postId: i(t, e, "postIdStr"),
                            loops: i(t, e, "loops"),
                            postDate: i(t, e, "created")
                        }), s
                    }
                }
            }(),
            o = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("      ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n      ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.inline,
                            d = r.get;
                        n.detectNamespace(a);
                        var s;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                        var c = n.createMorphAt(s, 1, 1, a),
                            o = n.createMorphAt(s, 3, 3, a);
                        return i(t, c, e, "render", ["related-videos/playing-vine"], {}), i(t, o, e, "related-videos", [], {
                            posts: d(t, e, "relatedPosts"),
                            pagination: d(t, e, "relatedPagination"),
                            params: d(t, e, "relatedParams"),
                            player: d(t, e, "relatedVideosPlayer"),
                            visible: d(t, e, "relatedVideosVisible")
                        }), s
                    }
                }
            }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createElement("div");
                e.setAttribute(a, "class", "share-sidebar");
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n), e.appendChild(t, a);
                var a = e.createTextNode("\n\n");
                e.appendChild(t, a);
                var a = e.createElement("div");
                e.setAttribute(a, "class", "permalink-container");
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("div");
                e.setAttribute(n, "class", "permalink-content-wrapper");
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("div");
                e.setAttribute(r, "class", "card");
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("div");
                e.setAttribute(i, "class", "video-container main");
                var d = e.createTextNode("\n        ");
                e.appendChild(i, d);
                var d = e.createElement("div");
                e.setAttribute(d, "class", "loading-bar"), e.appendChild(i, d);
                var d = e.createTextNode("\n");
                e.appendChild(i, d);
                var d = e.createComment("");
                e.appendChild(i, d);
                var d = e.createTextNode("      ");
                e.appendChild(i, d), e.appendChild(r, i);
                var i = e.createTextNode("\n\n      ");
                e.appendChild(r, i);
                var i = e.createElement("div");
                e.setAttribute(i, "class", "card-content");
                var d = e.createTextNode("\n        ");
                e.appendChild(i, d);
                var d = e.createElement("div");
                e.setAttribute(d, "class", "info-row");
                var s = e.createTextNode("\n          ");
                e.appendChild(d, s);
                var s = e.createComment("");
                e.appendChild(d, s);
                var s = e.createTextNode("\n          ");
                e.appendChild(d, s);
                var s = e.createComment("");
                e.appendChild(d, s);
                var s = e.createTextNode("\n          ");
                e.appendChild(d, s);
                var s = e.createComment("");
                e.appendChild(d, s);
                var s = e.createTextNode("\n        ");
                e.appendChild(d, s), e.appendChild(i, d);
                var d = e.createTextNode("\n\n        ");
                e.appendChild(i, d);
                var d = e.createElement("div");
                e.setAttribute(d, "class", "info-row");
                var s = e.createTextNode("\n          ");
                e.appendChild(d, s);
                var s = e.createElement("div"),
                    c = e.createTextNode("\n");
                e.appendChild(s, c);
                var c = e.createComment("");
                e.appendChild(s, c);
                var c = e.createTextNode("            ");
                e.appendChild(s, c);
                var c = e.createElement("div");
                e.setAttribute(c, "class", "post-social-metrics");
                var o = e.createTextNode("\n");
                e.appendChild(c, o);
                var o = e.createComment("");
                e.appendChild(c, o);
                var o = e.createComment("");
                e.appendChild(c, o);
                var o = e.createComment("");
                e.appendChild(c, o);
                var o = e.createTextNode("            ");
                e.appendChild(c, o), e.appendChild(s, c);
                var c = e.createTextNode("\n          ");
                e.appendChild(s, c), e.appendChild(d, s);
                var s = e.createTextNode("\n        ");
                e.appendChild(d, s), e.appendChild(i, d);
                var d = e.createTextNode("\n\n        ");
                e.appendChild(i, d);
                var d = e.createElement("div");
                e.setAttribute(d, "class", "info-row");
                var s = e.createTextNode("\n          ");
                e.appendChild(d, s);
                var s = e.createElement("div");
                e.setAttribute(s, "class", "post-engagement");
                var c = e.createTextNode("\n            ");
                e.appendChild(s, c);
                var c = e.createElement("div");
                e.setAttribute(c, "class", "post-actions");
                var o = e.createTextNode("\n              ");
                e.appendChild(c, o);
                var o = e.createComment("");
                e.appendChild(c, o);
                var o = e.createTextNode("\n");
                e.appendChild(c, o);
                var o = e.createComment("");
                e.appendChild(c, o);
                var o = e.createTextNode("            ");
                e.appendChild(c, o), e.appendChild(s, c);
                var c = e.createTextNode("\n");
                e.appendChild(s, c);
                var c = e.createComment("");
                e.appendChild(s, c);
                var c = e.createTextNode("          ");
                e.appendChild(s, c), e.appendChild(d, s);
                var s = e.createTextNode("\n\n          ");
                e.appendChild(d, s);
                var s = e.createElement("ul"),
                    c = e.createTextNode("\n            ");
                e.appendChild(s, c);
                var c = e.createComment("");
                e.appendChild(s, c);
                var c = e.createTextNode("\n          ");
                e.appendChild(s, c), e.appendChild(d, s);
                var s = e.createTextNode("\n          ");
                e.appendChild(d, s);
                var s = e.createComment("");
                e.appendChild(d, s);
                var s = e.createTextNode("\n        ");
                e.appendChild(d, s), e.appendChild(i, d);
                var d = e.createTextNode("\n      ");
                e.appendChild(i, d), e.appendChild(r, i);
                var i = e.createTextNode("\n\n      ");
                e.appendChild(r, i);
                var i = e.createElement("div");
                e.setAttribute(i, "class", "clearfix"), e.appendChild(r, i);
                var i = e.createTextNode("\n    ");
                e.appendChild(r, i), e.appendChild(n, r);
                var r = e.createTextNode("\n\n");
                e.appendChild(n, r);
                var r = e.createComment("");
                e.appendChild(n, r);
                var r = e.createTextNode("  ");
                e.appendChild(n, r), e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n), e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a), t
            },
            render: function (l, h, u) {
                var p = h.dom,
                    m = h.hooks,
                    v = m.get,
                    g = m.inline,
                    b = m.element,
                    C = m.block;
                p.detectNamespace(u);
                var f;
                h.useFragmentCache && p.canClone ? (null === this.cachedFragment && (f = this.build(p), this.hasRendered ? this.cachedFragment = f : this.hasRendered = !0), this.cachedFragment && (f = p.cloneNode(this.cachedFragment, !0))) : f = this.build(p);
                var F = p.childAt(f, [2, 1]),
                    N = p.childAt(F, [1]),
                    T = p.childAt(N, [1]),
                    x = p.childAt(N, [3]),
                    A = p.childAt(x, [1]),
                    k = p.childAt(x, [3, 1]),
                    E = p.childAt(k, [3]),
                    R = p.childAt(x, [5]),
                    M = p.childAt(R, [1]),
                    y = p.childAt(M, [1]),
                    w = p.childAt(R, [3]),
                    B = p.createMorphAt(p.childAt(f, [0]), 1, 1),
                    P = p.createMorphAt(T, 3, 3),
                    L = p.createMorphAt(A, 1, 1),
                    H = p.createMorphAt(A, 3, 3),
                    D = p.createMorphAt(A, 5, 5),
                    S = p.createMorphAt(k, 1, 1),
                    _ = p.createMorphAt(E, 1, 1),
                    I = p.createMorphAt(E, 2, 2),
                    U = p.createMorphAt(E, 3, 3),
                    V = p.createMorphAt(y, 1, 1),
                    $ = p.createMorphAt(y, 3, 3),
                    j = p.createMorphAt(M, 3, 3),
                    O = p.createMorphAt(w, 1, 1),
                    q = p.createMorphAt(R, 5, 5),
                    z = p.createMorphAt(F, 3, 3);
                return g(h, B, l, "share-post", [], {
                    post: v(h, l, "this"),
                    featureSet: "permalink",
                    onShare: v(h, l, "onShare"),
                    location: "PermalinkPost",
                    isMobile: !1
                }), b(h, T, l, "bind-attr", [], {
                    style: v(h, l, "backgroundImageStyle")
                }), b(h, T, l, "action", ["play"], {
                    target: "view"
                }), C(h, P, l, "if", [v(h, l, "explicitContent")], {}, e, t), g(h, L, l, "user-info", [], {
                    data: v(h, l, "this"),
                    cssClass: "user-info-size-38 user-info-stacked user-info-show-verification"
                }), C(h, H, l, "unless", [v(h, l, "isInitiallyFollowing")], {}, a, null), g(h, D, l, "view", ["post-actions-menu"], {}), b(h, k, l, "bind-attr", [], {
                    "class": ":post-info-container"
                }), C(h, S, l, "if", [v(h, l, "description")], {}, n, null), C(h, _, l, "if", [v(h, l, "likes.count")], {}, r, null), C(h, I, l, "if", [v(h, l, "reposts.count")], {}, i, null), C(h, U, l, "if", [v(h, l, "comments.count")], {}, d, null), g(h, V, l, "animated-button", [], {
                    actionName: "like",
                    iconName: "like_stroked",
                    isActive: v(h, l, "liked"),
                    action: "like"
                }), C(h, $, l, "unless", [v(h, l, "isCurrentUser")], {}, s, null), C(h, j, l, "if", [v(h, l, "loops")], {}, c, null), b(h, w, l, "bind-attr", [], {
                    "class": ":comments-container commentsExpanded:expanded"
                }), g(h, O, l, "paginated-comments", [], {
                    comments: v(h, l, "paginatedComments"),
                    isVisible: v(h, l, "commentsExpanded")
                }), g(h, q, l, "comment-form", [], {
                    value: v(h, l, "commentText"),
                    target: "view",
                    action: "submitComment"
                }), C(h, z, l, "unless", [v(h, l, "isModal")], {}, o, null), f
            }
        }
    }())
}), define("vine-ember/templates/playing-vine", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createElement("div"),
                    n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("video");
                e.setAttribute(n, "preload", "auto");
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("source");
                e.setAttribute(r, "src", "default.mp4"), e.setAttribute(r, "type", "video/mp4"), e.appendChild(n, r);
                var r = e.createTextNode("\n  ");
                e.appendChild(n, r), e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n), e.appendChild(t, a);
                var a = e.createTextNode("\n");
                e.appendChild(t, a);
                var a = e.createElement("a");
                e.setAttribute(a, "href", "#"), e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a), t
            },
            render: function (e, t, a) {
                var n = t.dom,
                    r = t.hooks,
                    i = r.element;
                n.detectNamespace(a);
                var d;
                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                var s = n.childAt(d, [0]),
                    c = n.childAt(d, [2]);
                return i(t, s, e, "action", ["togglePlay"], {}), i(t, s, e, "bind-attr", [], {
                    "class": ":vine-video-container isMobile:hidden"
                }), i(t, c, e, "bind-attr", [], {
                    "class": ":vine-audio displayAudio::hidden audioClass"
                }), i(t, c, e, "action", ["toggleMute"], {}), d
            }
        }
    }())
}), define("vine-ember/templates/playlists", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        var e = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("  ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.inline;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var s = n.createMorphAt(d, 1, 1, a);
                        return i(t, s, e, "partial", ["timelines/fullscreen"], {}), d
                    }
                }
            }(),
            t = function () {
                var e = function () {
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createTextNode("      ");
                                e.appendChild(t, a);
                                var a = e.createElement("div");
                                e.setAttribute(a, "class", "timeline-placeholder");
                                var n = e.createComment("");
                                e.appendChild(a, n), e.appendChild(t, a);
                                var a = e.createTextNode("\n");
                                return e.appendChild(t, a), t
                            },
                            render: function (e, t, a) {
                                var n = t.dom,
                                    r = t.hooks,
                                    i = r.inline;
                                n.detectNamespace(a);
                                var d;
                                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                                var s = n.createMorphAt(n.childAt(d, [1]), 0, 0);
                                return i(t, s, e, "partial", ["timelines/placeholders/empty"], {}), d
                            }
                        }
                    }(),
                    t = function () {
                        var e = function () {
                            return {
                                isHTMLBars: !0,
                                revision: "Ember@1.11.3",
                                blockParams: 0,
                                cachedFragment: null,
                                hasRendered: !1,
                                build: function (e) {
                                    var t = e.createDocumentFragment(),
                                        a = e.createTextNode("          ");
                                    e.appendChild(t, a);
                                    var a = e.createComment("");
                                    e.appendChild(t, a);
                                    var a = e.createTextNode("\n");
                                    return e.appendChild(t, a), t
                                },
                                render: function (e, t, a) {
                                    var n = t.dom,
                                        r = t.hooks,
                                        i = r.get,
                                        d = r.inline;
                                    n.detectNamespace(a);
                                    var s;
                                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                                    var c = n.createMorphAt(s, 1, 1, a);
                                    return d(t, c, e, "render", ["playlists/grid-list", i(t, e, "this")], {}), s
                                }
                            }
                        }();
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createTextNode("      ");
                                e.appendChild(t, a);
                                var a = e.createElement("div");
                                e.setAttribute(a, "class", "grid-container clearfix");
                                var n = e.createTextNode("\n");
                                e.appendChild(a, n);
                                var n = e.createComment("");
                                e.appendChild(a, n);
                                var n = e.createTextNode("      ");
                                e.appendChild(a, n), e.appendChild(t, a);
                                var a = e.createTextNode("\n");
                                return e.appendChild(t, a), t
                            },
                            render: function (t, a, n) {
                                var r = a.dom,
                                    i = a.hooks,
                                    d = i.get,
                                    s = i.block;
                                r.detectNamespace(n);
                                var c;
                                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r), this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0), this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                                var o = r.createMorphAt(r.childAt(c, [1]), 1, 1);
                                return s(a, o, t, "each", [d(a, t, "lists")], {}, e, null), c
                            }
                        }
                    }(),
                    a = function () {
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createTextNode("    ");
                                e.appendChild(t, a);
                                var a = e.createElement("div");
                                e.setAttribute(a, "class", "fullscreen");
                                var n = e.createTextNode("\n      ");
                                e.appendChild(a, n);
                                var n = e.createElement("h3"),
                                    r = e.createTextNode("TV Mode");
                                e.appendChild(n, r), e.appendChild(a, n);
                                var n = e.createTextNode("\n      ");
                                e.appendChild(a, n);
                                var n = e.createElement("div");
                                e.setAttribute(n, "class", "icon-fullscreen"), e.appendChild(a, n);
                                var n = e.createTextNode("\n    ");
                                e.appendChild(a, n), e.appendChild(t, a);
                                var a = e.createTextNode("\n");
                                return e.appendChild(t, a), t
                            },
                            render: function (e, t, a) {
                                var n = t.dom,
                                    r = t.hooks,
                                    i = r.element;
                                n.detectNamespace(a);
                                var d;
                                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                                var s = n.childAt(d, [1]);
                                return i(t, s, e, "action", ["openFullscreen"], {}), d
                            }
                        }
                    }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("  ");
                        e.appendChild(t, a);
                        var a = e.createElement("div");
                        e.setAttribute(a, "class", "grid-title");
                        var n = e.createTextNode("\n    ");
                        e.appendChild(a, n);
                        var n = e.createElement("span");
                        e.setAttribute(n, "class", "icon-list grid-title-icon"), e.appendChild(a, n);
                        var n = e.createTextNode("\n    ");
                        e.appendChild(a, n);
                        var n = e.createElement("h2"),
                            r = e.createTextNode("Playlists");
                        e.appendChild(n, r), e.appendChild(a, n);
                        var n = e.createTextNode("\n  ");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n\n  ");
                        e.appendChild(t, a);
                        var a = e.createElement("div"),
                            n = e.createTextNode("\n");
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        e.appendChild(a, n);
                        var n = e.createTextNode("\n    ");
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        e.appendChild(a, n);
                        var n = e.createTextNode("\n  ");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n\n");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        return e.appendChild(t, a), t
                    },
                    render: function (n, r, i) {
                        var d = r.dom,
                            s = r.hooks,
                            c = s.element,
                            o = s.get,
                            l = s.block,
                            h = s.inline;
                        d.detectNamespace(i);
                        var u;
                        r.useFragmentCache && d.canClone ? (null === this.cachedFragment && (u = this.build(d), this.hasRendered ? this.cachedFragment = u : this.hasRendered = !0), this.cachedFragment && (u = d.cloneNode(this.cachedFragment, !0))) : u = this.build(d);
                        var p = d.childAt(u, [3]),
                            m = d.createMorphAt(p, 1, 1),
                            v = d.createMorphAt(p, 3, 3),
                            g = d.createMorphAt(u, 5, 5, i);
                        return d.insertBoundary(u, null), c(r, p, n, "bind-attr", [], {
                            "class": ":posts-container :grid pagination.nextPage::no-pagination"
                        }), l(r, m, n, "if", [o(r, n, "isEmpty")], {}, e, t), h(r, v, n, "partial", ["pagination"], {}), l(r, g, n, "if", [o(r, n, "fullscreenAvailable")], {}, a, null), u
                    }
                }
            }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createComment("");
                return e.appendChild(t, a), t
            },
            render: function (a, n, r) {
                var i = n.dom,
                    d = n.hooks,
                    s = d.get,
                    c = d.block;
                i.detectNamespace(r);
                var o;
                n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (o = this.build(i), this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0), this.cachedFragment && (o = i.cloneNode(this.cachedFragment, !0))) : o = this.build(i);
                var l = i.createMorphAt(o, 0, 0, r);
                return i.insertBoundary(o, null), i.insertBoundary(o, 0), c(n, l, a, "if", [s(n, a, "isTvMode")], {}, e, t), o
            }
        }
    }())
}), define("vine-ember/templates/playlists/grid-list", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        var e = function () {
            var e = function () {
                var e = function () {
                    var e = function () {
                            return {
                                isHTMLBars: !0,
                                revision: "Ember@1.11.3",
                                blockParams: 0,
                                cachedFragment: null,
                                hasRendered: !1,
                                build: function (e) {
                                    var t = e.createDocumentFragment(),
                                        a = e.createComment("");
                                    return e.appendChild(t, a), t
                                },
                                render: function (e, t, a) {
                                    var n = t.dom,
                                        r = t.hooks,
                                        i = r.get,
                                        d = r.inline;
                                    n.detectNamespace(a);
                                    var s;
                                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                                    var c = n.createMorphAt(s, 0, 0, a);
                                    return n.insertBoundary(s, null), n.insertBoundary(s, 0), d(t, c, e, "html-linebreak", [i(t, e, "title")], {}), s
                                }
                            }
                        }(),
                        t = function () {
                            return {
                                isHTMLBars: !0,
                                revision: "Ember@1.11.3",
                                blockParams: 0,
                                cachedFragment: null,
                                hasRendered: !1,
                                build: function (e) {
                                    var t = e.createDocumentFragment(),
                                        a = e.createTextNode("          ");
                                    e.appendChild(t, a);
                                    var a = e.createElement("div");
                                    e.setAttribute(a, "class", "author");
                                    var n = e.createTextNode("\n            by ");
                                    e.appendChild(a, n);
                                    var n = e.createComment("");
                                    e.appendChild(a, n);
                                    var n = e.createTextNode("\n          ");
                                    e.appendChild(a, n), e.appendChild(t, a);
                                    var a = e.createTextNode("\n");
                                    return e.appendChild(t, a), t
                                },
                                render: function (e, t, a) {
                                    var n = t.dom,
                                        r = t.hooks,
                                        i = r.get,
                                        d = r.inline;
                                    n.detectNamespace(a);
                                    var s;
                                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                                    var c = n.createMorphAt(n.childAt(s, [1]), 1, 1);
                                    return d(t, c, e, "user-info", [], {
                                        data: i(t, e, "this"),
                                        cssClass: "user-info-inline"
                                    }), s
                                }
                            }
                        }();
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null,
                        hasRendered: !1,
                        build: function (e) {
                            var t = e.createDocumentFragment(),
                                a = e.createTextNode("      ");
                            e.appendChild(t, a);
                            var a = e.createElement("div");
                            e.setAttribute(a, "class", "info");
                            var n = e.createTextNode("\n        ");
                            e.appendChild(a, n);
                            var n = e.createElement("h2");
                            e.setAttribute(n, "class", "list-title");
                            var r = e.createComment("");
                            e.appendChild(n, r), e.appendChild(a, n);
                            var n = e.createTextNode("\n\n");
                            e.appendChild(a, n);
                            var n = e.createComment("");
                            e.appendChild(a, n);
                            var n = e.createTextNode("\n        ");
                            e.appendChild(a, n);
                            var n = e.createElement("div");
                            e.setAttribute(n, "class", "post-actions");
                            var r = e.createTextNode("\n          ");
                            e.appendChild(n, r);
                            var r = e.createElement("button");
                            e.setAttribute(r, "class", "clear twitter");
                            var i = e.createTextNode("\n            ");
                            e.appendChild(r, i);
                            var i = e.createElement("span");
                            e.setAttribute(i, "class", "icon-twitter"), e.appendChild(r, i);
                            var i = e.createTextNode("\n            ");
                            e.appendChild(r, i);
                            var i = e.createElement("span");
                            e.setAttribute(i, "class", "share-count");
                            var d = e.createTextNode("\n              ");
                            e.appendChild(i, d);
                            var d = e.createComment("");
                            e.appendChild(i, d);
                            var d = e.createTextNode("\n            ");
                            e.appendChild(i, d), e.appendChild(r, i);
                            var i = e.createTextNode("\n          ");
                            e.appendChild(r, i), e.appendChild(n, r);
                            var r = e.createTextNode("\n          ");
                            e.appendChild(n, r);
                            var r = e.createElement("button");
                            e.setAttribute(r, "class", "clear facebook");
                            var i = e.createTextNode("\n            ");
                            e.appendChild(r, i);
                            var i = e.createElement("span");
                            e.setAttribute(i, "class", "icon-facebook"), e.appendChild(r, i);
                            var i = e.createTextNode("\n            ");
                            e.appendChild(r, i);
                            var i = e.createElement("span");
                            e.setAttribute(i, "class", "share-count");
                            var d = e.createTextNode("\n              ");
                            e.appendChild(i, d);
                            var d = e.createComment("");
                            e.appendChild(i, d);
                            var d = e.createTextNode("\n            ");
                            e.appendChild(i, d), e.appendChild(r, i);
                            var i = e.createTextNode("\n          ");
                            e.appendChild(r, i), e.appendChild(n, r);
                            var r = e.createTextNode("\n        ");
                            e.appendChild(n, r), e.appendChild(a, n);
                            var n = e.createTextNode("\n      ");
                            e.appendChild(a, n), e.appendChild(t, a);
                            var a = e.createTextNode("\n");
                            return e.appendChild(t, a), t
                        },
                        render: function (a, n, r) {
                            var i = n.dom,
                                d = n.hooks,
                                s = d.get,
                                c = d.block,
                                o = d.element,
                                l = d.inline;
                            i.detectNamespace(r);
                            var h;
                            n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (h = this.build(i), this.hasRendered ? this.cachedFragment = h : this.hasRendered = !0), this.cachedFragment && (h = i.cloneNode(this.cachedFragment, !0))) : h = this.build(i);
                            var u = i.childAt(h, [1]),
                                p = i.childAt(u, [5]),
                                m = i.childAt(p, [1]),
                                v = i.childAt(p, [3]),
                                g = i.createMorphAt(i.childAt(u, [1]), 0, 0),
                                b = i.createMorphAt(u, 3, 3),
                                C = i.createMorphAt(i.childAt(m, [3]), 1, 1),
                                f = i.createMorphAt(i.childAt(v, [3]), 1, 1);
                            return c(n, g, a, "link-to", ["list", s(n, a, "vanityUrl")], {}, e, null), c(n, b, a, "with", [s(n, a, "createdByUser")], {}, t, null), o(n, m, a, "action", ["tweet"], {}), l(n, C, a, "format-count", [s(n, a, "tweetCount")], {
                                zeroText: "Tweet"
                            }), o(n, v, a, "action", ["facebookShare"], {}), l(n, f, a, "format-count", [s(n, a, "facebookCount")], {
                                zeroText: "Share"
                            }), h
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createComment("");
                        return e.appendChild(t, a), t
                    },
                    render: function (t, a, n) {
                        var r = a.dom,
                            i = a.hooks,
                            d = i.get,
                            s = i.block;
                        r.detectNamespace(n);
                        var c;
                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r), this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0), this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                        var o = r.createMorphAt(c, 0, 0, n);
                        return r.insertBoundary(c, null), r.insertBoundary(c, 0), s(a, o, t, "with", [d(a, t, "currentPost.context.list")], {}, e, null), c
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null,
                hasRendered: !1,
                build: function (e) {
                    var t = e.createDocumentFragment(),
                        a = e.createComment("");
                    return e.appendChild(t, a), t
                },
                render: function (t, a, n) {
                    var r = a.dom,
                        i = a.hooks,
                        d = i.get,
                        s = i.block;
                    r.detectNamespace(n);
                    var c;
                    a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r), this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0), this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                    var o = r.createMorphAt(c, 0, 0, n);
                    return r.insertBoundary(c, null), r.insertBoundary(c, 0), s(a, o, t, "mouseover-video", [], {
                        post: d(a, t, "currentPost")
                    }, e, null), c
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createComment("");
                return e.appendChild(t, a), t
            },
            render: function (t, a, n) {
                var r = a.dom,
                    i = a.hooks,
                    d = i.get,
                    s = i.block;
                r.detectNamespace(n);
                var c;
                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r), this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0), this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                var o = r.createMorphAt(c, 0, 0, n);
                return r.insertBoundary(c, null), r.insertBoundary(c, 0), s(a, o, t, "if", [d(a, t, "currentPost")], {}, e, null), c
            }
        }
    }())
}), define("vine-ember/templates/playlists/index", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        var e = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("    ");
                        e.appendChild(t, a);
                        var a = e.createElement("div");
                        e.setAttribute(a, "class", "timeline-placeholder");
                        var n = e.createComment("");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.inline;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var s = n.createMorphAt(n.childAt(d, [1]), 0, 0);
                        return i(t, s, e, "partial", ["timelines/placeholders/empty"], {}), d
                    }
                }
            }(),
            t = function () {
                var e = function () {
                        var e = function () {
                            return {
                                isHTMLBars: !0,
                                revision: "Ember@1.11.3",
                                blockParams: 0,
                                cachedFragment: null,
                                hasRendered: !1,
                                build: function (e) {
                                    var t = e.createDocumentFragment(),
                                        a = e.createTextNode("          ");
                                    e.appendChild(t, a);
                                    var a = e.createComment("");
                                    e.appendChild(t, a);
                                    var a = e.createTextNode("\n");
                                    return e.appendChild(t, a), t
                                },
                                render: function (e, t, a) {
                                    var n = t.dom,
                                        r = t.hooks,
                                        i = r.inline;
                                    n.detectNamespace(a);
                                    var d;
                                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                                    var s = n.createMorphAt(d, 1, 1, a);
                                    return i(t, s, e, "view", ["grid-list-mobile"], {}), d
                                }
                            }
                        }();
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createComment("");
                                return e.appendChild(t, a), t
                            },
                            render: function (t, a, n) {
                                var r = a.dom,
                                    i = a.hooks,
                                    d = i.block;
                                r.detectNamespace(n);
                                var s;
                                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                                var c = r.createMorphAt(s, 0, 0, n);
                                return r.insertBoundary(s, null), r.insertBoundary(s, 0), d(a, c, t, "each", [], {}, e, null), s
                            }
                        }
                    }(),
                    t = function () {
                        var e = function () {
                            return {
                                isHTMLBars: !0,
                                revision: "Ember@1.11.3",
                                blockParams: 0,
                                cachedFragment: null,
                                hasRendered: !1,
                                build: function (e) {
                                    var t = e.createDocumentFragment(),
                                        a = e.createTextNode("          ");
                                    e.appendChild(t, a);
                                    var a = e.createComment("");
                                    e.appendChild(t, a);
                                    var a = e.createTextNode("\n");
                                    return e.appendChild(t, a), t
                                },
                                render: function (e, t, a) {
                                    var n = t.dom,
                                        r = t.hooks,
                                        i = r.get,
                                        d = r.inline;
                                    n.detectNamespace(a);
                                    var s;
                                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                                    var c = n.createMorphAt(s, 1, 1, a);
                                    return d(t, c, e, "render", ["playlists/grid-list", i(t, e, "timeline.posts")], {}), s
                                }
                            }
                        }();
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createComment("");
                                return e.appendChild(t, a), t
                            },
                            render: function (t, a, n) {
                                var r = a.dom,
                                    i = a.hooks,
                                    d = i.block;
                                r.detectNamespace(n);
                                var s;
                                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                                var c = r.createMorphAt(s, 0, 0, n);
                                return r.insertBoundary(s, null), r.insertBoundary(s, 0), d(a, c, t, "each", [], {}, e, null), s
                            }
                        }
                    }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("    ");
                        e.appendChild(t, a);
                        var a = e.createElement("div");
                        e.setAttribute(a, "class", "grid-container clearfix");
                        var n = e.createTextNode("\n");
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        e.appendChild(a, n);
                        var n = e.createTextNode("    ");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (a, n, r) {
                        var i = n.dom,
                            d = n.hooks,
                            s = d.get,
                            c = d.block;
                        i.detectNamespace(r);
                        var o;
                        n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (o = this.build(i), this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0), this.cachedFragment && (o = i.cloneNode(this.cachedFragment, !0))) : o = this.build(i);
                        var l = i.createMorphAt(i.childAt(o, [1]), 1, 1);
                        return c(n, l, a, "if", [s(n, a, "isMobile")], {}, e, t), o
                    }
                }
            }(),
            a = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("  ");
                        e.appendChild(t, a);
                        var a = e.createElement("div");
                        e.setAttribute(a, "class", "fullscreen");
                        var n = e.createTextNode("\n    ");
                        e.appendChild(a, n);
                        var n = e.createElement("h3"),
                            r = e.createTextNode("TV Mode");
                        e.appendChild(n, r), e.appendChild(a, n);
                        var n = e.createTextNode("\n    ");
                        e.appendChild(a, n);
                        var n = e.createElement("div");
                        e.setAttribute(n, "class", "icon-fullscreen"), e.appendChild(a, n);
                        var n = e.createTextNode("\n  ");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.element;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var s = n.childAt(d, [1]);
                        return i(t, s, e, "action", ["openFullscreen"], {}), d
                    }
                }
            }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createElement("div"),
                    n = e.createTextNode("\n");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n), e.appendChild(t, a);
                var a = e.createTextNode("\n\n");
                e.appendChild(t, a);
                var a = e.createComment("");
                return e.appendChild(t, a), t
            },
            render: function (n, r, i) {
                var d = r.dom,
                    s = r.hooks,
                    c = s.element,
                    o = s.get,
                    l = s.block,
                    h = s.inline;
                d.detectNamespace(i);
                var u;
                r.useFragmentCache && d.canClone ? (null === this.cachedFragment && (u = this.build(d), this.hasRendered ? this.cachedFragment = u : this.hasRendered = !0), this.cachedFragment && (u = d.cloneNode(this.cachedFragment, !0))) : u = this.build(d);
                var p = d.childAt(u, [0]),
                    m = d.createMorphAt(p, 1, 1),
                    v = d.createMorphAt(p, 3, 3),
                    g = d.createMorphAt(u, 2, 2, i);
                return d.insertBoundary(u, null), c(r, p, n, "bind-attr", [], {
                    "class": ":posts-container :grid pagination.nextPage::no-pagination"
                }), l(r, m, n, "if", [o(r, n, "isEmpty")], {}, e, t), h(r, v, n, "partial", ["pagination"], {}), l(r, g, n, "if", [o(r, n, "fullscreenAvailable")], {}, a, null), u
            }
        }
    }())
}), define("vine-ember/templates/post-actions-menu", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        var e = function () {
                var e = function () {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null,
                        hasRendered: !1,
                        build: function (e) {
                            var t = e.createDocumentFragment(),
                                a = e.createTextNode("View post page");
                            return e.appendChild(t, a), t
                        },
                        render: function (e, t, a) {
                            var n = t.dom;
                            n.detectNamespace(a);
                            var r;
                            return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n), this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0), this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n), r
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("    ");
                        e.appendChild(t, a);
                        var a = e.createElement("li");
                        e.setAttribute(a, "class", "permalink");
                        var n = e.createComment("");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (t, a, n) {
                        var r = a.dom,
                            i = a.hooks,
                            d = i.get,
                            s = i.block;
                        r.detectNamespace(n);
                        var c;
                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r), this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0), this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                        var o = r.createMorphAt(r.childAt(c, [1]), 0, 0);
                        return s(a, o, t, "link-to", ["permalink-post", d(a, t, "shortId")], {}, e, null), c
                    }
                }
            }(),
            t = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("Embed");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom;
                        n.detectNamespace(a);
                        var r;
                        return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n), this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0), this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n), r
                    }
                }
            }(),
            a = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createElement("li"),
                            n = e.createElement("a"),
                            r = e.createTextNode("Unfollow");
                        return e.appendChild(n, r), e.appendChild(a, n), e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.element;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var s = n.childAt(d, [0, 0]);
                        return i(t, s, e, "action", ["unfollowUser"], {}), d
                    }
                }
            }(),
            n = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createElement("li");
                        e.setAttribute(a, "class", "report");
                        var n = e.createElement("a"),
                            r = e.createTextNode("Block user or report");
                        return e.appendChild(n, r), e.appendChild(a, n), e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.element;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var s = n.childAt(d, [0, 0]);
                        return i(t, s, e, "action", ["showReportModal"], {}), d
                    }
                }
            }(),
            r = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createElement("li"),
                            n = e.createElement("a"),
                            r = e.createTextNode("Delete");
                        return e.appendChild(n, r), e.appendChild(a, n), e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.element;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var s = n.childAt(d, [0, 0]);
                        return i(t, s, e, "action", ["deletePost"], {}), d
                    }
                }
            }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createElement("div");
                e.setAttribute(a, "class", "icon");
                var n = e.createElement("div");
                e.setAttribute(n, "class", "icon-dots_v"), e.appendChild(a, n), e.appendChild(t, a);
                var a = e.createTextNode("\n");
                e.appendChild(t, a);
                var a = e.createElement("ul"),
                    n = e.createTextNode("\n");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("li");
                e.setAttribute(n, "class", "embed");
                var r = e.createComment("");
                e.appendChild(n, r), e.appendChild(a, n);
                var n = e.createTextNode("\n\n  ");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createTextNode("\n\n  ");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createTextNode("\n\n  ");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n), e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a), t
            },
            render: function (i, d, s) {
                var c = d.dom,
                    o = d.hooks,
                    l = o.element,
                    h = o.get,
                    u = o.block;
                c.detectNamespace(s);
                var p;
                d.useFragmentCache && c.canClone ? (null === this.cachedFragment && (p = this.build(c), this.hasRendered ? this.cachedFragment = p : this.hasRendered = !0), this.cachedFragment && (p = c.cloneNode(this.cachedFragment, !0))) : p = this.build(c);
                var m = c.childAt(p, [2]),
                    v = c.createMorphAt(m, 1, 1),
                    g = c.createMorphAt(c.childAt(m, [3]), 0, 0),
                    b = c.createMorphAt(m, 5, 5),
                    C = c.createMorphAt(m, 7, 7),
                    f = c.createMorphAt(m, 9, 9);
                return l(d, m, i, "bind-attr", [], {
                        "class": ":menu shortId::private-menu"
                    }), u(d, v, i, "if", [h(d, i, "view.shouldShowPostLink")], {}, e, null), u(d, g, i, "link-to", ["permalink-post.embed", h(d, i, "shortId")], {}, t, null), u(d, b, i, "if", [h(d, i, "following")], {}, a, null),
                    u(d, C, i, "unless", [h(d, i, "isCurrentUser")], {}, n, null), u(d, f, i, "if", [h(d, i, "isCurrentUser")], {}, r, null), p
            }
        }
    }())
}), define("vine-ember/templates/post-byline", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        var e = function () {
                var e = function () {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null,
                        hasRendered: !1,
                        build: function (e) {
                            var t = e.createDocumentFragment(),
                                a = e.createTextNode("        ");
                            e.appendChild(t, a);
                            var a = e.createComment("");
                            e.appendChild(t, a);
                            var a = e.createTextNode(" revined\n");
                            return e.appendChild(t, a), t
                        },
                        render: function (e, t, a) {
                            var n = t.dom,
                                r = t.hooks,
                                i = r.get,
                                d = r.inline;
                            n.detectNamespace(a);
                            var s;
                            t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                            var c = n.createMorphAt(s, 1, 1, a);
                            return d(t, c, e, "replace-emoji", [i(t, e, "repost.username")], {}), s
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("  ");
                        e.appendChild(t, a);
                        var a = e.createElement("div");
                        e.setAttribute(a, "class", "post-byline");
                        var n = e.createTextNode("\n    ");
                        e.appendChild(a, n);
                        var n = e.createElement("span");
                        e.setAttribute(n, "class", "icon-revined"), e.appendChild(a, n);
                        var n = e.createTextNode("\n    ");
                        e.appendChild(a, n);
                        var n = e.createElement("div");
                        e.setAttribute(n, "class", "byline-text");
                        var r = e.createTextNode("\n");
                        e.appendChild(n, r);
                        var r = e.createComment("");
                        e.appendChild(n, r);
                        var r = e.createTextNode("    ");
                        e.appendChild(n, r), e.appendChild(a, n);
                        var n = e.createTextNode("\n  ");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (t, a, n) {
                        var r = a.dom,
                            i = a.hooks,
                            d = i.get,
                            s = i.block;
                        r.detectNamespace(n);
                        var c;
                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r), this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0), this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                        var o = r.createMorphAt(r.childAt(c, [1, 3]), 1, 1);
                        return s(a, o, t, "link-user", [], {
                            user: d(a, t, "repost")
                        }, e, null), c
                    }
                }
            }(),
            t = function () {
                var e = function () {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null,
                        hasRendered: !1,
                        build: function (e) {
                            var t = e.createDocumentFragment(),
                                a = e.createTextNode("    ");
                            e.appendChild(t, a);
                            var a = e.createElement("div");
                            e.setAttribute(a, "class", "post-byline");
                            var n = e.createTextNode("\n      ");
                            e.appendChild(a, n);
                            var n = e.createComment("");
                            e.appendChild(a, n);
                            var n = e.createTextNode("\n      ");
                            e.appendChild(a, n);
                            var n = e.createElement("div");
                            e.setAttribute(n, "class", "byline-text");
                            var r = e.createTextNode("\n        ");
                            e.appendChild(n, r);
                            var r = e.createComment("");
                            e.appendChild(n, r);
                            var r = e.createTextNode("\n      ");
                            e.appendChild(n, r), e.appendChild(a, n);
                            var n = e.createTextNode("\n    ");
                            e.appendChild(a, n), e.appendChild(t, a);
                            var a = e.createTextNode("\n");
                            return e.appendChild(t, a), t
                        },
                        render: function (e, t, a) {
                            var n = t.dom,
                                r = t.hooks,
                                i = r.get,
                                d = r.inline;
                            n.detectNamespace(a);
                            var s;
                            t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                            var c = n.childAt(s, [1]),
                                o = n.createMorphAt(c, 1, 1),
                                l = n.createMorphAt(n.childAt(c, [3]), 1, 1);
                            return d(t, o, e, "secure-img", [], {
                                "class": "byline-icon",
                                src: i(t, e, "iconUrl")
                            }), d(t, l, e, "linkify-entities", [], {
                                text: i(t, e, "body"),
                                entities: i(t, e, "entities")
                            }), s
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createComment("");
                        return e.appendChild(t, a), t
                    },
                    render: function (t, a, n) {
                        var r = a.dom,
                            i = a.hooks,
                            d = i.get,
                            s = i.block;
                        r.detectNamespace(n);
                        var c;
                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r), this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0), this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                        var o = r.createMorphAt(c, 0, 0, n);
                        return r.insertBoundary(c, null), r.insertBoundary(c, 0), s(a, o, t, "with", [d(a, t, "byline")], {}, e, null), c
                    }
                }
            }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createComment("");
                return e.appendChild(t, a), t
            },
            render: function (a, n, r) {
                var i = n.dom,
                    d = n.hooks,
                    s = d.get,
                    c = d.block;
                i.detectNamespace(r);
                var o;
                n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (o = this.build(i), this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0), this.cachedFragment && (o = i.cloneNode(this.cachedFragment, !0))) : o = this.build(i);
                var l = i.createMorphAt(o, 0, 0, r);
                return i.insertBoundary(o, null), i.insertBoundary(o, 0), c(n, l, a, "if", [s(n, a, "repost")], {}, e, t), o
            }
        }
    }())
}), define("vine-ember/templates/post-mobile", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        var e = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("      ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.get,
                            d = r.inline;
                        n.detectNamespace(a);
                        var s;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                        var c = n.createMorphAt(s, 1, 1, a);
                        return d(t, c, e, "loop-count", [], {
                            postId: i(t, e, "postIdStr"),
                            loops: i(t, e, "loops"),
                            postDate: i(t, e, "created")
                        }), s
                    }
                }
            }(),
            t = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("      ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.inline;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var s = n.createMorphAt(d, 1, 1, a);
                        return i(t, s, e, "partial", ["explicit-content"], {}), d
                    }
                }
            }(),
            a = function () {
                var e = function () {
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createTextNode("        ");
                                e.appendChild(t, a);
                                var a = e.createElement("div");
                                e.setAttribute(a, "class", "mobile-interstitial");
                                var n = e.createTextNode("\n          ");
                                e.appendChild(a, n);
                                var n = e.createElement("img");
                                e.setAttribute(n, "class", "thumbnail"), e.appendChild(a, n);
                                var n = e.createTextNode("\n          ");
                                e.appendChild(a, n);
                                var n = e.createElement("div");
                                e.setAttribute(n, "class", "mobile-interstitial-inner");
                                var r = e.createTextNode("\n            ");
                                e.appendChild(n, r);
                                var r = e.createElement("button");
                                e.setAttribute(r, "class", "play"), e.appendChild(n, r);
                                var r = e.createTextNode("\n\n            ");
                                e.appendChild(n, r);
                                var r = e.createElement("div");
                                e.setAttribute(r, "class", "mobile-interstitial-controls");
                                var i = e.createTextNode("\n              ");
                                e.appendChild(r, i);
                                var i = e.createElement("a");
                                e.setAttribute(i, "class", "overlay-download-vine");
                                var d = e.createTextNode("\n                ");
                                e.appendChild(i, d);
                                var d = e.createElement("div");
                                e.setAttribute(d, "class", "vine-app-icon");
                                var s = e.createTextNode("\n                  ");
                                e.appendChild(d, s);
                                var s = e.createElement("div");
                                e.setAttribute(s, "class", "icon-v_logo logo"), e.appendChild(d, s);
                                var s = e.createTextNode("\n                ");
                                e.appendChild(d, s), e.appendChild(i, d);
                                var d = e.createTextNode("\n                ");
                                e.appendChild(i, d);
                                var d = e.createElement("span"),
                                    s = e.createTextNode("Download Vine");
                                e.appendChild(d, s), e.appendChild(i, d);
                                var d = e.createTextNode("\n              ");
                                e.appendChild(i, d), e.appendChild(r, i);
                                var i = e.createTextNode("\n              ");
                                e.appendChild(r, i);
                                var i = e.createElement("a");
                                e.setAttribute(i, "class", "open-in-app");
                                var d = e.createTextNode("Open in app");
                                e.appendChild(i, d), e.appendChild(r, i);
                                var i = e.createTextNode("\n            ");
                                e.appendChild(r, i), e.appendChild(n, r);
                                var r = e.createTextNode("\n          ");
                                e.appendChild(n, r), e.appendChild(a, n);
                                var n = e.createTextNode("\n        ");
                                e.appendChild(a, n), e.appendChild(t, a);
                                var a = e.createTextNode("\n");
                                return e.appendChild(t, a), t
                            },
                            render: function (e, t, a) {
                                var n = t.dom,
                                    r = t.hooks,
                                    i = r.get,
                                    d = r.element;
                                n.detectNamespace(a);
                                var s;
                                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                                var c = n.childAt(s, [1]),
                                    o = n.childAt(c, [1]),
                                    l = n.childAt(c, [3]),
                                    h = n.childAt(l, [1]),
                                    u = n.childAt(l, [3]),
                                    p = n.childAt(u, [1]),
                                    m = n.childAt(u, [3]);
                                return d(t, o, e, "bind-attr", [], {
                                    src: i(t, e, "secureThumbnailUrl")
                                }), d(t, h, e, "action", ["hideMobileInterstitial"], {
                                    target: "view"
                                }), d(t, p, e, "action", ["downloadVine"], {
                                    bubbles: !1
                                }), d(t, m, e, "action", ["openPostInApp"], {
                                    bubbles: !1
                                }), s
                            }
                        }
                    }(),
                    t = function () {
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createTextNode("        ");
                                e.appendChild(t, a);
                                var a = e.createElement("img");
                                e.setAttribute(a, "class", "thumbnail"), e.appendChild(t, a);
                                var a = e.createTextNode("\n        ");
                                e.appendChild(t, a);
                                var a = e.createElement("button");
                                e.setAttribute(a, "class", "play"), e.appendChild(t, a);
                                var a = e.createTextNode("\n");
                                return e.appendChild(t, a), t
                            },
                            render: function (e, t, a) {
                                var n = t.dom,
                                    r = t.hooks,
                                    i = r.get,
                                    d = r.element;
                                n.detectNamespace(a);
                                var s;
                                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                                var c = n.childAt(s, [1]),
                                    o = n.childAt(s, [3]);
                                return d(t, c, e, "bind-attr", [], {
                                    src: i(t, e, "secureThumbnailUrl")
                                }), d(t, o, e, "action", ["play"], {
                                    target: "view"
                                }), s
                            }
                        }
                    }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("      ");
                        e.appendChild(t, a);
                        var a = e.createElement("div"),
                            n = e.createTextNode("\n        ");
                        e.appendChild(a, n);
                        var n = e.createElement("div");
                        e.setAttribute(n, "class", "vine-video-container");
                        var r = e.createTextNode("\n          ");
                        e.appendChild(n, r);
                        var r = e.createElement("video");
                        e.setAttribute(r, "preload", "auto");
                        var i = e.createTextNode("\n            ");
                        e.appendChild(r, i);
                        var i = e.createElement("source");
                        e.setAttribute(i, "type", "video/mp4"), e.appendChild(r, i);
                        var i = e.createTextNode("\n          ");
                        e.appendChild(r, i), e.appendChild(n, r);
                        var r = e.createTextNode("\n        ");
                        e.appendChild(n, r), e.appendChild(a, n);
                        var n = e.createTextNode("\n      ");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        return e.appendChild(t, a), t
                    },
                    render: function (a, n, r) {
                        var i = n.dom,
                            d = n.hooks,
                            s = d.element,
                            c = d.get,
                            o = d.block;
                        i.detectNamespace(r);
                        var l;
                        n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (l = this.build(i), this.hasRendered ? this.cachedFragment = l : this.hasRendered = !0), this.cachedFragment && (l = i.cloneNode(this.cachedFragment, !0))) : l = this.build(i);
                        var h = i.childAt(l, [1]),
                            u = i.childAt(h, [1, 1]),
                            p = i.childAt(u, [1]),
                            m = i.createMorphAt(l, 3, 3, r);
                        return i.insertBoundary(l, null), s(n, h, a, "bind-attr", [], {
                            "class": ":vine-player hasModal:hidden"
                        }), s(n, h, a, "action", ["pause"], {
                            target: "view"
                        }), s(n, u, a, "bind-attr", [], {
                            controls: c(n, a, "isIos")
                        }), s(n, p, a, "bind-attr", [], {
                            src: c(n, a, "secureVideoUrl")
                        }), o(n, m, a, "if", [c(n, a, "shouldShowMobileInterstitial")], {}, e, t), l
                    }
                }
            }(),
            n = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("      ");
                        e.appendChild(t, a);
                        var a = e.createElement("div");
                        e.setAttribute(a, "class", "post-description");
                        var n = e.createComment("");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.get,
                            d = r.inline;
                        n.detectNamespace(a);
                        var s;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                        var c = n.createMorphAt(n.childAt(s, [1]), 0, 0);
                        return d(t, c, e, "linkify-entities", [], {
                            text: i(t, e, "description"),
                            entities: i(t, e, "entities")
                        }), s
                    }
                }
            }(),
            r = function () {
                var e = function () {
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createTextNode("          ");
                                e.appendChild(t, a);
                                var a = e.createElement("span"),
                                    n = e.createComment("");
                                e.appendChild(a, n), e.appendChild(t, a);
                                var a = e.createTextNode("\n");
                                return e.appendChild(t, a), t
                            },
                            render: function (e, t, a) {
                                var n = t.dom,
                                    r = t.hooks,
                                    i = r.get,
                                    d = r.inline;
                                n.detectNamespace(a);
                                var s;
                                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                                var c = n.createMorphAt(n.childAt(s, [1]), 0, 0);
                                return d(t, c, e, "format-count", [i(t, e, "likes.count")], {
                                    singleText: "Like",
                                    pluralText: "Likes"
                                }), s
                            }
                        }
                    }(),
                    t = function () {
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createTextNode("          ");
                                e.appendChild(t, a);
                                var a = e.createElement("span"),
                                    n = e.createComment("");
                                e.appendChild(a, n), e.appendChild(t, a);
                                var a = e.createTextNode("\n");
                                return e.appendChild(t, a), t
                            },
                            render: function (e, t, a) {
                                var n = t.dom,
                                    r = t.hooks,
                                    i = r.get,
                                    d = r.inline;
                                n.detectNamespace(a);
                                var s;
                                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                                var c = n.createMorphAt(n.childAt(s, [1]), 0, 0);
                                return d(t, c, e, "format-count", [i(t, e, "reposts.count")], {
                                    singleText: "Revine",
                                    pluralText: "Revines"
                                }), s
                            }
                        }
                    }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("      ");
                        e.appendChild(t, a);
                        var a = e.createElement("div");
                        e.setAttribute(a, "class", "post-social-metrics");
                        var n = e.createTextNode("\n");
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        e.appendChild(a, n);
                        var n = e.createTextNode("      ");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (a, n, r) {
                        var i = n.dom,
                            d = n.hooks,
                            s = d.get,
                            c = d.block;
                        i.detectNamespace(r);
                        var o;
                        n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (o = this.build(i), this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0), this.cachedFragment && (o = i.cloneNode(this.cachedFragment, !0))) : o = this.build(i);
                        var l = i.childAt(o, [1]),
                            h = i.createMorphAt(l, 1, 1),
                            u = i.createMorphAt(l, 2, 2);
                        return c(n, h, a, "if", [s(n, a, "likes.count")], {}, e, null), c(n, u, a, "if", [s(n, a, "reposts.count")], {}, t, null), o
                    }
                }
            }(),
            i = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("      ");
                        e.appendChild(t, a);
                        var a = e.createElement("hr");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom;
                        n.detectNamespace(a);
                        var r;
                        return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n), this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0), this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n), r
                    }
                }
            }(),
            d = function () {
                var e = function () {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null,
                        hasRendered: !1,
                        build: function (e) {
                            var t = e.createDocumentFragment(),
                                a = e.createTextNode("        ");
                            e.appendChild(t, a);
                            var a = e.createElement("hr");
                            e.appendChild(t, a);
                            var a = e.createTextNode("\n");
                            return e.appendChild(t, a), t
                        },
                        render: function (e, t, a) {
                            var n = t.dom;
                            n.detectNamespace(a);
                            var r;
                            return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n), this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0), this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n), r
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createComment("");
                        return e.appendChild(t, a), t
                    },
                    render: function (t, a, n) {
                        var r = a.dom,
                            i = a.hooks,
                            d = i.get,
                            s = i.block;
                        r.detectNamespace(n);
                        var c;
                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r), this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0), this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                        var o = r.createMorphAt(c, 0, 0, n);
                        return r.insertBoundary(c, null), r.insertBoundary(c, 0), s(a, o, t, "if", [d(a, t, "likes.count")], {}, e, null), c
                    }
                }
            }(),
            s = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("          ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.get,
                            d = r.inline;
                        n.detectNamespace(a);
                        var s;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                        var c = n.createMorphAt(s, 1, 1, a);
                        return d(t, c, e, "animated-button", [], {
                            actionName: "revine",
                            iconName: "revine_stroked",
                            isActive: i(t, e, "myRepostId"),
                            action: "revine"
                        }), s
                    }
                }
            }(),
            c = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("          ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.get,
                            d = r.inline;
                        n.detectNamespace(a);
                        var s;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                        var c = n.createMorphAt(s, 1, 1, a);
                        return d(t, c, e, "animated-button", [], {
                            actionName: "share",
                            iconName: "share_stroked",
                            isActive: i(t, e, "view.sharePanelExpanded"),
                            action: "expandSharePanel",
                            actionTarget: "view"
                        }), s
                    }
                }
            }(),
            o = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("          ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.get,
                            d = r.inline;
                        n.detectNamespace(a);
                        var s;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                        var c = n.createMorphAt(s, 1, 1, a);
                        return d(t, c, e, "animated-button", [], {
                            actionName: "share",
                            iconName: "share_stroked",
                            isActive: i(t, e, "shareSheetOpen"),
                            action: "share"
                        }), s
                    }
                }
            }(),
            l = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("      ");
                        e.appendChild(t, a);
                        var a = e.createElement("hr");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n      ");
                        e.appendChild(t, a);
                        var a = e.createElement("ul");
                        e.setAttribute(a, "class", "comments-container");
                        var n = e.createTextNode("\n        ");
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        e.appendChild(a, n);
                        var n = e.createTextNode("\n      ");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.get,
                            d = r.inline;
                        n.detectNamespace(a);
                        var s;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                        var c = n.createMorphAt(n.childAt(s, [3]), 1, 1);
                        return d(t, c, e, "paginated-comments", [], {
                            comments: i(t, e, "paginatedComments")
                        }), s
                    }
                }
            }(),
            h = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("  ");
                        e.appendChild(t, a);
                        var a = e.createElement("div");
                        e.setAttribute(a, "class", "share-panel");
                        var n = e.createTextNode("\n    ");
                        e.appendChild(a, n);
                        var n = e.createElement("button");
                        e.setAttribute(n, "class", "clear icon-close_x"), e.appendChild(a, n);
                        var n = e.createTextNode("\n    Share this\n    ");
                        e.appendChild(a, n);
                        var n = e.createElement("div");
                        e.setAttribute(n, "class", "share-row");
                        var r = e.createComment("");
                        e.appendChild(n, r), e.appendChild(a, n);
                        var n = e.createTextNode("\n    ");
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        e.appendChild(a, n);
                        var n = e.createTextNode("\n  ");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.element,
                            d = r.get,
                            s = r.inline;
                        n.detectNamespace(a);
                        var c;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n), this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0), this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                        var o = n.childAt(c, [1]),
                            l = n.childAt(o, [1]),
                            h = n.createMorphAt(n.childAt(o, [3]), 0, 0),
                            u = n.createMorphAt(o, 5, 5);
                        return i(t, l, e, "action", ["collapseSharePanel"], {
                            target: "view"
                        }), s(t, h, e, "share-post", [], {
                            post: d(t, e, "this"),
                            featureSet: "permalink",
                            location: "PostMobile",
                            isMobile: !0
                        }), s(t, u, e, "related-videos", [], {
                            posts: d(t, e, "relatedPosts"),
                            pagination: d(t, e, "relatedPagination"),
                            params: d(t, e, "relatedParams"),
                            visible: d(t, e, "relatedVideosVisible"),
                            isMobile: !0
                        }), c
                    }
                }
            }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createComment("");
                e.appendChild(t, a);
                var a = e.createTextNode("\n\n");
                e.appendChild(t, a);
                var a = e.createElement("div");
                e.setAttribute(a, "class", "card");
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("div");
                e.setAttribute(n, "class", "card-header");
                var r = e.createTextNode("\n");
                e.appendChild(n, r);
                var r = e.createComment("");
                e.appendChild(n, r);
                var r = e.createTextNode("    ");
                e.appendChild(n, r);
                var r = e.createComment("");
                e.appendChild(n, r);
                var r = e.createTextNode("\n  ");
                e.appendChild(n, r), e.appendChild(a, n);
                var n = e.createTextNode("\n\n  ");
                e.appendChild(a, n);
                var n = e.createElement("div");
                e.setAttribute(n, "class", "video-container");
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("div");
                e.setAttribute(r, "class", "loading-bar"), e.appendChild(n, r);
                var r = e.createTextNode("\n");
                e.appendChild(n, r);
                var r = e.createComment("");
                e.appendChild(n, r);
                var r = e.createTextNode("    ");
                e.appendChild(n, r);
                var r = e.createElement("div"),
                    i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("div");
                e.setAttribute(i, "class", "share-badge-bar");
                var d = e.createTextNode("\n        ");
                e.appendChild(i, d);
                var d = e.createComment("");
                e.appendChild(i, d);
                var d = e.createTextNode("\n      ");
                e.appendChild(i, d), e.appendChild(r, i);
                var i = e.createTextNode("\n    ");
                e.appendChild(r, i), e.appendChild(n, r);
                var r = e.createTextNode("\n  ");
                e.appendChild(n, r), e.appendChild(a, n);
                var n = e.createTextNode("\n\n  ");
                e.appendChild(a, n);
                var n = e.createElement("div");
                e.setAttribute(n, "class", "card-content");
                var r = e.createTextNode("\n");
                e.appendChild(n, r);
                var r = e.createComment("");
                e.appendChild(n, r);
                var r = e.createTextNode("\n");
                e.appendChild(n, r);
                var r = e.createComment("");
                e.appendChild(n, r);
                var r = e.createTextNode("\n");
                e.appendChild(n, r);
                var r = e.createComment("");
                e.appendChild(n, r);
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("div");
                e.setAttribute(r, "class", "post-engagement");
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("div");
                e.setAttribute(i, "class", "post-actions");
                var d = e.createTextNode("\n        ");
                e.appendChild(i, d);
                var d = e.createComment("");
                e.appendChild(i, d);
                var d = e.createTextNode("\n");
                e.appendChild(i, d);
                var d = e.createComment("");
                e.appendChild(i, d);
                var d = e.createComment("");
                e.appendChild(i, d);
                var d = e.createTextNode("      ");
                e.appendChild(i, d), e.appendChild(r, i);
                var i = e.createTextNode("\n\n      ");
                e.appendChild(r, i);
                var i = e.createComment("");
                e.appendChild(r, i);
                var i = e.createTextNode("\n    ");
                e.appendChild(r, i), e.appendChild(n, r);
                var r = e.createTextNode("\n\n");
                e.appendChild(n, r);
                var r = e.createComment("");
                e.appendChild(n, r);
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createComment("");
                e.appendChild(n, r);
                var r = e.createTextNode("\n  ");
                e.appendChild(n, r), e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n), e.appendChild(t, a);
                var a = e.createTextNode("\n\n");
                e.appendChild(t, a);
                var a = e.createComment("");
                return e.appendChild(t, a), t
            },
            render: function (u, p, m) {
                var v = p.dom,
                    g = p.hooks,
                    b = g.inline,
                    C = g.get,
                    f = g.block,
                    F = g.element;
                v.detectNamespace(m);
                var N;
                p.useFragmentCache && v.canClone ? (null === this.cachedFragment && (N = this.build(v), this.hasRendered ? this.cachedFragment = N : this.hasRendered = !0), this.cachedFragment && (N = v.cloneNode(this.cachedFragment, !0))) : N = this.build(v);
                var T = v.childAt(N, [2]),
                    x = v.childAt(T, [1]),
                    A = v.childAt(T, [3]),
                    k = v.childAt(A, [5]),
                    E = v.childAt(k, [1]),
                    R = v.childAt(T, [5]),
                    M = v.childAt(R, [7]),
                    y = v.childAt(M, [1]),
                    w = v.createMorphAt(N, 0, 0, m),
                    B = v.createMorphAt(x, 1, 1),
                    P = v.createMorphAt(x, 3, 3),
                    L = v.createMorphAt(A, 3, 3),
                    H = v.createMorphAt(E, 1, 1),
                    D = v.createMorphAt(R, 1, 1),
                    S = v.createMorphAt(R, 3, 3),
                    _ = v.createMorphAt(R, 5, 5),
                    I = v.createMorphAt(y, 1, 1),
                    U = v.createMorphAt(y, 3, 3),
                    V = v.createMorphAt(y, 4, 4),
                    $ = v.createMorphAt(M, 3, 3),
                    j = v.createMorphAt(R, 9, 9),
                    O = v.createMorphAt(R, 11, 11),
                    q = v.createMorphAt(N, 4, 4, m);
                return v.insertBoundary(N, null), v.insertBoundary(N, 0), b(p, w, u, "partial", ["post-byline"], {}), f(p, B, u, "if", [C(p, u, "loops")], {}, e, null), b(p, P, u, "user-info", [], {
                    data: C(p, u, "this"),
                    cssClass: "user-info-size-38 user-info-show-verification"
                }), F(p, A, u, "bind-attr", [], {
                    style: C(p, u, "videoContainerStyle")
                }), F(p, A, u, "action", ["play"], {
                    target: "view"
                }), f(p, L, u, "if", [C(p, u, "explicitContent")], {}, t, a), F(p, k, u, "bind-attr", [], {
                    "class": ":share-overlay shareSheetOpen:open"
                }), F(p, k, u, "action", ["stopShareCloseTimer"], {
                    on: "mouseEnter"
                }), F(p, E, u, "action", ["startShareCloseTimer"], {
                    on: "mouseLeave"
                }), b(p, H, u, "share-post", [], {
                    post: C(p, u, "this"),
                    featureSet: "feed",
                    visible: C(p, u, "shareSheetOpen"),
                    location: "ShareSheet",
                    isMobile: !1
                }), f(p, D, u, "if", [C(p, u, "description")], {}, n, null), f(p, S, u, "if", [C(p, u, "likes.count")], {}, r, null), f(p, _, u, "if", [C(p, u, "description")], {}, i, d), b(p, I, u, "animated-button", [], {
                    actionName: "like",
                    iconName: "like_stroked",
                    isActive: C(p, u, "liked"),
                    action: "like"
                }), f(p, U, u, "unless", [C(p, u, "isCurrentUser")], {}, s, null), f(p, V, u, "if", [C(p, u, "isPermalink")], {}, c, o), b(p, $, u, "view", ["post-actions-menu"], {}), f(p, j, u, "if", [C(p, u, "paginatedComments.pagination.count")], {}, l, null), b(p, O, u, "comment-form", [], {
                    value: C(p, u, "commentText"),
                    commentCount: C(p, u, "comments.count")
                }), f(p, q, u, "if", [C(p, u, "isPermalink")], {}, h, null), N
            }
        }
    }())
}), define("vine-ember/templates/post", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        var e = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("      ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.inline;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var s = n.createMorphAt(d, 1, 1, a);
                        return i(t, s, e, "partial", ["explicit-content"], {}), d
                    }
                }
            }(),
            t = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("      ");
                        e.appendChild(t, a);
                        var a = e.createElement("div");
                        e.setAttribute(a, "class", "post-description");
                        var n = e.createComment("");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n      ");
                        e.appendChild(t, a);
                        var a = e.createElement("hr");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.get,
                            d = r.inline;
                        n.detectNamespace(a);
                        var s;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                        var c = n.createMorphAt(n.childAt(s, [1]), 0, 0);
                        return d(t, c, e, "linkify-entities", [], {
                            text: i(t, e, "description"),
                            entities: i(t, e, "entities")
                        }), s
                    }
                }
            }(),
            a = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("          ");
                        e.appendChild(t, a);
                        var a = e.createElement("span");
                        e.setAttribute(a, "class", "caption");
                        var n = e.createComment("");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.get,
                            d = r.inline;
                        n.detectNamespace(a);
                        var s;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                        var c = n.createMorphAt(n.childAt(s, [1]), 0, 0);
                        return d(t, c, e, "format-count", [i(t, e, "likes.count")], {
                            zeroText: "Like"
                        }), s
                    }
                }
            }(),
            n = function () {
                var e = function () {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null,
                        hasRendered: !1,
                        build: function (e) {
                            var t = e.createDocumentFragment(),
                                a = e.createTextNode("            ");
                            e.appendChild(t, a);
                            var a = e.createElement("span");
                            e.setAttribute(a, "class", "caption");
                            var n = e.createComment("");
                            e.appendChild(a, n), e.appendChild(t, a);
                            var a = e.createTextNode("\n");
                            return e.appendChild(t, a), t
                        },
                        render: function (e, t, a) {
                            var n = t.dom,
                                r = t.hooks,
                                i = r.get,
                                d = r.inline;
                            n.detectNamespace(a);
                            var s;
                            t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                            var c = n.createMorphAt(n.childAt(s, [1]), 0, 0);
                            return d(t, c, e, "format-count", [i(t, e, "reposts.count")], {
                                zeroText: "Revine"
                            }), s
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createComment("");
                        return e.appendChild(t, a), t
                    },
                    render: function (t, a, n) {
                        var r = a.dom,
                            i = a.hooks,
                            d = i.get,
                            s = i.block;
                        r.detectNamespace(n);
                        var c;
                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r), this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0), this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                        var o = r.createMorphAt(c, 0, 0, n);
                        return r.insertBoundary(c, null), r.insertBoundary(c, 0), s(a, o, t, "animated-button", [], {
                            actionName: "revine",
                            iconName: "revine_stroked",
                            isActive: d(a, t, "myRepostId"),
                            action: "revine",
                            disabled: d(a, t, "isCurrentUser")
                        }, e, null), c
                    }
                }
            }(),
            r = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("          ");
                        e.appendChild(t, a);
                        var a = e.createElement("span");
                        e.setAttribute(a, "class", "caption");
                        var n = e.createTextNode("Share");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom;
                        n.detectNamespace(a);
                        var r;
                        return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n), this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0), this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n), r
                    }
                }
            }(),
            i = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("        ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.get,
                            d = r.inline;
                        n.detectNamespace(a);
                        var s;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                        var c = n.createMorphAt(s, 1, 1, a);
                        return d(t, c, e, "loop-count", [], {
                            postId: i(t, e, "postIdStr"),
                            loops: i(t, e, "loops"),
                            postDate: i(t, e, "created")
                        }), s
                    }
                }
            }(),
            d = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("      ");
                        e.appendChild(t, a);
                        var a = e.createElement("hr");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n      ");
                        e.appendChild(t, a);
                        var a = e.createElement("ul");
                        e.setAttribute(a, "class", "comments-container");
                        var n = e.createTextNode("\n        ");
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        e.appendChild(a, n);
                        var n = e.createTextNode("\n      ");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.get,
                            d = r.inline;
                        n.detectNamespace(a);
                        var s;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                        var c = n.createMorphAt(n.childAt(s, [3]), 1, 1);
                        return d(t, c, e, "paginated-comments", [], {
                            comments: i(t, e, "paginatedComments")
                        }), s
                    }
                }
            }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createComment("");
                e.appendChild(t, a);
                var a = e.createTextNode("\n\n");
                e.appendChild(t, a);
                var a = e.createElement("div");
                e.setAttribute(a, "class", "card");
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("div");
                e.setAttribute(n, "class", "card-header");
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createComment("");
                e.appendChild(n, r);
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createComment("");
                e.appendChild(n, r);
                var r = e.createTextNode("\n  ");
                e.appendChild(n, r), e.appendChild(a, n);
                var n = e.createTextNode("\n\n  ");
                e.appendChild(a, n);
                var n = e.createElement("div");
                e.setAttribute(n, "class", "video-container");
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("div");
                e.setAttribute(r, "class", "loading-bar"), e.appendChild(n, r);
                var r = e.createTextNode("\n");
                e.appendChild(n, r);
                var r = e.createComment("");
                e.appendChild(n, r);
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("div"),
                    i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("div");
                e.setAttribute(i, "class", "share-badge-bar");
                var d = e.createTextNode("\n        ");
                e.appendChild(i, d);
                var d = e.createComment("");
                e.appendChild(i, d);
                var d = e.createTextNode("\n      ");
                e.appendChild(i, d), e.appendChild(r, i);
                var i = e.createTextNode("\n    ");
                e.appendChild(r, i), e.appendChild(n, r);
                var r = e.createTextNode("\n  ");
                e.appendChild(n, r), e.appendChild(a, n);
                var n = e.createTextNode("\n\n  ");
                e.appendChild(a, n);
                var n = e.createElement("div");
                e.setAttribute(n, "class", "card-content");
                var r = e.createTextNode("\n");
                e.appendChild(n, r);
                var r = e.createComment("");
                e.appendChild(n, r);
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("div");
                e.setAttribute(r, "class", "post-engagement");
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("div");
                e.setAttribute(i, "class", "post-actions with-captions");
                var d = e.createTextNode("\n");
                e.appendChild(i, d);
                var d = e.createComment("");
                e.appendChild(i, d);
                var d = e.createComment("");
                e.appendChild(i, d);
                var d = e.createComment("");
                e.appendChild(i, d);
                var d = e.createTextNode("      ");
                e.appendChild(i, d), e.appendChild(r, i);
                var i = e.createTextNode("\n");
                e.appendChild(r, i);
                var i = e.createComment("");
                e.appendChild(r, i);
                var i = e.createTextNode("    ");
                e.appendChild(r, i), e.appendChild(n, r);
                var r = e.createTextNode("\n\n");
                e.appendChild(n, r);
                var r = e.createComment("");
                e.appendChild(n, r);
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createComment("");
                e.appendChild(n, r);
                var r = e.createTextNode("\n  ");
                e.appendChild(n, r), e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n), e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a), t
            },
            render: function (s, c, o) {
                var l = c.dom,
                    h = c.hooks,
                    u = h.inline,
                    p = h.get,
                    m = h.element,
                    v = h.block;
                l.detectNamespace(o);
                var g;
                c.useFragmentCache && l.canClone ? (null === this.cachedFragment && (g = this.build(l), this.hasRendered ? this.cachedFragment = g : this.hasRendered = !0), this.cachedFragment && (g = l.cloneNode(this.cachedFragment, !0))) : g = this.build(l);
                var b = l.childAt(g, [2]),
                    C = l.childAt(b, [1]),
                    f = l.childAt(b, [3]),
                    F = l.childAt(f, [5]),
                    N = l.childAt(F, [1]),
                    T = l.childAt(b, [5]),
                    x = l.childAt(T, [3]),
                    A = l.childAt(x, [1]),
                    k = l.createMorphAt(g, 0, 0, o),
                    E = l.createMorphAt(C, 1, 1),
                    R = l.createMorphAt(C, 3, 3),
                    M = l.createMorphAt(f, 3, 3),
                    y = l.createMorphAt(N, 1, 1),
                    w = l.createMorphAt(T, 1, 1),
                    B = l.createMorphAt(A, 1, 1),
                    P = l.createMorphAt(A, 2, 2),
                    L = l.createMorphAt(A, 3, 3),
                    H = l.createMorphAt(x, 3, 3),
                    D = l.createMorphAt(T, 5, 5),
                    S = l.createMorphAt(T, 7, 7);
                return l.insertBoundary(g, 0), u(c, k, s, "partial", ["post-byline"], {}), u(c, E, s, "view", ["post-actions-menu"], {}), u(c, R, s, "user-info", [], {
                    data: p(c, s, "this")
                }), m(c, f, s, "bind-attr", [], {
                    style: p(c, s, "backgroundImageStyle")
                }), m(c, f, s, "action", ["play"], {
                    target: "view",
                    preventDefault: !1
                }), v(c, M, s, "if", [p(c, s, "explicitContent")], {}, e, null), m(c, F, s, "bind-attr", [], {
                    "class": ":share-overlay shareSheetOpen:open"
                }), m(c, F, s, "action", ["stopShareCloseTimer"], {
                    on: "mouseEnter"
                }), m(c, N, s, "action", ["startShareCloseTimer"], {
                    on: "mouseLeave"
                }), u(c, y, s, "share-post", [], {
                    post: p(c, s, "this"),
                    featureSet: "feed",
                    visible: p(c, s, "shareSheetOpen"),
                    location: "ShareSheet",
                    isMobile: !1
                }), v(c, w, s, "if", [p(c, s, "description")], {}, t, null), v(c, B, s, "animated-button", [], {
                    actionName: "like",
                    iconName: "like_stroked",
                    isActive: p(c, s, "liked"),
                    action: "like"
                }, a, null), v(c, P, s, "unless", [p(c, s, "shouldHideRevine")], {}, n, null), v(c, L, s, "animated-button", [], {
                    actionName: "share",
                    iconName: "share_stroked",
                    isActive: p(c, s, "shareSheetOpen"),
                    action: "share"
                }, r, null), v(c, H, s, "if", [p(c, s, "loops")], {}, i, null), v(c, D, s, "if", [p(c, s, "paginatedComments.pagination.count")], {}, d, null), u(c, S, s, "comment-form", [], {
                    value: p(c, s, "commentText"),
                    commentCount: p(c, s, "comments.count")
                }), g
            }
        }
    }())
}), define("vine-ember/templates/promo/camera", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        var e = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("    ");
                        e.appendChild(t, a);
                        var a = e.createElement("div");
                        e.setAttribute(a, "class", "iframe-container");
                        var n = e.createTextNode("\n      ");
                        e.appendChild(a, n);
                        var n = e.createElement("iframe");
                        e.setAttribute(n, "src", "//web.archive.org/web/20150701150124/https://player.vimeo.com/video/103853748?title=0&byline=0&portrait=0&color=ffffff&autoplay=1&api=1"), e.setAttribute(n, "frameborder", "0"), e.setAttribute(n, "width", "1280"), e.setAttribute(n, "height", "640"), e.setAttribute(n, "webkitallowfullscreen", ""), e.setAttribute(n, "mozallowfullscreen", ""), e.setAttribute(n, "allowfullscreen", ""), e.appendChild(a, n);
                        var n = e.createTextNode("\n      ");
                        e.appendChild(a, n);
                        var n = e.createElement("div");
                        e.setAttribute(n, "class", "icon-close_x"), e.appendChild(a, n);
                        var n = e.createTextNode("\n    ");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.element;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var s = n.childAt(d, [1, 3]);
                        return i(t, s, e, "action", ["stopVideo"], {}), d
                    }
                }
            }(),
            t = function () {
                var e = function () {
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createTextNode("        ");
                                e.appendChild(t, a);
                                var a = e.createElement("div");
                                e.setAttribute(a, "class", "hero"), e.appendChild(t, a);
                                var a = e.createTextNode("\n");
                                return e.appendChild(t, a), t
                            },
                            render: function (e, t, a) {
                                var n = t.dom;
                                n.detectNamespace(a);
                                var r;
                                return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n), this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0), this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n), r
                            }
                        }
                    }(),
                    t = function () {
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createTextNode("        ");
                                e.appendChild(t, a);
                                var a = e.createElement("div");
                                e.setAttribute(a, "class", "icon-vine_logo"), e.appendChild(t, a);
                                var a = e.createTextNode("\n");
                                return e.appendChild(t, a), t
                            },
                            render: function (e, t, a) {
                                var n = t.dom;
                                n.detectNamespace(a);
                                var r;
                                return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n), this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0), this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n), r
                            }
                        }
                    }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("    ");
                        e.appendChild(t, a);
                        var a = e.createElement("div");
                        e.setAttribute(a, "class", "header-content");
                        var n = e.createTextNode("\n");
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        e.appendChild(a, n);
                        var n = e.createTextNode("\n      ");
                        e.appendChild(a, n);
                        var n = e.createElement("div");
                        e.setAttribute(n, "class", "overlay"), e.appendChild(a, n);
                        var n = e.createTextNode("\n\n");
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        e.appendChild(a, n);
                        var n = e.createTextNode("      ");
                        e.appendChild(a, n);
                        var n = e.createElement("div");
                        e.setAttribute(n, "class", "messaging");
                        var r = e.createTextNode("\n        ");
                        e.appendChild(n, r);
                        var r = e.createElement("button");
                        e.setAttribute(r, "class", "play"), e.appendChild(n, r);
                        var r = e.createTextNode("\n\n        ");
                        e.appendChild(n, r);
                        var r = e.createElement("div");
                        e.setAttribute(r, "class", "promo-title");
                        var i = e.createTextNode("The new Vine camera");
                        e.appendChild(r, i), e.appendChild(n, r);
                        var r = e.createTextNode("\n        ");
                        e.appendChild(n, r);
                        var r = e.createElement("div");
                        e.setAttribute(r, "class", "promo-subtitle");
                        var i = e.createTextNode("Shoot, import, edit and share — fast.");
                        e.appendChild(r, i), e.appendChild(n, r);
                        var r = e.createTextNode("\n\n        ");
                        e.appendChild(n, r);
                        var r = e.createComment("");
                        e.appendChild(n, r);
                        var r = e.createTextNode("\n      ");
                        e.appendChild(n, r), e.appendChild(a, n);
                        var n = e.createTextNode("\n    ");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (a, n, r) {
                        var i = n.dom,
                            d = n.hooks,
                            s = d.get,
                            c = d.block,
                            o = d.element,
                            l = d.content;
                        i.detectNamespace(r);
                        var h;
                        n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (h = this.build(i), this.hasRendered ? this.cachedFragment = h : this.hasRendered = !0), this.cachedFragment && (h = i.cloneNode(this.cachedFragment, !0))) : h = this.build(i);
                        var u = i.childAt(h, [1]),
                            p = i.childAt(u, [7]),
                            m = i.childAt(p, [1]),
                            v = i.createMorphAt(u, 1, 1),
                            g = i.createMorphAt(u, 5, 5),
                            b = i.createMorphAt(p, 7, 7);
                        return c(n, v, a, "each", [s(n, a, "heros")], {}, e, null), c(n, g, a, "link-to", ["index"], {}, t, null), o(n, m, a, "action", ["playVideo"], {
                            target: "view"
                        }), l(n, b, a, "download-buttons"), h
                    }
                }
            }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createElement("section");
                e.setAttribute(a, "id", "promo-header");
                var n = e.createTextNode("\n");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n), e.appendChild(t, a);
                var a = e.createTextNode("\n");
                e.appendChild(t, a);
                var a = e.createElement("section");
                e.setAttribute(a, "id", "promo-content");
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("div"),
                    r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("article"),
                    i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createComment("");
                e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("div");
                e.setAttribute(i, "class", "article-title");
                var d = e.createTextNode("Import existing videos from your phone");
                e.appendChild(i, d), e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("div");
                e.setAttribute(i, "class", "article-subtitle");
                var d = e.createTextNode("\n        In addition to your phone’s front- and rear-facing camera, you now have another source for your video. From the capture screen, you can choose to import a video from your phone.\n      ");
                e.appendChild(i, d), e.appendChild(r, i);
                var i = e.createTextNode("\n    ");
                e.appendChild(r, i), e.appendChild(n, r);
                var r = e.createElement("article"),
                    i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createComment("");
                e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("div");
                e.setAttribute(i, "class", "article-title");
                var d = e.createTextNode("New edit mode");
                e.appendChild(i, d), e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("div");
                e.setAttribute(i, "class", "article-subtitle");
                var d = e.createTextNode("\n        The new edit and preview screens help you get your video just the way you want it. To edit your Vine, tap the scissors from the preview screen.\n      ");
                e.appendChild(i, d), e.appendChild(r, i);
                var i = e.createTextNode("\n    ");
                e.appendChild(r, i), e.appendChild(n, r);
                var r = e.createTextNode("\n  ");
                e.appendChild(n, r), e.appendChild(a, n);
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("div"),
                    r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("article"),
                    i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createComment("");
                e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("div");
                e.setAttribute(i, "class", "article-title");
                var d = e.createTextNode("Advanced camera tools");
                e.appendChild(i, d), e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("div");
                e.setAttribute(i, "class", "article-subtitle");
                var d = e.createTextNode("\n        For those who want more advanced ways to shoot Vines, we’ve added a new button that displays a second layer of tools: grid and level, front- and rear-facing focus lock, ghost mode and torch.\n      ");
                e.appendChild(i, d), e.appendChild(r, i);
                var i = e.createTextNode("\n    ");
                e.appendChild(r, i), e.appendChild(n, r);
                var r = e.createElement("article"),
                    i = e.createTextNode("\n    ");
                e.appendChild(r, i);
                var i = e.createComment("");
                e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("div");
                e.setAttribute(i, "class", "article-title");
                var d = e.createTextNode("Undo and quick preview");
                e.appendChild(i, d), e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("div");
                e.setAttribute(i, "class", "article-subtitle");
                var d = e.createTextNode("\n        With one tap, you can now preview your last clip right from the capture screen. If you feel it isn’t quite right and you don’t want to use it, simply tap the button again to undo it.\n      ");
                e.appendChild(i, d), e.appendChild(r, i);
                var i = e.createTextNode("\n    ");
                e.appendChild(r, i), e.appendChild(n, r);
                var r = e.createTextNode("\n  ");
                e.appendChild(n, r), e.appendChild(a, n);
                var n = e.createTextNode("\n\n  ");
                e.appendChild(a, n);
                var n = e.createElement("section");
                e.setAttribute(n, "id", "promo-footer");
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("h2"),
                    i = e.createTextNode("For more information, visit our ");
                e.appendChild(r, i);
                var i = e.createElement("a");
                e.setAttribute(i, "href", "https://web.archive.org/web/20150701150124/http://blog.vine.co/post/95288683756/new-vine-camera-shoot-import-edit-and-share-fast"), e.setAttribute(i, "target", "_blank");
                var d = e.createTextNode("blog");
                e.appendChild(i, d), e.appendChild(r, i);
                var i = e.createTextNode(".");
                e.appendChild(r, i), e.appendChild(n, r);
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createComment("");
                e.appendChild(n, r);
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createComment("");
                e.appendChild(n, r);
                var r = e.createTextNode("\n  ");
                e.appendChild(n, r), e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n), e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a), t
            },
            render: function (a, n, r) {
                var i = n.dom,
                    d = n.hooks,
                    s = d.get,
                    c = d.block,
                    o = d.inline,
                    l = d.content;
                i.detectNamespace(r);
                var h;
                n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (h = this.build(i), this.hasRendered ? this.cachedFragment = h : this.hasRendered = !0), this.cachedFragment && (h = i.cloneNode(this.cachedFragment, !0))) : h = this.build(i);
                var u = i.childAt(h, [2]),
                    p = i.childAt(u, [1]),
                    m = i.childAt(u, [3]),
                    v = i.childAt(u, [5]),
                    g = i.createMorphAt(i.childAt(h, [0]), 1, 1),
                    b = i.createMorphAt(i.childAt(p, [1]), 1, 1),
                    C = i.createMorphAt(i.childAt(p, [2]), 1, 1),
                    f = i.createMorphAt(i.childAt(m, [1]), 1, 1),
                    F = i.createMorphAt(i.childAt(m, [2]), 1, 1),
                    N = i.createMorphAt(v, 3, 3),
                    T = i.createMorphAt(v, 5, 5);
                return c(n, g, a, "if", [s(n, a, "isPlaying")], {}, e, t), o(n, b, a, "cdn-img", [], {
                    src: "images/promo/camera/vine_camera_roll-47b02c148ea10c1ff13650820d3b2b27.jpg"
                }), o(n, C, a, "cdn-img", [], {
                    src: "images/promo/camera/vine_camera_edit-47ab04a7e9ec06dfb49387c4a2d6d287.jpg"
                }), o(n, f, a, "cdn-img", [], {
                    src: "images/promo/camera/vine_camera_tools-d442e12b82e77b8b5b7f59d58b22298c.jpg"
                }), o(n, F, a, "cdn-img", [], {
                    src: "images/promo/camera/vine_camera_undo-df55b7abe0487a06875bb0c90756124b.jpg"
                }), l(n, N, a, "share-widgets"), l(n, T, a, "download-buttons"), h
            }
        }
    }())
}), define("vine-ember/templates/related-videos/post", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        var e = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("  ");
                        e.appendChild(t, a);
                        var a = e.createElement("div");
                        e.setAttribute(a, "class", "video-container"), e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.get,
                            d = r.element;
                        n.detectNamespace(a);
                        var s;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                        var c = n.childAt(s, [1]);
                        return d(t, c, e, "bind-attr", [], {
                            style: i(t, e, "backgroundImageStyle")
                        }), s
                    }
                }
            }(),
            t = function () {
                var e = function () {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null,
                        hasRendered: !1,
                        build: function (e) {
                            var t = e.createDocumentFragment(),
                                a = e.createTextNode("    ");
                            e.appendChild(t, a);
                            var a = e.createElement("div");
                            e.setAttribute(a, "class", "post-info");
                            var n = e.createTextNode("\n      ");
                            e.appendChild(a, n);
                            var n = e.createElement("div");
                            e.setAttribute(n, "class", "info-container");
                            var r = e.createTextNode("\n        ");
                            e.appendChild(n, r);
                            var r = e.createComment("");
                            e.appendChild(n, r);
                            var r = e.createTextNode("\n        ");
                            e.appendChild(n, r);
                            var r = e.createElement("div");
                            e.setAttribute(r, "class", "description");
                            var i = e.createTextNode("\n          ");
                            e.appendChild(r, i);
                            var i = e.createComment("");
                            e.appendChild(r, i);
                            var i = e.createTextNode("\n        ");
                            e.appendChild(r, i), e.appendChild(n, r);
                            var r = e.createTextNode("\n      ");
                            e.appendChild(n, r), e.appendChild(a, n);
                            var n = e.createTextNode("\n    ");
                            e.appendChild(a, n), e.appendChild(t, a);
                            var a = e.createTextNode("\n");
                            return e.appendChild(t, a), t
                        },
                        render: function (e, t, a) {
                            var n = t.dom,
                                r = t.hooks,
                                i = r.get,
                                d = r.inline;
                            n.detectNamespace(a);
                            var s;
                            t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                            var c = n.childAt(s, [1, 1]),
                                o = n.createMorphAt(c, 1, 1),
                                l = n.createMorphAt(n.childAt(c, [3]), 1, 1);
                            return d(t, o, e, "user-info", [], {
                                data: i(t, e, "this"),
                                cssClass: "user-info-size-24 user-info-inherit-color"
                            }), d(t, l, e, "replace-emoji", [i(t, e, "description")], {}), s
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createComment("");
                        return e.appendChild(t, a), t
                    },
                    render: function (t, a, n) {
                        var r = a.dom,
                            i = a.hooks,
                            d = i.get,
                            s = i.block;
                        r.detectNamespace(n);
                        var c;
                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r), this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0), this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                        var o = r.createMorphAt(c, 0, 0, n);
                        return r.insertBoundary(c, null), r.insertBoundary(c, 0), s(a, o, t, "mouseover-video", [], {
                            post: d(a, t, "this"),
                            player: d(a, t, "controller.player"),
                            className: "medium"
                        }, e, null), c
                    }
                }
            }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createComment("");
                return e.appendChild(t, a), t
            },
            render: function (a, n, r) {
                var i = n.dom,
                    d = n.hooks,
                    s = d.get,
                    c = d.block;
                i.detectNamespace(r);
                var o;
                n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (o = this.build(i), this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0), this.cachedFragment && (o = i.cloneNode(this.cachedFragment, !0))) : o = this.build(i);
                var l = i.createMorphAt(o, 0, 0, r);
                return i.insertBoundary(o, null), i.insertBoundary(o, 0), c(n, l, a, "if", [s(n, a, "view.isMobile")], {}, e, t), o
            }
        }
    }())
}), define("vine-ember/templates/reset-password", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        var e = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("      ");
                        e.appendChild(t, a);
                        var a = e.createElement("div");
                        e.setAttribute(a, "class", "icon-smiley"), e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom;
                        n.detectNamespace(a);
                        var r;
                        return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n), this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0), this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n), r
                    }
                }
            }(),
            t = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("      ");
                        e.appendChild(t, a);
                        var a = e.createElement("div");
                        e.setAttribute(a, "class", "icon-lock"), e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom;
                        n.detectNamespace(a);
                        var r;
                        return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n), this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0), this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n), r
                    }
                }
            }(),
            a = function () {
                var e = function () {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null,
                        hasRendered: !1,
                        build: function (e) {
                            var t = e.createDocumentFragment(),
                                a = e.createElement("button"),
                                n = e.createTextNode("Continue");
                            return e.appendChild(a, n), e.appendChild(t, a), t
                        },
                        render: function (e, t, a) {
                            var n = t.dom;
                            n.detectNamespace(a);
                            var r;
                            return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n), this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0), this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n), r
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("      ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (t, a, n) {
                        var r = a.dom,
                            i = a.hooks,
                            d = i.block;
                        r.detectNamespace(n);
                        var s;
                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                        var c = r.createMorphAt(s, 1, 1, n);
                        return d(a, c, t, "link-to", ["login"], {}, e, null), s
                    }
                }
            }(),
            n = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("      ");
                        e.appendChild(t, a);
                        var a = e.createElement("form");
                        e.setAttribute(a, "id", "reset-password");
                        var n = e.createTextNode("\n        ");
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        e.appendChild(a, n);
                        var n = e.createElement("br");
                        e.appendChild(a, n);
                        var n = e.createTextNode("\n        ");
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        e.appendChild(a, n);
                        var n = e.createElement("br");
                        e.appendChild(a, n);
                        var n = e.createTextNode("\n        ");
                        e.appendChild(a, n);
                        var n = e.createElement("button");
                        e.setAttribute(n, "type", "submit");
                        var r = e.createTextNode("Submit");
                        e.appendChild(n, r), e.appendChild(a, n);
                        var n = e.createTextNode("\n      ");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.element,
                            d = r.get,
                            s = r.inline;
                        n.detectNamespace(a);
                        var c;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n), this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0), this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                        var o = n.childAt(c, [1]),
                            l = n.createMorphAt(o, 1, 1),
                            h = n.createMorphAt(o, 4, 4);
                        return i(t, o, e, "action", ["resetPassword"], {
                            on: "submit"
                        }), s(t, l, e, "my-input", [], {
                            type: "password",
                            name: "password1",
                            placeholder: "New Password",
                            value: d(t, e, "password1"),
                            messageType: d(t, e, "message.type")
                        }), s(t, h, e, "my-input", [], {
                            type: "password",
                            name: "password2",
                            placeholder: "Confirm Password",
                            value: d(t, e, "password2"),
                            messageType: d(t, e, "message.type")
                        }), c
                    }
                }
            }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createElement("div");
                e.setAttribute(a, "class", "login-page");
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("div"),
                    r = e.createTextNode("\n");
                e.appendChild(n, r);
                var r = e.createComment("");
                e.appendChild(n, r);
                var r = e.createTextNode("    ");
                e.appendChild(n, r);
                var r = e.createElement("div");
                e.setAttribute(r, "class", "message");
                var i = e.createComment("");
                e.appendChild(r, i), e.appendChild(n, r);
                var r = e.createTextNode("\n\n");
                e.appendChild(n, r);
                var r = e.createComment("");
                e.appendChild(n, r);
                var r = e.createTextNode("  ");
                e.appendChild(n, r), e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n), e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a), t
            },
            render: function (r, i, d) {
                var s = i.dom,
                    c = i.hooks,
                    o = c.element,
                    l = c.get,
                    h = c.block,
                    u = c.content;
                s.detectNamespace(d);
                var p;
                i.useFragmentCache && s.canClone ? (null === this.cachedFragment && (p = this.build(s), this.hasRendered ? this.cachedFragment = p : this.hasRendered = !0), this.cachedFragment && (p = s.cloneNode(this.cachedFragment, !0))) : p = this.build(s);
                var m = s.childAt(p, [0, 1]),
                    v = s.createMorphAt(m, 1, 1),
                    g = s.createMorphAt(s.childAt(m, [3]), 0, 0),
                    b = s.createMorphAt(m, 5, 5);
                return o(i, m, r, "bind-attr", [], {
                    "class": ":login-container submitted"
                }), h(i, v, r, "if", [l(i, r, "submitted")], {}, e, t), u(i, g, r, "message.text"), h(i, b, r, "if", [l(i, r, "submitted")], {}, a, n), p
            }
        }
    }())
}), define("vine-ember/templates/search", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createElement("section");
                e.setAttribute(a, "id", "search");
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("form");
                e.setAttribute(n, "class", "search");
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createComment("");
                e.appendChild(n, r);
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("button");
                e.setAttribute(r, "type", "submit"), e.setAttribute(r, "class", "clear icon-search"), e.appendChild(n, r);
                var r = e.createTextNode("\n  ");
                e.appendChild(n, r), e.appendChild(a, n);
                var n = e.createTextNode("\n\n  ");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createTextNode("\n");
                return e.appendChild(a, n), e.appendChild(t, a), t
            },
            render: function (e, t, a) {
                var n = t.dom,
                    r = t.hooks,
                    i = r.element,
                    d = r.get,
                    s = r.inline,
                    c = r.content;
                n.detectNamespace(a);
                var o;
                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (o = this.build(n), this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0), this.cachedFragment && (o = n.cloneNode(this.cachedFragment, !0))) : o = this.build(n);
                var l = n.childAt(o, [0]),
                    h = n.childAt(l, [1]),
                    u = n.createMorphAt(h, 1, 1),
                    p = n.createMorphAt(l, 3, 3);
                return i(t, h, e, "action", ["search"], {
                    on: "submit"
                }), s(t, u, e, "view", ["search-input"], {
                    placeholder: "Search",
                    value: d(t, e, "query")
                }), c(t, p, e, "outlet"), o
            }
        }
    }())
}), define("vine-ember/templates/search/autocomplete-results", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        var e = function () {
                var e = function () {
                    var e = function () {
                            var e = function () {
                                return {
                                    isHTMLBars: !0,
                                    revision: "Ember@1.11.3",
                                    blockParams: 0,
                                    cachedFragment: null,
                                    hasRendered: !1,
                                    build: function (e) {
                                        var t = e.createDocumentFragment(),
                                            a = e.createElement("span");
                                        e.setAttribute(a, "class", "icon-tag"), e.appendChild(t, a);
                                        var a = e.createTextNode("#");
                                        e.appendChild(t, a);
                                        var a = e.createComment("");
                                        return e.appendChild(t, a), t
                                    },
                                    render: function (e, t, a) {
                                        var n = t.dom,
                                            r = t.hooks,
                                            i = r.content;
                                        n.detectNamespace(a);
                                        var d;
                                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                                        var s = n.createMorphAt(d, 2, 2, a);
                                        return n.insertBoundary(d, null), i(t, s, e, "tag"), d
                                    }
                                }
                            }();
                            return {
                                isHTMLBars: !0,
                                revision: "Ember@1.11.3",
                                blockParams: 0,
                                cachedFragment: null,
                                hasRendered: !1,
                                build: function (e) {
                                    var t = e.createDocumentFragment(),
                                        a = e.createElement("li"),
                                        n = e.createComment("");
                                    return e.appendChild(a, n), e.appendChild(t, a), t
                                },
                                render: function (t, a, n) {
                                    var r = a.dom,
                                        i = a.hooks,
                                        d = i.get,
                                        s = i.block;
                                    r.detectNamespace(n);
                                    var c;
                                    a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r), this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0), this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                                    var o = r.createMorphAt(r.childAt(c, [0]), 0, 0);
                                    return s(a, o, t, "link-to", ["tag", d(a, t, "tag")], {}, e, null), c
                                }
                            }
                        }(),
                        t = function () {
                            var e = function () {
                                return {
                                    isHTMLBars: !0,
                                    revision: "Ember@1.11.3",
                                    blockParams: 0,
                                    cachedFragment: null,
                                    hasRendered: !1,
                                    build: function (e) {
                                        var t = e.createDocumentFragment(),
                                            a = e.createComment("");
                                        e.appendChild(t, a);
                                        var a = e.createComment("");
                                        return e.appendChild(t, a), t
                                    },
                                    render: function (e, t, a) {
                                        var n = t.dom,
                                            r = t.hooks,
                                            i = r.get,
                                            d = r.inline,
                                            s = r.content;
                                        n.detectNamespace(a);
                                        var c;
                                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n), this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0), this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                                        var o = n.createMorphAt(c, 0, 0, a),
                                            l = n.createMorphAt(c, 1, 1, a);
                                        return n.insertBoundary(c, null), n.insertBoundary(c, 0), d(t, o, e, "secure-img", [], {
                                            src: i(t, e, "avatarUrl"),
                                            "class": "avatar",
                                            style: i(t, e, "borderColorStyle")
                                        }), s(t, l, e, "username"), c
                                    }
                                }
                            }();
                            return {
                                isHTMLBars: !0,
                                revision: "Ember@1.11.3",
                                blockParams: 0,
                                cachedFragment: null,
                                hasRendered: !1,
                                build: function (e) {
                                    var t = e.createDocumentFragment(),
                                        a = e.createElement("li"),
                                        n = e.createComment("");
                                    return e.appendChild(a, n),
                                        e.appendChild(t, a), t
                                },
                                render: function (t, a, n) {
                                    var r = a.dom,
                                        i = a.hooks,
                                        d = i.get,
                                        s = i.block;
                                    r.detectNamespace(n);
                                    var c;
                                    a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r), this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0), this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                                    var o = r.createMorphAt(r.childAt(c, [0]), 0, 0);
                                    return s(a, o, t, "link-user", [], {
                                        user: d(a, t, "this")
                                    }, e, null), c
                                }
                            }
                        }(),
                        a = function () {
                            var e = function () {
                                return {
                                    isHTMLBars: !0,
                                    revision: "Ember@1.11.3",
                                    blockParams: 0,
                                    cachedFragment: null,
                                    hasRendered: !1,
                                    build: function (e) {
                                        var t = e.createDocumentFragment(),
                                            a = e.createElement("span");
                                        e.setAttribute(a, "class", "icon-venue"), e.appendChild(t, a);
                                        var a = e.createComment("");
                                        return e.appendChild(t, a), t
                                    },
                                    render: function (e, t, a) {
                                        var n = t.dom,
                                            r = t.hooks,
                                            i = r.content;
                                        n.detectNamespace(a);
                                        var d;
                                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                                        var s = n.createMorphAt(d, 1, 1, a);
                                        return n.insertBoundary(d, null), i(t, s, e, "venueName"), d
                                    }
                                }
                            }();
                            return {
                                isHTMLBars: !0,
                                revision: "Ember@1.11.3",
                                blockParams: 0,
                                cachedFragment: null,
                                hasRendered: !1,
                                build: function (e) {
                                    var t = e.createDocumentFragment(),
                                        a = e.createElement("li"),
                                        n = e.createComment("");
                                    return e.appendChild(a, n), e.appendChild(t, a), t
                                },
                                render: function (t, a, n) {
                                    var r = a.dom,
                                        i = a.hooks,
                                        d = i.get,
                                        s = i.block;
                                    r.detectNamespace(n);
                                    var c;
                                    a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r), this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0), this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                                    var o = r.createMorphAt(r.childAt(c, [0]), 0, 0);
                                    return s(a, o, t, "link-to", ["venue", d(a, t, "foursquareVenueIdStr")], {}, e, null), c
                                }
                            }
                        }();
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null,
                        hasRendered: !1,
                        build: function (e) {
                            var t = e.createDocumentFragment(),
                                a = e.createTextNode("      ");
                            e.appendChild(t, a);
                            var a = e.createComment("");
                            e.appendChild(t, a);
                            var a = e.createTextNode("\n      ");
                            e.appendChild(t, a);
                            var a = e.createComment("");
                            e.appendChild(t, a);
                            var a = e.createTextNode("\n      ");
                            e.appendChild(t, a);
                            var a = e.createComment("");
                            e.appendChild(t, a);
                            var a = e.createTextNode("\n");
                            return e.appendChild(t, a), t
                        },
                        render: function (n, r, i) {
                            var d = r.dom,
                                s = r.hooks,
                                c = s.get,
                                o = s.block;
                            d.detectNamespace(i);
                            var l;
                            r.useFragmentCache && d.canClone ? (null === this.cachedFragment && (l = this.build(d), this.hasRendered ? this.cachedFragment = l : this.hasRendered = !0), this.cachedFragment && (l = d.cloneNode(this.cachedFragment, !0))) : l = this.build(d);
                            var h = d.createMorphAt(l, 1, 1, i),
                                u = d.createMorphAt(l, 3, 3, i),
                                p = d.createMorphAt(l, 5, 5, i);
                            return o(r, h, n, "if", [c(r, n, "tag")], {}, e, null), o(r, u, n, "if", [c(r, n, "userIdStr")], {}, t, null), o(r, p, n, "if", [c(r, n, "venueName")], {}, a, null), l
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createComment("");
                        return e.appendChild(t, a), t
                    },
                    render: function (t, a, n) {
                        var r = a.dom,
                            i = a.hooks,
                            d = i.get,
                            s = i.block;
                        r.detectNamespace(n);
                        var c;
                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r), this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0), this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                        var o = r.createMorphAt(c, 0, 0, n);
                        return r.insertBoundary(c, null), r.insertBoundary(c, 0), s(a, o, t, "each", [d(a, t, "items")], {}, e, null), c
                    }
                }
            }(),
            t = function () {
                var e = function () {
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createElement("span");
                                return e.setAttribute(a, "class", "icon-tag"), e.appendChild(t, a), t
                            },
                            render: function (e, t, a) {
                                var n = t.dom;
                                n.detectNamespace(a);
                                var r;
                                return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n), this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0), this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n), r
                            }
                        }
                    }(),
                    t = function () {
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createElement("span");
                                return e.setAttribute(a, "class", "icon-profile"), e.appendChild(t, a), t
                            },
                            render: function (e, t, a) {
                                var n = t.dom;
                                n.detectNamespace(a);
                                var r;
                                return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n), this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0), this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n), r
                            }
                        }
                    }(),
                    a = function () {
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createElement("span");
                                return e.setAttribute(a, "class", "icon-venue"), e.appendChild(t, a), t
                            },
                            render: function (e, t, a) {
                                var n = t.dom;
                                n.detectNamespace(a);
                                var r;
                                return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n), this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0), this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n), r
                            }
                        }
                    }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("    ");
                        e.appendChild(t, a);
                        var a = e.createElement("li");
                        e.setAttribute(a, "class", "empty-result");
                        var n = e.createTextNode("\n      ");
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        e.appendChild(a, n);
                        var n = e.createTextNode("\n      ");
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        e.appendChild(a, n);
                        var n = e.createTextNode("\n      ");
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        e.appendChild(a, n);
                        var n = e.createTextNode("\n      No results found.\n    ");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (n, r, i) {
                        var d = r.dom,
                            s = r.hooks,
                            c = s.get,
                            o = s.block;
                        d.detectNamespace(i);
                        var l;
                        r.useFragmentCache && d.canClone ? (null === this.cachedFragment && (l = this.build(d), this.hasRendered ? this.cachedFragment = l : this.hasRendered = !0), this.cachedFragment && (l = d.cloneNode(this.cachedFragment, !0))) : l = this.build(d);
                        var h = d.childAt(l, [1]),
                            u = d.createMorphAt(h, 1, 1),
                            p = d.createMorphAt(h, 3, 3),
                            m = d.createMorphAt(h, 5, 5);
                        return o(r, u, n, "if", [c(r, n, "tags")], {}, e, null), o(r, p, n, "if", [c(r, n, "users")], {}, t, null), o(r, m, n, "if", [c(r, n, "venues")], {}, a, null), l
                    }
                }
            }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createElement("ul"),
                    n = e.createTextNode("\n");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n), e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a), t
            },
            render: function (a, n, r) {
                var i = n.dom,
                    d = n.hooks,
                    s = d.element,
                    c = d.get,
                    o = d.block;
                i.detectNamespace(r);
                var l;
                n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (l = this.build(i), this.hasRendered ? this.cachedFragment = l : this.hasRendered = !0), this.cachedFragment && (l = i.cloneNode(this.cachedFragment, !0))) : l = this.build(i);
                var h = i.childAt(l, [0]),
                    u = i.createMorphAt(h, 1, 1);
                return s(n, h, a, "bind-attr", [], {
                    "class": "items::empty"
                }), o(n, u, a, "if", [c(n, a, "items")], {}, e, t), l
            }
        }
    }())
}), define("vine-ember/templates/search/index", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        var e = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("  ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.inline;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var s = n.createMorphAt(d, 1, 1, a);
                        return i(t, s, e, "partial", ["timelines/fullscreen"], {}), d
                    }
                }
            }(),
            t = function () {
                var e = function () {
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createElement("span");
                                return e.setAttribute(a, "class", "icon-fullscreen"), e.appendChild(t, a), t
                            },
                            render: function (e, t, a) {
                                var n = t.dom,
                                    r = t.hooks,
                                    i = r.element;
                                n.detectNamespace(a);
                                var d;
                                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                                var s = n.childAt(d, [0]);
                                return i(t, s, e, "action", ["openFullscreen"], {}), d
                            }
                        }
                    }(),
                    t = function () {
                        var e = function () {
                                return {
                                    isHTMLBars: !0,
                                    revision: "Ember@1.11.3",
                                    blockParams: 0,
                                    cachedFragment: null,
                                    hasRendered: !1,
                                    build: function (e) {
                                        var t = e.createDocumentFragment(),
                                            a = e.createComment("");
                                        return e.appendChild(t, a), t
                                    },
                                    render: function (e, t, a) {
                                        var n = t.dom,
                                            r = t.hooks,
                                            i = r.get,
                                            d = r.inline;
                                        n.detectNamespace(a);
                                        var s;
                                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                                        var c = n.createMorphAt(s, 0, 0, a);
                                        return n.insertBoundary(s, null), n.insertBoundary(s, 0), d(t, c, e, "render", ["search/modules/users", i(t, e, "moduleUsers")], {}), s
                                    }
                                }
                            }(),
                            t = function () {
                                return {
                                    isHTMLBars: !0,
                                    revision: "Ember@1.11.3",
                                    blockParams: 0,
                                    cachedFragment: null,
                                    hasRendered: !1,
                                    build: function (e) {
                                        var t = e.createDocumentFragment(),
                                            a = e.createComment("");
                                        return e.appendChild(t, a), t
                                    },
                                    render: function (e, t, a) {
                                        var n = t.dom,
                                            r = t.hooks,
                                            i = r.get,
                                            d = r.inline;
                                        n.detectNamespace(a);
                                        var s;
                                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                                        var c = n.createMorphAt(s, 0, 0, a);
                                        return n.insertBoundary(s, null), n.insertBoundary(s, 0), d(t, c, e, "render", ["search/modules/tags", i(t, e, "moduleTags")], {}), s
                                    }
                                }
                            }(),
                            a = function () {
                                return {
                                    isHTMLBars: !0,
                                    revision: "Ember@1.11.3",
                                    blockParams: 0,
                                    cachedFragment: null,
                                    hasRendered: !1,
                                    build: function (e) {
                                        var t = e.createDocumentFragment(),
                                            a = e.createComment("");
                                        return e.appendChild(t, a), t
                                    },
                                    render: function (e, t, a) {
                                        var n = t.dom,
                                            r = t.hooks,
                                            i = r.get,
                                            d = r.inline;
                                        n.detectNamespace(a);
                                        var s;
                                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                                        var c = n.createMorphAt(s, 0, 0, a);
                                        return n.insertBoundary(s, null), n.insertBoundary(s, 0), d(t, c, e, "render", ["search/modules/venues", i(t, e, "moduleVenues")], {}), s
                                    }
                                }
                            }();
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createTextNode("    ");
                                e.appendChild(t, a);
                                var a = e.createElement("section");
                                e.setAttribute(a, "id", "search-sidebar");
                                var n = e.createTextNode("\n      ");
                                e.appendChild(a, n);
                                var n = e.createComment("");
                                e.appendChild(a, n);
                                var n = e.createTextNode("\n      ");
                                e.appendChild(a, n);
                                var n = e.createComment("");
                                e.appendChild(a, n);
                                var n = e.createTextNode("\n      ");
                                e.appendChild(a, n);
                                var n = e.createComment("");
                                e.appendChild(a, n);
                                var n = e.createTextNode("\n    ");
                                e.appendChild(a, n), e.appendChild(t, a);
                                var a = e.createTextNode("\n");
                                return e.appendChild(t, a), t
                            },
                            render: function (n, r, i) {
                                var d = r.dom,
                                    s = r.hooks,
                                    c = s.get,
                                    o = s.block;
                                d.detectNamespace(i);
                                var l;
                                r.useFragmentCache && d.canClone ? (null === this.cachedFragment && (l = this.build(d), this.hasRendered ? this.cachedFragment = l : this.hasRendered = !0), this.cachedFragment && (l = d.cloneNode(this.cachedFragment, !0))) : l = this.build(d);
                                var h = d.childAt(l, [1]),
                                    u = d.createMorphAt(h, 1, 1),
                                    p = d.createMorphAt(h, 3, 3),
                                    m = d.createMorphAt(h, 5, 5);
                                return o(r, u, n, "if", [c(r, n, "moduleUsers")], {}, e, null), o(r, p, n, "if", [c(r, n, "moduleTags")], {}, t, null), o(r, m, n, "if", [c(r, n, "moduleVenues")], {}, a, null), l
                            }
                        }
                    }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("  ");
                        e.appendChild(t, a);
                        var a = e.createElement("h3");
                        e.setAttribute(a, "class", "post-results");
                        var n = e.createTextNode("\n    ");
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        e.appendChild(a, n);
                        var n = e.createTextNode(" results for ");
                        e.appendChild(a, n);
                        var n = e.createElement("strong"),
                            r = e.createComment("");
                        e.appendChild(n, r), e.appendChild(a, n);
                        var n = e.createTextNode("\n    ");
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        e.appendChild(a, n);
                        var n = e.createTextNode("\n  ");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n\n");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        return e.appendChild(t, a), t
                    },
                    render: function (a, n, r) {
                        var i = n.dom,
                            d = n.hooks,
                            s = d.get,
                            c = d.inline,
                            o = d.content,
                            l = d.block;
                        i.detectNamespace(r);
                        var h;
                        n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (h = this.build(i), this.hasRendered ? this.cachedFragment = h : this.hasRendered = !0), this.cachedFragment && (h = i.cloneNode(this.cachedFragment, !0))) : h = this.build(i);
                        var u = i.childAt(h, [1]),
                            p = i.createMorphAt(u, 1, 1),
                            m = i.createMorphAt(i.childAt(u, [3]), 0, 0),
                            v = i.createMorphAt(u, 5, 5),
                            g = i.createMorphAt(h, 3, 3, r);
                        return i.insertBoundary(h, null), c(n, p, a, "format-count", [s(n, a, "pagination.count")], {}), o(n, m, a, "params.query"), l(n, v, a, "if", [s(n, a, "fullscreenAvailable")], {}, e, null), l(n, g, a, "view", ["search/posts"], {}, t, null), h
                    }
                }
            }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createComment("");
                return e.appendChild(t, a), t
            },
            render: function (a, n, r) {
                var i = n.dom,
                    d = n.hooks,
                    s = d.get,
                    c = d.block;
                i.detectNamespace(r);
                var o;
                n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (o = this.build(i), this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0), this.cachedFragment && (o = i.cloneNode(this.cachedFragment, !0))) : o = this.build(i);
                var l = i.createMorphAt(o, 0, 0, r);
                return i.insertBoundary(o, null), i.insertBoundary(o, 0), c(n, l, a, "if", [s(n, a, "isTvMode")], {}, e, t), o
            }
        }
    }())
}), define("vine-ember/templates/search/modules/tags", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        var e = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("    ");
                        e.appendChild(t, a);
                        var a = e.createElement("h3");
                        e.setAttribute(a, "class", "no-results");
                        var n = e.createTextNode('No results for "');
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        e.appendChild(a, n);
                        var n = e.createTextNode('"');
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.content;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var s = n.createMorphAt(n.childAt(d, [1]), 1, 1);
                        return i(t, s, e, "query"), d
                    }
                }
            }(),
            t = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createComment("");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.get,
                            d = r.inline;
                        n.detectNamespace(a);
                        var s;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                        var c = n.createMorphAt(s, 0, 0, a);
                        return n.insertBoundary(s, null), n.insertBoundary(s, 0), d(t, c, e, "tv-link", [], {
                            route: "tag",
                            routeParam: i(t, e, "tag"),
                            text: i(t, e, "hashtag")
                        }), s
                    }
                }
            }(),
            a = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("    ");
                        e.appendChild(t, a);
                        var a = e.createElement("h3");
                        e.setAttribute(a, "class", "module-pagination");
                        var n = e.createTextNode("Load more...");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.element;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var s = n.childAt(d, [1]);
                        return i(t, s, e, "action", ["nextPage"], {}), d
                    }
                }
            }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createElement("div"),
                    n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("button");
                e.setAttribute(n, "class", "count small");
                var r = e.createComment("");
                e.appendChild(n, r), e.appendChild(a, n);
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("h4"),
                    r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("span");
                e.setAttribute(r, "class", "icon-tag"), e.appendChild(n, r);
                var r = e.createTextNode("Tags\n  ");
                e.appendChild(n, r), e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createTextNode("  ");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n), e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a), t
            },
            render: function (n, r, i) {
                var d = r.dom,
                    s = r.hooks,
                    c = s.element,
                    o = s.get,
                    l = s.inline,
                    h = s.block;
                d.detectNamespace(i);
                var u;
                r.useFragmentCache && d.canClone ? (null === this.cachedFragment && (u = this.build(d), this.hasRendered ? this.cachedFragment = u : this.hasRendered = !0), this.cachedFragment && (u = d.cloneNode(this.cachedFragment, !0))) : u = this.build(d);
                var p = d.childAt(u, [0]),
                    m = d.createMorphAt(d.childAt(p, [1]), 0, 0),
                    v = d.createMorphAt(p, 5, 5),
                    g = d.createMorphAt(p, 7, 7),
                    b = d.createMorphAt(p, 9, 9);
                return c(r, p, n, "bind-attr", [], {
                    "class": ":module-container pageClass"
                }), l(r, m, n, "format-count", [o(r, n, "pagination.count")], {}), h(r, v, n, "if", [o(r, n, "isEmpty")], {}, e, null), h(r, g, n, "each", [o(r, n, "posts")], {}, t, null), h(r, b, n, "if", [o(r, n, "pagination.nextPage")], {}, a, null), u
            }
        }
    }())
}), define("vine-ember/templates/search/modules/users", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        var e = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("    ");
                        e.appendChild(t, a);
                        var a = e.createElement("h3");
                        e.setAttribute(a, "class", "no-results");
                        var n = e.createTextNode('No results for "');
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        e.appendChild(a, n);
                        var n = e.createTextNode('"');
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.content;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var s = n.createMorphAt(n.childAt(d, [1]), 1, 1);
                        return i(t, s, e, "query"), d
                    }
                }
            }(),
            t = function () {
                var e = function () {
                    var e = function () {
                            return {
                                isHTMLBars: !0,
                                revision: "Ember@1.11.3",
                                blockParams: 0,
                                cachedFragment: null,
                                hasRendered: !1,
                                build: function (e) {
                                    var t = e.createDocumentFragment(),
                                        a = e.createTextNode("          ");
                                    e.appendChild(t, a);
                                    var a = e.createComment("");
                                    e.appendChild(t, a);
                                    var a = e.createTextNode("\n");
                                    return e.appendChild(t, a), t
                                },
                                render: function (e, t, a) {
                                    var n = t.dom,
                                        r = t.hooks,
                                        i = r.get,
                                        d = r.inline;
                                    n.detectNamespace(a);
                                    var s;
                                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                                    var c = n.createMorphAt(s, 1, 1, a);
                                    return d(t, c, e, "secure-img", [], {
                                        src: i(t, e, "avatarUrl"),
                                        "class": "avatar"
                                    }), s
                                }
                            }
                        }(),
                        t = function () {
                            return {
                                isHTMLBars: !0,
                                revision: "Ember@1.11.3",
                                blockParams: 0,
                                cachedFragment: null,
                                hasRendered: !1,
                                build: function (e) {
                                    var t = e.createDocumentFragment(),
                                        a = e.createElement("span");
                                    return e.setAttribute(a, "class", "icon-verified"), e.appendChild(t, a), t
                                },
                                render: function (e, t, a) {
                                    var n = t.dom;
                                    n.detectNamespace(a);
                                    var r;
                                    return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n), this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0), this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n), r
                                }
                            }
                        }();
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null,
                        hasRendered: !1,
                        build: function (e) {
                            var t = e.createDocumentFragment(),
                                a = e.createComment("");
                            e.appendChild(t, a);
                            var a = e.createTextNode("        ");
                            e.appendChild(t, a);
                            var a = e.createComment("");
                            e.appendChild(t, a);
                            var a = e.createComment("");
                            e.appendChild(t, a);
                            var a = e.createTextNode("\n");
                            return e.appendChild(t, a), t
                        },
                        render: function (a, n, r) {
                            var i = n.dom,
                                d = n.hooks,
                                s = d.get,
                                c = d.block,
                                o = d.content;
                            i.detectNamespace(r);
                            var l;
                            n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (l = this.build(i), this.hasRendered ? this.cachedFragment = l : this.hasRendered = !0), this.cachedFragment && (l = i.cloneNode(this.cachedFragment, !0))) : l = this.build(i);
                            var h = i.createMorphAt(l, 0, 0, r),
                                u = i.createMorphAt(l, 2, 2, r),
                                p = i.createMorphAt(l, 3, 3, r);
                            return i.insertBoundary(l, 0), c(n, h, a, "user-hover", [], {
                                color: s(n, a, "backgroundColor"),
                                borderWidth: 2
                            }, e, null), o(n, u, a, "username"), c(n, p, a, "if", [s(n, a, "verified")], {}, t, null), l
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("    ");
                        e.appendChild(t, a);
                        var a = e.createElement("h3"),
                            n = e.createTextNode("\n      ");
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        e.appendChild(a, n);
                        var n = e.createTextNode("\n");
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        e.appendChild(a, n);
                        var n = e.createTextNode("    ");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (t, a, n) {
                        var r = a.dom,
                            i = a.hooks,
                            d = i.get,
                            s = i.inline,
                            c = i.block;
                        r.detectNamespace(n);
                        var o;
                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (o = this.build(r), this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0), this.cachedFragment && (o = r.cloneNode(this.cachedFragment, !0))) : o = this.build(r);
                        var l = r.childAt(o, [1]),
                            h = r.createMorphAt(l, 1, 1),
                            u = r.createMorphAt(l, 3, 3);
                        return s(a, h, t, "follow-button", [], {
                            user: d(a, t, "this")
                        }), c(a, u, t, "link-user", [], {
                            user: d(a, t, "this")
                        }, e, null), o
                    }
                }
            }(),
            a = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("    ");
                        e.appendChild(t, a);
                        var a = e.createElement("div");
                        e.setAttribute(a, "class", "module-pagination");
                        var n = e.createTextNode("Load more...");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.element;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var s = n.childAt(d, [1]);
                        return i(t, s, e, "action", ["nextPage"], {}), d
                    }
                }
            }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createElement("div"),
                    n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("button");
                e.setAttribute(n, "class", "count small");
                var r = e.createComment("");
                e.appendChild(n, r), e.appendChild(a, n);
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("h4"),
                    r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("span");
                e.setAttribute(r, "class", "icon-profile"), e.appendChild(n, r);
                var r = e.createTextNode("People\n  ");
                e.appendChild(n, r), e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n), e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a), t
            },
            render: function (n, r, i) {
                var d = r.dom,
                    s = r.hooks,
                    c = s.element,
                    o = s.get,
                    l = s.inline,
                    h = s.block;
                d.detectNamespace(i);
                var u;
                r.useFragmentCache && d.canClone ? (null === this.cachedFragment && (u = this.build(d), this.hasRendered ? this.cachedFragment = u : this.hasRendered = !0), this.cachedFragment && (u = d.cloneNode(this.cachedFragment, !0))) : u = this.build(d);
                var p = d.childAt(u, [0]),
                    m = d.createMorphAt(d.childAt(p, [1]), 0, 0),
                    v = d.createMorphAt(p, 5, 5),
                    g = d.createMorphAt(p, 6, 6),
                    b = d.createMorphAt(p, 7, 7);
                return c(r, p, n, "bind-attr", [], {
                    "class": ":module-container :users pageClass"
                }), l(r, m, n, "format-count", [o(r, n, "pagination.count")], {}), h(r, v, n, "if", [o(r, n, "isEmpty")], {}, e, null), h(r, g, n, "each", [o(r, n, "posts")], {}, t, null), h(r, b, n, "if", [o(r, n, "pagination.nextPage")], {}, a, null), u
            }
        }
    }())
}), define("vine-ember/templates/search/modules/venues", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        var e = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("    ");
                        e.appendChild(t, a);
                        var a = e.createElement("h3");
                        e.setAttribute(a, "class", "no-results");
                        var n = e.createTextNode('No results for "');
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        e.appendChild(a, n);
                        var n = e.createTextNode('"');
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.content;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var s = n.createMorphAt(n.childAt(d, [1]), 1, 1);
                        return i(t, s, e, "query"), d
                    }
                }
            }(),
            t = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("    ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.get,
                            d = r.inline;
                        n.detectNamespace(a);
                        var s;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                        var c = n.createMorphAt(s, 1, 1, a);
                        return d(t, c, e, "tv-link", [], {
                            route: "venue",
                            routeParam: i(t, e, "foursquareVenueId"),
                            text: i(t, e, "venueName")
                        }), s
                    }
                }
            }(),
            a = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("    ");
                        e.appendChild(t, a);
                        var a = e.createElement("h3");
                        e.setAttribute(a, "class", "module-pagination");
                        var n = e.createTextNode("Load more...");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.element;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var s = n.childAt(d, [1]);
                        return i(t, s, e, "action", ["nextPage"], {}), d
                    }
                }
            }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createElement("div"),
                    n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("button");
                e.setAttribute(n, "class", "count small");
                var r = e.createComment("");
                e.appendChild(n, r), e.appendChild(a, n);
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("h4"),
                    r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("span");
                e.setAttribute(r, "class", "icon-venue"), e.appendChild(n, r);
                var r = e.createTextNode("Locations\n  ");
                e.appendChild(n, r), e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n), e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a), t
            },
            render: function (n, r, i) {
                var d = r.dom,
                    s = r.hooks,
                    c = s.element,
                    o = s.get,
                    l = s.inline,
                    h = s.block;
                d.detectNamespace(i);
                var u;
                r.useFragmentCache && d.canClone ? (null === this.cachedFragment && (u = this.build(d), this.hasRendered ? this.cachedFragment = u : this.hasRendered = !0), this.cachedFragment && (u = d.cloneNode(this.cachedFragment, !0))) : u = this.build(d);
                var p = d.childAt(u, [0]),
                    m = d.createMorphAt(d.childAt(p, [1]), 0, 0),
                    v = d.createMorphAt(p, 5, 5),
                    g = d.createMorphAt(p, 6, 6),
                    b = d.createMorphAt(p, 7, 7);
                return c(r, p, n, "bind-attr", [], {
                    "class": ":module-container pageClass"
                }), l(r, m, n, "format-count", [o(r, n, "pagination.count")], {}), h(r, v, n, "if", [o(r, n, "isEmpty")], {}, e, null), h(r, g, n, "each", [o(r, n, "posts")], {}, t, null), h(r, b, n, "if", [o(r, n, "pagination.nextPage")], {}, a, null), u
            }
        }
    }())
}), define("vine-ember/templates/search/posts", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        var e = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("    ");
                        e.appendChild(t, a);
                        var a = e.createElement("div");
                        e.setAttribute(a, "class", "timeline-placeholder");
                        var n = e.createComment("");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.inline;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var s = n.createMorphAt(n.childAt(d, [1]), 0, 0);
                        return i(t, s, e, "partial", ["timelines/placeholders/empty"], {}), d
                    }
                }
            }(),
            t = function () {
                var e = function () {
                        var e = function () {
                            return {
                                isHTMLBars: !0,
                                revision: "Ember@1.11.3",
                                blockParams: 0,
                                cachedFragment: null,
                                hasRendered: !1,
                                build: function (e) {
                                    var t = e.createDocumentFragment(),
                                        a = e.createTextNode("        ");
                                    e.appendChild(t, a);
                                    var a = e.createComment("");
                                    e.appendChild(t, a);
                                    var a = e.createTextNode("\n");
                                    return e.appendChild(t, a), t
                                },
                                render: function (e, t, a) {
                                    var n = t.dom,
                                        r = t.hooks,
                                        i = r.inline;
                                    n.detectNamespace(a);
                                    var d;
                                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                                    var s = n.createMorphAt(d, 1, 1, a);
                                    return i(t, s, e, "view", ["post-mobile"], {}), d
                                }
                            }
                        }();
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createComment("");
                                return e.appendChild(t, a), t
                            },
                            render: function (t, a, n) {
                                var r = a.dom,
                                    i = a.hooks,
                                    d = i.block;
                                r.detectNamespace(n);
                                var s;
                                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                                var c = r.createMorphAt(s, 0, 0, n);
                                return r.insertBoundary(s, null), r.insertBoundary(s, 0), d(a, c, t, "each", [], {}, e, null), s
                            }
                        }
                    }(),
                    t = function () {
                        var e = function () {
                            return {
                                isHTMLBars: !0,
                                revision: "Ember@1.11.3",
                                blockParams: 0,
                                cachedFragment: null,
                                hasRendered: !1,
                                build: function (e) {
                                    var t = e.createDocumentFragment(),
                                        a = e.createTextNode("          ");
                                    e.appendChild(t, a);
                                    var a = e.createComment("");
                                    e.appendChild(t, a);
                                    var a = e.createTextNode("\n");
                                    return e.appendChild(t, a), t
                                },
                                render: function (e, t, a) {
                                    var n = t.dom,
                                        r = t.hooks,
                                        i = r.inline;
                                    n.detectNamespace(a);
                                    var d;
                                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n),
                                        this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                                    var s = n.createMorphAt(d, 1, 1, a);
                                    return i(t, s, e, "view", ["grid-post"], {}), d
                                }
                            }
                        }();
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createTextNode("      ");
                                e.appendChild(t, a);
                                var a = e.createElement("div");
                                e.setAttribute(a, "class", "grid-container clearfix");
                                var n = e.createTextNode("\n");
                                e.appendChild(a, n);
                                var n = e.createComment("");
                                e.appendChild(a, n);
                                var n = e.createTextNode("      ");
                                e.appendChild(a, n), e.appendChild(t, a);
                                var a = e.createTextNode("\n");
                                return e.appendChild(t, a), t
                            },
                            render: function (t, a, n) {
                                var r = a.dom,
                                    i = a.hooks,
                                    d = i.block;
                                r.detectNamespace(n);
                                var s;
                                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                                var c = r.createMorphAt(r.childAt(s, [1]), 1, 1);
                                return d(a, c, t, "each", [], {}, e, null), s
                            }
                        }
                    }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createComment("");
                        return e.appendChild(t, a), t
                    },
                    render: function (a, n, r) {
                        var i = n.dom,
                            d = n.hooks,
                            s = d.get,
                            c = d.block;
                        i.detectNamespace(r);
                        var o;
                        n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (o = this.build(i), this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0), this.cachedFragment && (o = i.cloneNode(this.cachedFragment, !0))) : o = this.build(i);
                        var l = i.createMorphAt(o, 0, 0, r);
                        return i.insertBoundary(o, null), i.insertBoundary(o, 0), c(n, l, a, "if", [s(n, a, "isMobile")], {}, e, t), o
                    }
                }
            }(),
            a = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("  ");
                        e.appendChild(t, a);
                        var a = e.createElement("div");
                        e.setAttribute(a, "class", "fullscreen");
                        var n = e.createTextNode("\n    ");
                        e.appendChild(a, n);
                        var n = e.createElement("h3"),
                            r = e.createTextNode("TV Mode");
                        e.appendChild(n, r), e.appendChild(a, n);
                        var n = e.createTextNode("\n    ");
                        e.appendChild(a, n);
                        var n = e.createElement("div");
                        e.setAttribute(n, "class", "icon-fullscreen"), e.appendChild(a, n);
                        var n = e.createTextNode("\n  ");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.element;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var s = n.childAt(d, [1]);
                        return i(t, s, e, "action", ["openFullscreen"], {}), d
                    }
                }
            }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createElement("div"),
                    n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n), e.appendChild(t, a);
                var a = e.createTextNode("\n\n");
                e.appendChild(t, a);
                var a = e.createComment("");
                return e.appendChild(t, a), t
            },
            render: function (n, r, i) {
                var d = r.dom,
                    s = r.hooks,
                    c = s.element,
                    o = s.content,
                    l = s.get,
                    h = s.block,
                    u = s.inline;
                d.detectNamespace(i);
                var p;
                r.useFragmentCache && d.canClone ? (null === this.cachedFragment && (p = this.build(d), this.hasRendered ? this.cachedFragment = p : this.hasRendered = !0), this.cachedFragment && (p = d.cloneNode(this.cachedFragment, !0))) : p = this.build(d);
                var m = d.childAt(p, [0]),
                    v = d.createMorphAt(m, 1, 1),
                    g = d.createMorphAt(m, 3, 3),
                    b = d.createMorphAt(m, 5, 5),
                    C = d.createMorphAt(p, 2, 2, i);
                return d.insertBoundary(p, null), c(r, m, n, "bind-attr", [], {
                    "class": ":posts-container :grid pagination.nextPage::no-pagination"
                }), o(r, v, n, "yield"), h(r, g, n, "if", [l(r, n, "isEmpty")], {}, e, t), u(r, b, n, "partial", ["pagination"], {}), h(r, C, n, "if", [l(r, n, "fullscreenAvailable")], {}, a, null), p
            }
        }
    }())
}), define("vine-ember/templates/search/tags", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        var e = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("        ");
                        e.appendChild(t, a);
                        var a = e.createElement("h3");
                        e.setAttribute(a, "class", "no-results");
                        var n = e.createTextNode('No results for "');
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        e.appendChild(a, n);
                        var n = e.createTextNode('"');
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.content;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var s = n.createMorphAt(n.childAt(d, [1]), 1, 1);
                        return i(t, s, e, "query"), d
                    }
                }
            }(),
            t = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createComment("");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.get,
                            d = r.inline;
                        n.detectNamespace(a);
                        var s;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                        var c = n.createMorphAt(s, 0, 0, a);
                        return n.insertBoundary(s, null), n.insertBoundary(s, 0), d(t, c, e, "tv-link", [], {
                            route: "tag",
                            routeParam: i(t, e, "tag"),
                            text: i(t, e, "hashtag")
                        }), s
                    }
                }
            }(),
            a = function () {
                var e = function () {
                    var e = function () {
                            return {
                                isHTMLBars: !0,
                                revision: "Ember@1.11.3",
                                blockParams: 0,
                                cachedFragment: null,
                                hasRendered: !1,
                                build: function (e) {
                                    var t = e.createDocumentFragment(),
                                        a = e.createTextNode("              ");
                                    e.appendChild(t, a);
                                    var a = e.createComment("");
                                    e.appendChild(t, a);
                                    var a = e.createTextNode("\n              ");
                                    e.appendChild(t, a);
                                    var a = e.createElement("span");
                                    e.setAttribute(a, "class", "icon-fullscreen"), e.appendChild(t, a);
                                    var a = e.createTextNode("\n");
                                    return e.appendChild(t, a), t
                                },
                                render: function (e, t, a) {
                                    var n = t.dom,
                                        r = t.hooks,
                                        i = r.get,
                                        d = r.inline;
                                    n.detectNamespace(a);
                                    var s;
                                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                                    var c = n.createMorphAt(s, 1, 1, a);
                                    return d(t, c, e, "max-count", [i(t, e, "pagination.count")], {
                                        max: 499,
                                        display: 500,
                                        unit: "Post"
                                    }), s
                                }
                            }
                        }(),
                        t = function () {
                            return {
                                isHTMLBars: !0,
                                revision: "Ember@1.11.3",
                                blockParams: 0,
                                cachedFragment: null,
                                hasRendered: !1,
                                build: function (e) {
                                    var t = e.createDocumentFragment(),
                                        a = e.createTextNode("              ");
                                    e.appendChild(t, a);
                                    var a = e.createElement("span");
                                    e.setAttribute(a, "class", "icon-tag"), e.appendChild(t, a);
                                    var a = e.createComment("");
                                    e.appendChild(t, a);
                                    var a = e.createTextNode("\n");
                                    return e.appendChild(t, a), t
                                },
                                render: function (e, t, a) {
                                    var n = t.dom,
                                        r = t.hooks,
                                        i = r.content;
                                    n.detectNamespace(a);
                                    var d;
                                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                                    var s = n.createMorphAt(d, 2, 2, a);
                                    return i(t, s, e, "tag"), d
                                }
                            }
                        }(),
                        a = function () {
                            var e = function () {
                                return {
                                    isHTMLBars: !0,
                                    revision: "Ember@1.11.3",
                                    blockParams: 0,
                                    cachedFragment: null,
                                    hasRendered: !1,
                                    build: function (e) {
                                        var t = e.createDocumentFragment(),
                                            a = e.createComment("");
                                        return e.appendChild(t, a), t
                                    },
                                    render: function (e, t, a) {
                                        var n = t.dom,
                                            r = t.hooks,
                                            i = r.get,
                                            d = r.inline;
                                        n.detectNamespace(a);
                                        var s;
                                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                                        var c = n.createMorphAt(s, 0, 0, a);
                                        return n.insertBoundary(s, null), n.insertBoundary(s, 0), d(t, c, e, "mouseover-video", [], {
                                            post: i(t, e, "this")
                                        }), s
                                    }
                                }
                            }();
                            return {
                                isHTMLBars: !0,
                                revision: "Ember@1.11.3",
                                blockParams: 0,
                                cachedFragment: null,
                                hasRendered: !1,
                                build: function (e) {
                                    var t = e.createDocumentFragment(),
                                        a = e.createElement("div");
                                    e.setAttribute(a, "class", "row");
                                    var n = e.createTextNode("\n                ");
                                    e.appendChild(a, n);
                                    var n = e.createComment("");
                                    e.appendChild(a, n);
                                    var n = e.createTextNode("\n              ");
                                    return e.appendChild(a, n), e.appendChild(t, a), t
                                },
                                render: function (t, a, n) {
                                    var r = a.dom,
                                        i = a.hooks,
                                        d = i.block;
                                    r.detectNamespace(n);
                                    var s;
                                    a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                                    var c = r.createMorphAt(r.childAt(s, [0]), 1, 1);
                                    return d(a, c, t, "each", [], {
                                        itemController: "post"
                                    }, e, null), s
                                }
                            }
                        }();
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null,
                        hasRendered: !1,
                        build: function (e) {
                            var t = e.createDocumentFragment(),
                                a = e.createTextNode("          ");
                            e.appendChild(t, a);
                            var a = e.createElement("h5"),
                                n = e.createTextNode("\n");
                            e.appendChild(a, n);
                            var n = e.createComment("");
                            e.appendChild(a, n);
                            var n = e.createTextNode("          ");
                            e.appendChild(a, n), e.appendChild(t, a);
                            var a = e.createTextNode("\n          ");
                            e.appendChild(t, a);
                            var a = e.createElement("h3"),
                                n = e.createTextNode("\n");
                            e.appendChild(a, n);
                            var n = e.createComment("");
                            e.appendChild(a, n);
                            var n = e.createTextNode("          ");
                            e.appendChild(a, n), e.appendChild(t, a);
                            var a = e.createTextNode("\n          ");
                            e.appendChild(t, a);
                            var a = e.createElement("article"),
                                n = e.createTextNode("\n");
                            e.appendChild(a, n);
                            var n = e.createComment("");
                            e.appendChild(a, n);
                            var n = e.createTextNode("          ");
                            e.appendChild(a, n), e.appendChild(t, a);
                            var a = e.createTextNode("\n");
                            return e.appendChild(t, a), t
                        },
                        render: function (n, r, i) {
                            var d = r.dom,
                                s = r.hooks,
                                c = s.subexpr,
                                o = s.get,
                                l = s.block;
                            d.detectNamespace(i);
                            var h;
                            r.useFragmentCache && d.canClone ? (null === this.cachedFragment && (h = this.build(d), this.hasRendered ? this.cachedFragment = h : this.hasRendered = !0), this.cachedFragment && (h = d.cloneNode(this.cachedFragment, !0))) : h = this.build(d);
                            var u = d.createMorphAt(d.childAt(h, [1]), 1, 1),
                                p = d.createMorphAt(d.childAt(h, [3]), 1, 1),
                                m = d.createMorphAt(d.childAt(h, [5]), 1, 1);
                            return l(r, u, n, "link-to", ["tag", o(r, n, "tag"), c(r, n, "query-params", [], {
                                mode: "tv"
                            })], {}, e, null), l(r, p, n, "link-to", ["tag", o(r, n, "tag")], {}, t, null), l(r, m, n, "each", [o(r, n, "rows")], {}, a, null), h
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("      ");
                        e.appendChild(t, a);
                        var a = e.createElement("div");
                        e.setAttribute(a, "class", "timelines");
                        var n = e.createTextNode("\n");
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        e.appendChild(a, n);
                        var n = e.createTextNode("      ");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (t, a, n) {
                        var r = a.dom,
                            i = a.hooks,
                            d = i.get,
                            s = i.block;
                        r.detectNamespace(n);
                        var c;
                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r), this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0), this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                        var o = r.createMorphAt(r.childAt(c, [1]), 1, 1);
                        return s(a, o, t, "each", [d(a, t, "timelines")], {}, e, null), c
                    }
                }
            }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createElement("section");
                e.setAttribute(a, "id", "tags"), e.setAttribute(a, "class", "module-container");
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("div");
                e.setAttribute(n, "class", "clearfix");
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("div");
                e.setAttribute(r, "class", "tags-container");
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("button");
                e.setAttribute(i, "class", "count small");
                var d = e.createComment("");
                e.appendChild(i, d), e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("h4"),
                    d = e.createTextNode("\n        ");
                e.appendChild(i, d);
                var d = e.createElement("span");
                e.setAttribute(d, "class", "icon-tag"), e.appendChild(i, d);
                var d = e.createTextNode("Tags\n      ");
                e.appendChild(i, d), e.appendChild(r, i);
                var i = e.createTextNode("\n");
                e.appendChild(r, i);
                var i = e.createComment("");
                e.appendChild(r, i);
                var i = e.createTextNode("      ");
                e.appendChild(r, i);
                var i = e.createComment("");
                e.appendChild(r, i);
                var i = e.createTextNode("\n    ");
                e.appendChild(r, i), e.appendChild(n, r);
                var r = e.createTextNode("\n");
                e.appendChild(n, r);
                var r = e.createComment("");
                e.appendChild(n, r);
                var r = e.createTextNode("  ");
                e.appendChild(n, r), e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n), e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a), t
            },
            render: function (n, r, i) {
                var d = r.dom,
                    s = r.hooks,
                    c = s.get,
                    o = s.inline,
                    l = s.block;
                d.detectNamespace(i);
                var h;
                r.useFragmentCache && d.canClone ? (null === this.cachedFragment && (h = this.build(d), this.hasRendered ? this.cachedFragment = h : this.hasRendered = !0), this.cachedFragment && (h = d.cloneNode(this.cachedFragment, !0))) : h = this.build(d);
                var u = d.childAt(h, [0, 1]),
                    p = d.childAt(u, [1]),
                    m = d.createMorphAt(d.childAt(p, [1]), 0, 0),
                    v = d.createMorphAt(p, 5, 5),
                    g = d.createMorphAt(p, 7, 7),
                    b = d.createMorphAt(u, 3, 3);
                return o(r, m, n, "format-count", [c(r, n, "pagination.count")], {}), l(r, v, n, "unless", [c(r, n, "posts.length")], {}, e, null), l(r, g, n, "each", [c(r, n, "posts")], {}, t, null), l(r, b, n, "unless", [c(r, n, "isMobile")], {}, a, null), h
            }
        }
    }())
}), define("vine-ember/templates/search/users", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        var e = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("    ");
                        e.appendChild(t, a);
                        var a = e.createElement("h3");
                        e.setAttribute(a, "class", "no-results");
                        var n = e.createTextNode('No results for "');
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        e.appendChild(a, n);
                        var n = e.createTextNode('"');
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.content;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var s = n.createMorphAt(n.childAt(d, [1]), 1, 1);
                        return i(t, s, e, "params.query"), d
                    }
                }
            }(),
            t = function () {
                var e = function () {
                    var e = function () {
                        var e = function () {
                            return {
                                isHTMLBars: !0,
                                revision: "Ember@1.11.3",
                                blockParams: 0,
                                cachedFragment: null,
                                hasRendered: !1,
                                build: function (e) {
                                    var t = e.createDocumentFragment(),
                                        a = e.createElement("span");
                                    return e.setAttribute(a, "class", "icon-verified"), e.appendChild(t, a), t
                                },
                                render: function (e, t, a) {
                                    var n = t.dom;
                                    n.detectNamespace(a);
                                    var r;
                                    return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n), this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0), this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n), r
                                }
                            }
                        }();
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createTextNode("        ");
                                e.appendChild(t, a);
                                var a = e.createComment("");
                                e.appendChild(t, a);
                                var a = e.createTextNode("\n        ");
                                e.appendChild(t, a);
                                var a = e.createElement("h3"),
                                    n = e.createTextNode("\n          ");
                                e.appendChild(a, n);
                                var n = e.createComment("");
                                e.appendChild(a, n);
                                var n = e.createComment("");
                                e.appendChild(a, n);
                                var n = e.createTextNode("\n        ");
                                e.appendChild(a, n), e.appendChild(t, a);
                                var a = e.createTextNode("\n        ");
                                e.appendChild(t, a);
                                var a = e.createComment("");
                                e.appendChild(t, a);
                                var a = e.createTextNode("\n");
                                return e.appendChild(t, a), t
                            },
                            render: function (t, a, n) {
                                var r = a.dom,
                                    i = a.hooks,
                                    d = i.get,
                                    s = i.inline,
                                    c = i.content,
                                    o = i.block;
                                r.detectNamespace(n);
                                var l;
                                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (l = this.build(r), this.hasRendered ? this.cachedFragment = l : this.hasRendered = !0), this.cachedFragment && (l = r.cloneNode(this.cachedFragment, !0))) : l = this.build(r);
                                var h = r.childAt(l, [3]),
                                    u = r.createMorphAt(l, 1, 1, n),
                                    p = r.createMorphAt(h, 1, 1),
                                    m = r.createMorphAt(h, 2, 2),
                                    v = r.createMorphAt(l, 5, 5, n);
                                return s(a, u, t, "secure-img", [], {
                                    src: d(a, t, "avatarUrl"),
                                    "class": "avatar"
                                }), c(a, p, t, "username"), o(a, m, t, "if", [d(a, t, "verified")], {}, e, null), c(a, v, t, "location"), l
                            }
                        }
                    }();
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null,
                        hasRendered: !1,
                        build: function (e) {
                            var t = e.createDocumentFragment(),
                                a = e.createComment("");
                            return e.appendChild(t, a), t
                        },
                        render: function (t, a, n) {
                            var r = a.dom,
                                i = a.hooks,
                                d = i.get,
                                s = i.block;
                            r.detectNamespace(n);
                            var c;
                            a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r), this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0), this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                            var o = r.createMorphAt(c, 0, 0, n);
                            return r.insertBoundary(c, null), r.insertBoundary(c, 0), s(a, o, t, "link-user", [], {
                                user: d(a, t, "this")
                            }, e, null), c
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createComment("");
                        return e.appendChild(t, a), t
                    },
                    render: function (t, a, n) {
                        var r = a.dom,
                            i = a.hooks,
                            d = i.get,
                            s = i.block;
                        r.detectNamespace(n);
                        var c;
                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r), this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0), this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                        var o = r.createMorphAt(c, 0, 0, n);
                        return r.insertBoundary(c, null), r.insertBoundary(c, 0), s(a, o, t, "user-hover", [], {
                            color: d(a, t, "backgroundColor")
                        }, e, null), c
                    }
                }
            }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createElement("section");
                e.setAttribute(a, "id", "users"), e.setAttribute(a, "class", "module-container");
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("button");
                e.setAttribute(n, "class", "count small");
                var r = e.createComment("");
                e.appendChild(n, r), e.appendChild(a, n);
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("h4"),
                    r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("span");
                e.setAttribute(r, "class", "icon-profile"), e.appendChild(n, r);
                var r = e.createTextNode("People\n  ");
                e.appendChild(n, r), e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n), e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a), t
            },
            render: function (a, n, r) {
                var i = n.dom,
                    d = n.hooks,
                    s = d.get,
                    c = d.inline,
                    o = d.block;
                i.detectNamespace(r);
                var l;
                n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (l = this.build(i), this.hasRendered ? this.cachedFragment = l : this.hasRendered = !0), this.cachedFragment && (l = i.cloneNode(this.cachedFragment, !0))) : l = this.build(i);
                var h = i.childAt(l, [0]),
                    u = i.createMorphAt(i.childAt(h, [1]), 0, 0),
                    p = i.createMorphAt(h, 5, 5),
                    m = i.createMorphAt(h, 6, 6),
                    v = i.createMorphAt(h, 8, 8);
                return c(n, u, a, "format-count", [s(n, a, "pagination.count")], {}), o(n, p, a, "if", [s(n, a, "isEmpty")], {}, e, null), o(n, m, a, "each", [s(n, a, "posts")], {}, t, null), c(n, v, a, "partial", ["pagination"], {}), l
            }
        }
    }())
}), define("vine-ember/templates/search/venues", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        var e = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("        ");
                        e.appendChild(t, a);
                        var a = e.createElement("h3");
                        e.setAttribute(a, "class", "no-results");
                        var n = e.createTextNode('No results for "');
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        e.appendChild(a, n);
                        var n = e.createTextNode('"');
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.content;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var s = n.createMorphAt(n.childAt(d, [1]), 1, 1);
                        return i(t, s, e, "query"), d
                    }
                }
            }(),
            t = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createComment("");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.get,
                            d = r.inline;
                        n.detectNamespace(a);
                        var s;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                        var c = n.createMorphAt(s, 0, 0, a);
                        return n.insertBoundary(s, null), n.insertBoundary(s, 0), d(t, c, e, "tv-link", [], {
                            route: "venue",
                            routeParam: i(t, e, "foursquareVenueId"),
                            text: i(t, e, "venueName")
                        }), s
                    }
                }
            }(),
            a = function () {
                var e = function () {
                    var e = function () {
                            return {
                                isHTMLBars: !0,
                                revision: "Ember@1.11.3",
                                blockParams: 0,
                                cachedFragment: null,
                                hasRendered: !1,
                                build: function (e) {
                                    var t = e.createDocumentFragment(),
                                        a = e.createTextNode("              ");
                                    e.appendChild(t, a);
                                    var a = e.createComment("");
                                    e.appendChild(t, a);
                                    var a = e.createTextNode("\n              ");
                                    e.appendChild(t, a);
                                    var a = e.createElement("span");
                                    e.setAttribute(a, "class", "icon-fullscreen"), e.appendChild(t, a);
                                    var a = e.createTextNode("\n");
                                    return e.appendChild(t, a), t
                                },
                                render: function (e, t, a) {
                                    var n = t.dom,
                                        r = t.hooks,
                                        i = r.get,
                                        d = r.inline;
                                    n.detectNamespace(a);
                                    var s;
                                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                                    var c = n.createMorphAt(s, 1, 1, a);
                                    return d(t, c, e, "max-count", [i(t, e, "pagination.count")], {
                                        max: 499,
                                        display: 500,
                                        unit: "Post"
                                    }), s
                                }
                            }
                        }(),
                        t = function () {
                            return {
                                isHTMLBars: !0,
                                revision: "Ember@1.11.3",
                                blockParams: 0,
                                cachedFragment: null,
                                hasRendered: !1,
                                build: function (e) {
                                    var t = e.createDocumentFragment(),
                                        a = e.createTextNode("              ");
                                    e.appendChild(t, a);
                                    var a = e.createElement("span");
                                    e.setAttribute(a, "class", "icon-venue"), e.appendChild(t, a);
                                    var a = e.createComment("");
                                    e.appendChild(t, a);
                                    var a = e.createTextNode("\n");
                                    return e.appendChild(t, a), t
                                },
                                render: function (e, t, a) {
                                    var n = t.dom,
                                        r = t.hooks,
                                        i = r.content;
                                    n.detectNamespace(a);
                                    var d;
                                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                                    var s = n.createMorphAt(d, 2, 2, a);
                                    return i(t, s, e, "venueName"), d
                                }
                            }
                        }(),
                        a = function () {
                            var e = function () {
                                return {
                                    isHTMLBars: !0,
                                    revision: "Ember@1.11.3",
                                    blockParams: 0,
                                    cachedFragment: null,
                                    hasRendered: !1,
                                    build: function (e) {
                                        var t = e.createDocumentFragment(),
                                            a = e.createComment("");
                                        return e.appendChild(t, a), t
                                    },
                                    render: function (e, t, a) {
                                        var n = t.dom,
                                            r = t.hooks,
                                            i = r.get,
                                            d = r.inline;
                                        n.detectNamespace(a);
                                        var s;
                                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                                        var c = n.createMorphAt(s, 0, 0, a);
                                        return n.insertBoundary(s, null), n.insertBoundary(s, 0), d(t, c, e, "mouseover-video", [], {
                                            post: i(t, e, "this")
                                        }), s
                                    }
                                }
                            }();
                            return {
                                isHTMLBars: !0,
                                revision: "Ember@1.11.3",
                                blockParams: 0,
                                cachedFragment: null,
                                hasRendered: !1,
                                build: function (e) {
                                    var t = e.createDocumentFragment(),
                                        a = e.createElement("div");
                                    e.setAttribute(a, "class", "row");
                                    var n = e.createTextNode("\n                ");
                                    e.appendChild(a, n);
                                    var n = e.createComment("");
                                    e.appendChild(a, n);
                                    var n = e.createTextNode("\n              ");
                                    return e.appendChild(a, n), e.appendChild(t, a), t
                                },
                                render: function (t, a, n) {
                                    var r = a.dom,
                                        i = a.hooks,
                                        d = i.block;
                                    r.detectNamespace(n);
                                    var s;
                                    a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                                    var c = r.createMorphAt(r.childAt(s, [0]), 1, 1);
                                    return d(a, c, t, "each", [], {
                                        itemController: "post"
                                    }, e, null), s
                                }
                            }
                        }();
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null,
                        hasRendered: !1,
                        build: function (e) {
                            var t = e.createDocumentFragment(),
                                a = e.createTextNode("          ");
                            e.appendChild(t, a);
                            var a = e.createElement("h5"),
                                n = e.createTextNode("\n");
                            e.appendChild(a, n);
                            var n = e.createComment("");
                            e.appendChild(a, n);
                            var n = e.createTextNode("          ");
                            e.appendChild(a, n), e.appendChild(t, a);
                            var a = e.createTextNode("\n          ");
                            e.appendChild(t, a);
                            var a = e.createElement("h3"),
                                n = e.createTextNode("\n");
                            e.appendChild(a, n);
                            var n = e.createComment("");
                            e.appendChild(a, n);
                            var n = e.createTextNode("          ");
                            e.appendChild(a, n), e.appendChild(t, a);
                            var a = e.createTextNode("\n          ");
                            e.appendChild(t, a);
                            var a = e.createElement("article"),
                                n = e.createTextNode("\n");
                            e.appendChild(a, n);
                            var n = e.createComment("");
                            e.appendChild(a, n);
                            var n = e.createTextNode("          ");
                            e.appendChild(a, n), e.appendChild(t, a);
                            var a = e.createTextNode("\n");
                            return e.appendChild(t, a), t
                        },
                        render: function (n, r, i) {
                            var d = r.dom,
                                s = r.hooks,
                                c = s.subexpr,
                                o = s.get,
                                l = s.block;
                            d.detectNamespace(i);
                            var h;
                            r.useFragmentCache && d.canClone ? (null === this.cachedFragment && (h = this.build(d), this.hasRendered ? this.cachedFragment = h : this.hasRendered = !0), this.cachedFragment && (h = d.cloneNode(this.cachedFragment, !0))) : h = this.build(d);
                            var u = d.createMorphAt(d.childAt(h, [1]), 1, 1),
                                p = d.createMorphAt(d.childAt(h, [3]), 1, 1),
                                m = d.createMorphAt(d.childAt(h, [5]), 1, 1);
                            return l(r, u, n, "link-to", ["venue", o(r, n, "foursquareVenueId"), c(r, n, "query-params", [], {
                                mode: "tv"
                            })], {}, e, null), l(r, p, n, "link-to", ["venue", o(r, n, "foursquareVenueId")], {}, t, null), l(r, m, n, "each", [o(r, n, "rows")], {}, a, null), h
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("      ");
                        e.appendChild(t, a);
                        var a = e.createElement("div");
                        e.setAttribute(a, "class", "timelines");
                        var n = e.createTextNode("\n");
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        e.appendChild(a, n);
                        var n = e.createTextNode("      ");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (t, a, n) {
                        var r = a.dom,
                            i = a.hooks,
                            d = i.get,
                            s = i.block;
                        r.detectNamespace(n);
                        var c;
                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r), this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0), this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                        var o = r.createMorphAt(r.childAt(c, [1]), 1, 1);
                        return s(a, o, t, "each", [d(a, t, "timelines")], {}, e, null), c
                    }
                }
            }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createElement("section");
                e.setAttribute(a, "id", "venues"), e.setAttribute(a, "class", "module-container");
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("div");
                e.setAttribute(n, "class", "clearfix");
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("div");
                e.setAttribute(r, "class", "tags-container");
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("button");
                e.setAttribute(i, "class", "count small");
                var d = e.createComment("");
                e.appendChild(i, d), e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("h4"),
                    d = e.createTextNode("\n        ");
                e.appendChild(i, d);
                var d = e.createElement("span");
                e.setAttribute(d, "class", "icon-venue"), e.appendChild(i, d);
                var d = e.createTextNode("Locations\n      ");
                e.appendChild(i, d), e.appendChild(r, i);
                var i = e.createTextNode("\n");
                e.appendChild(r, i);
                var i = e.createComment("");
                e.appendChild(r, i);
                var i = e.createComment("");
                e.appendChild(r, i);
                var i = e.createTextNode("    ");
                e.appendChild(r, i), e.appendChild(n, r);
                var r = e.createTextNode("\n\n");
                e.appendChild(n, r);
                var r = e.createComment("");
                e.appendChild(n, r);
                var r = e.createTextNode("  ");
                e.appendChild(n, r), e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n), e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a), t
            },
            render: function (n, r, i) {
                var d = r.dom,
                    s = r.hooks,
                    c = s.get,
                    o = s.inline,
                    l = s.block;
                d.detectNamespace(i);
                var h;
                r.useFragmentCache && d.canClone ? (null === this.cachedFragment && (h = this.build(d), this.hasRendered ? this.cachedFragment = h : this.hasRendered = !0), this.cachedFragment && (h = d.cloneNode(this.cachedFragment, !0))) : h = this.build(d);
                var u = d.childAt(h, [0, 1]),
                    p = d.childAt(u, [1]),
                    m = d.createMorphAt(d.childAt(p, [1]), 0, 0),
                    v = d.createMorphAt(p, 5, 5),
                    g = d.createMorphAt(p, 6, 6),
                    b = d.createMorphAt(u, 3, 3);
                return o(r, m, n, "format-count", [c(r, n, "pagination.count")], {}), l(r, v, n, "unless", [c(r, n, "posts.length")], {}, e, null), l(r, g, n, "each", [c(r, n, "posts")], {}, t, null), l(r, b, n, "unless", [c(r, n, "isMobile")], {}, a, null), h
            }
        }
    }())
}), define("vine-ember/templates/settings", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        var e = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("    ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.get,
                            d = r.inline;
                        n.detectNamespace(a);
                        var s;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                        var c = n.createMorphAt(s, 1, 1, a);
                        return d(t, c, e, "secure-img", [], {
                            src: i(t, e, "currentUser.avatarUrl"),
                            "class": "avatar"
                        }), s
                    }
                }
            }(),
            t = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("        ");
                        e.appendChild(t, a);
                        var a = e.createElement("button");
                        e.setAttribute(a, "class", "small cancel");
                        var n = e.createTextNode("Cancel");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n        ");
                        e.appendChild(t, a);
                        var a = e.createElement("button");
                        e.setAttribute(a, "class", "small");
                        var n = e.createTextNode("Save");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.element,
                            d = r.get;
                        n.detectNamespace(a);
                        var s;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                        var c = n.childAt(s, [1]),
                            o = n.childAt(s, [3]);
                        return i(t, c, e, "action", ["toggleEditProfile"], {}), i(t, o, e, "action", [d(t, e, "saveProfile")], {}), s
                    }
                }
            }(),
            a = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("        ");
                        e.appendChild(t, a);
                        var a = e.createElement("button");
                        e.setAttribute(a, "class", "small edit");
                        var n = e.createTextNode("Edit");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.element;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var s = n.childAt(d, [1]);
                        return i(t, s, e, "action", ["toggleEditProfile"], {}), d
                    }
                }
            }(),
            n = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("    ");
                        e.appendChild(t, a);
                        var a = e.createElement("form");
                        e.setAttribute(a, "name", "profile"), e.setAttribute(a, "class", "profile-form");
                        var n = e.createTextNode("\n      ");
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        e.appendChild(a, n);
                        var n = e.createElement("br");
                        e.appendChild(a, n);
                        var n = e.createTextNode("\n      ");
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        e.appendChild(a, n);
                        var n = e.createElement("br");
                        e.appendChild(a, n);
                        var n = e.createTextNode("\n      ");
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        e.appendChild(a, n);
                        var n = e.createTextNode("\n    ");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.get,
                            d = r.element,
                            s = r.inline;
                        n.detectNamespace(a);
                        var c;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n), this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0), this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                        var o = n.childAt(c, [1]),
                            l = n.createMorphAt(o, 1, 1),
                            h = n.createMorphAt(o, 4, 4),
                            u = n.createMorphAt(o, 7, 7);
                        return d(t, o, e, "action", [i(t, e, "saveProfile")], {
                            on: "submit"
                        }), s(t, l, e, "input", [], {
                            value: i(t, e, "usernameText"),
                            name: "username",
                            placeholder: "Name",
                            "class": "username"
                        }), s(t, h, e, "textarea", [], {
                            value: i(t, e, "descriptionText"),
                            name: "description",
                            placeholder: "Description"
                        }), s(t, u, e, "input", [], {
                            value: i(t, e, "locationText"),
                            name: "location",
                            placeholder: "Location"
                        }), c
                    }
                }
            }(),
            r = function () {
                var e = function () {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null,
                        hasRendered: !1,
                        build: function (e) {
                            var t = e.createDocumentFragment(),
                                a = e.createElement("br");
                            e.appendChild(t, a);
                            var a = e.createComment("");
                            return e.appendChild(t, a), t
                        },
                        render: function (e, t, a) {
                            var n = t.dom,
                                r = t.hooks,
                                i = r.get,
                                d = r.inline;
                            n.detectNamespace(a);
                            var s;
                            t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                            var c = n.createMorphAt(s, 1, 1, a);
                            return n.insertBoundary(s, null), d(t, c, e, "replace-emoji", [i(t, e, "currentUser.location")], {}), s
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("    ");
                        e.appendChild(t, a);
                        var a = e.createElement("h2");
                        e.setAttribute(a, "class", "username");
                        var n = e.createElement("strong"),
                            r = e.createComment("");
                        e.appendChild(n, r), e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n    ");
                        e.appendChild(t, a);
                        var a = e.createElement("h5");
                        e.setAttribute(a, "class", "description");
                        var n = e.createTextNode("\n      ");
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        e.appendChild(a, n);
                        var n = e.createTextNode("\n      ");
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        e.appendChild(a, n);
                        var n = e.createTextNode("\n    ");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (t, a, n) {
                        var r = a.dom,
                            i = a.hooks,
                            d = i.get,
                            s = i.inline,
                            c = i.block;
                        r.detectNamespace(n);
                        var o;
                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (o = this.build(r), this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0), this.cachedFragment && (o = r.cloneNode(this.cachedFragment, !0))) : o = this.build(r);
                        var l = r.childAt(o, [3]),
                            h = r.createMorphAt(r.childAt(o, [1, 0]), 0, 0),
                            u = r.createMorphAt(l, 1, 1),
                            p = r.createMorphAt(l, 3, 3);
                        return s(a, h, t, "replace-emoji", [d(a, t, "currentUser.username")], {}), s(a, u, t, "replace-emoji", [d(a, t, "currentUser.description")], {}), c(a, p, t, "if", [d(a, t, "currentUser.location")], {}, e, null), o
                    }
                }
            }(),
            i = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("          ");
                        e.appendChild(t, a);
                        var a = e.createElement("form");
                        e.setAttribute(a, "name", "email");
                        var n = e.createTextNode("\n            ");
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        e.appendChild(a, n);
                        var n = e.createTextNode("\n            ");
                        e.appendChild(a, n);
                        var n = e.createElement("button");
                        e.setAttribute(n, "type", "button"), e.setAttribute(n, "class", "small cancel");
                        var r = e.createTextNode("Cancel");
                        e.appendChild(n, r), e.appendChild(a, n);
                        var n = e.createTextNode("\n            ");
                        e.appendChild(a, n);
                        var n = e.createElement("button");
                        e.setAttribute(n, "class", "small"), e.setAttribute(n, "type", "submit");
                        var r = e.createTextNode("Save");
                        e.appendChild(n, r), e.appendChild(a, n);
                        var n = e.createTextNode("\n          ");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n          ");
                        e.appendChild(t, a);
                        var a = e.createElement("h5");
                        e.setAttribute(a, "class", "error");
                        var n = e.createComment("");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.element,
                            d = r.get,
                            s = r.inline,
                            c = r.content;
                        n.detectNamespace(a);
                        var o;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (o = this.build(n), this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0), this.cachedFragment && (o = n.cloneNode(this.cachedFragment, !0))) : o = this.build(n);
                        var l = n.childAt(o, [1]),
                            h = n.childAt(l, [3]),
                            u = n.createMorphAt(l, 1, 1),
                            p = n.createMorphAt(n.childAt(o, [3]), 0, 0);
                        return i(t, l, e, "action", ["setEmail"], {
                            on: "submit"
                        }), s(t, u, e, "my-input", [], {
                            value: d(t, e, "emailText"),
                            name: "email",
                            email: !0,
                            placeholder: "Email"
                        }), i(t, h, e, "action", ["toggleEditEmail"], {}), c(t, p, e, "emailError"), o
                    }
                }
            }(),
            d = function () {
                var e = function () {
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createTextNode("              ");
                                e.appendChild(t, a);
                                var a = e.createComment("");
                                e.appendChild(t, a);
                                var a = e.createTextNode("\n");
                                return e.appendChild(t, a), t
                            },
                            render: function (e, t, a) {
                                var n = t.dom,
                                    r = t.hooks,
                                    i = r.content;
                                n.detectNamespace(a);
                                var d;
                                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                                var s = n.createMorphAt(d, 1, 1, a);
                                return i(t, s, e, "currentUser.email"), d
                            }
                        }
                    }(),
                    t = function () {
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createTextNode("              set email address\n");
                                return e.appendChild(t, a), t
                            },
                            render: function (e, t, a) {
                                var n = t.dom;
                                n.detectNamespace(a);
                                var r;
                                return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n), this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0), this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n), r
                            }
                        }
                    }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("          ");
                        e.appendChild(t, a);
                        var a = e.createElement("h4"),
                            n = e.createTextNode("\n");
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        e.appendChild(a, n);
                        var n = e.createTextNode("          ");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (a, n, r) {
                        var i = n.dom,
                            d = n.hooks,
                            s = d.element,
                            c = d.get,
                            o = d.block;
                        i.detectNamespace(r);
                        var l;
                        n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (l = this.build(i), this.hasRendered ? this.cachedFragment = l : this.hasRendered = !0), this.cachedFragment && (l = i.cloneNode(this.cachedFragment, !0))) : l = this.build(i);
                        var h = i.childAt(l, [1]),
                            u = i.createMorphAt(h, 1, 1);
                        return s(n, h, a, "action", ["toggleEditEmail"], {}), o(n, u, a, "if", [c(n, a, "currentUser.email")], {}, e, t), l
                    }
                }
            }(),
            s = function () {
                var e = function () {
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createTextNode("          ");
                                e.appendChild(t, a);
                                var a = e.createElement("h4"),
                                    n = e.createComment("");
                                e.appendChild(a, n), e.appendChild(t, a);
                                var a = e.createTextNode("\n");
                                return e.appendChild(t, a), t
                            },
                            render: function (e, t, a) {
                                var n = t.dom,
                                    r = t.hooks,
                                    i = r.content;
                                n.detectNamespace(a);
                                var d;
                                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                                var s = n.createMorphAt(n.childAt(d, [1]), 0, 0);
                                return i(t, s, e, "passwordReset"), d
                            }
                        }
                    }(),
                    t = function () {
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createTextNode("          ");
                                e.appendChild(t, a);
                                var a = e.createElement("button"),
                                    n = e.createTextNode("Reset Password");
                                e.appendChild(a, n), e.appendChild(t, a);
                                var a = e.createTextNode("\n");
                                return e.appendChild(t, a), t
                            },
                            render: function (e, t, a) {
                                var n = t.dom,
                                    r = t.hooks,
                                    i = r.element;
                                n.detectNamespace(a);
                                var d;
                                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                                var s = n.childAt(d, [1]);
                                return i(t, s, e, "action", ["resetPassword"], {}), d
                            }
                        }
                    }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("    ");
                        e.appendChild(t, a);
                        var a = e.createElement("div");
                        e.setAttribute(a, "class", "setting-row");
                        var n = e.createTextNode("\n      ");
                        e.appendChild(a, n);
                        var n = e.createElement("h4");
                        e.setAttribute(n, "class", "label");
                        var r = e.createTextNode("Password");
                        e.appendChild(n, r), e.appendChild(a, n);
                        var n = e.createTextNode("\n      ");
                        e.appendChild(a, n);
                        var n = e.createElement("span");
                        e.setAttribute(n, "class", "setting reset-password");
                        var r = e.createTextNode("\n");
                        e.appendChild(n, r);
                        var r = e.createComment("");
                        e.appendChild(n, r);
                        var r = e.createTextNode("      ");
                        e.appendChild(n, r), e.appendChild(a, n);
                        var n = e.createTextNode("\n    ");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (a, n, r) {
                        var i = n.dom,
                            d = n.hooks,
                            s = d.get,
                            c = d.block;
                        i.detectNamespace(r);
                        var o;
                        n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (o = this.build(i), this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0), this.cachedFragment && (o = i.cloneNode(this.cachedFragment, !0))) : o = this.build(i);
                        var l = i.createMorphAt(i.childAt(o, [1, 3]), 1, 1);
                        return c(n, l, a, "if", [s(n, a, "passwordReset")], {}, e, t), o
                    }
                }
            }(),
            c = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("On");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom;
                        n.detectNamespace(a);
                        var r;
                        return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n), this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0), this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n), r
                    }
                }
            }(),
            o = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("Off");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom;
                        n.detectNamespace(a);
                        var r;
                        return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n), this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0), this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n), r
                    }
                }
            }(),
            l = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createComment("");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.get,
                            d = r.inline;
                        n.detectNamespace(a);
                        var s;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                        var c = n.createMorphAt(s, 0, 0, a);
                        return n.insertBoundary(s, null), n.insertBoundary(s, 0), d(t, c, e, "profile-background", [], {
                            color: i(t, e, "color"),
                            isCurrentColor: i(t, e, "isCurrentColor")
                        }), s
                    }
                }
            }(),
            h = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("On");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom;
                        n.detectNamespace(a);
                        var r;
                        return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n), this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0), this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n), r
                    }
                }
            }(),
            u = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("Off");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom;
                        n.detectNamespace(a);
                        var r;
                        return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n), this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0), this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n), r
                    }
                }
            }(),
            p = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("          ");
                        e.appendChild(t, a);
                        var a = e.createElement("h4"),
                            n = e.createTextNode("\n            ");
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        e.appendChild(a, n);
                        var n = e.createTextNode("/");
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        e.appendChild(a, n);
                        var n = e.createTextNode("\n          ");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.content;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var s = n.childAt(d, [1]),
                            c = n.createMorphAt(s, 1, 1),
                            o = n.createMorphAt(s, 3, 3);
                        return i(t, c, e, "config.SECURE_HOSTNAME"), i(t, o, e, "currentUser.vanityUrl"), d
                    }
                }
            }(),
            m = function () {
                var e = function () {
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createTextNode("            ");
                                e.appendChild(t, a);
                                var a = e.createComment("");
                                e.appendChild(t, a);
                                var a = e.createTextNode("\n");
                                return e.appendChild(t, a), t
                            },
                            render: function (e, t, a) {
                                var n = t.dom,
                                    r = t.hooks,
                                    i = r.inline;
                                n.detectNamespace(a);
                                var d;
                                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                                var s = n.createMorphAt(d, 1, 1, a);
                                return i(t, s, e, "partial", ["custom-url/reserve-form"], {}), d
                            }
                        }
                    }(),
                    t = function () {
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createTextNode("            ");
                                e.appendChild(t, a);
                                var a = e.createElement("button");
                                e.setAttribute(a, "class", "set-url"), e.setAttribute(a, "type", "button");
                                var n = e.createTextNode("Set URL");
                                e.appendChild(a, n), e.appendChild(t, a);
                                var a = e.createTextNode("\n");
                                return e.appendChild(t, a), t
                            },
                            render: function (e, t, a) {
                                var n = t.dom,
                                    r = t.hooks,
                                    i = r.element;
                                n.detectNamespace(a);
                                var d;
                                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                                var s = n.childAt(d, [1]);
                                return i(t, s, e, "action", ["setUrl"], {}), d
                            }
                        }
                    }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createComment("");
                        return e.appendChild(t, a), t
                    },
                    render: function (a, n, r) {
                        var i = n.dom,
                            d = n.hooks,
                            s = d.get,
                            c = d.block;
                        i.detectNamespace(r);
                        var o;
                        n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (o = this.build(i), this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0), this.cachedFragment && (o = i.cloneNode(this.cachedFragment, !0))) : o = this.build(i);
                        var l = i.createMorphAt(o, 0, 0, r);
                        return i.insertBoundary(o, null), i.insertBoundary(o, 0), c(n, l, a, "if", [s(n, a, "reservingUrl")], {}, e, t), o
                    }
                }
            }(),
            v = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("      ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.inline;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var s = n.createMorphAt(d, 1, 1, a);
                        return i(t, s, e, "partial", ["custom-url/reserve-messages"], {}), d
                    }
                }
            }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createElement("div");
                e.setAttribute(a, "id", "settings-wrapper");
                var n = e.createTextNode("\n");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createTextNode("  ");
                e.appendChild(a, n);
                var n = e.createElement("div");
                e.setAttribute(n, "class", "username-row");
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("div");
                e.setAttribute(r, "class", "edit-profile-buttons");
                var i = e.createTextNode("\n");
                e.appendChild(r, i);
                var i = e.createComment("");
                e.appendChild(r, i);
                var i = e.createTextNode("    ");
                e.appendChild(r, i), e.appendChild(n, r);
                var r = e.createTextNode("\n  ");
                e.appendChild(n, r), e.appendChild(a, n);
                var n = e.createTextNode("\n\n");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createTextNode("\n\n  ");
                e.appendChild(a, n);
                var n = e.createElement("div");
                e.setAttribute(n, "id", "settings-container");
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("hr");
                e.appendChild(n, r);
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("div");
                e.setAttribute(r, "class", "setting-row");
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("h4");
                e.setAttribute(i, "class", "label");
                var d = e.createTextNode("Email");
                e.appendChild(i, d), e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("span");
                e.setAttribute(i, "class", "setting email");
                var d = e.createTextNode("\n");
                e.appendChild(i, d);
                var d = e.createComment("");
                e.appendChild(i, d);
                var d = e.createTextNode("      ");
                e.appendChild(i, d), e.appendChild(r, i);
                var i = e.createTextNode("\n    ");
                e.appendChild(r, i), e.appendChild(n, r);
                var r = e.createTextNode("\n");
                e.appendChild(n, r);
                var r = e.createComment("");
                e.appendChild(n, r);
                var r = e.createTextNode("    ");
                e.appendChild(n, r);
                var r = e.createElement("div");
                e.setAttribute(r, "class", "setting-row");
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("h4");
                e.setAttribute(i, "class", "label");
                var d = e.createTextNode("Posts are private");
                e.appendChild(i, d), e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("div");
                e.setAttribute(i, "class", "setting");
                var d = e.createTextNode("\n        ");
                e.appendChild(i, d);
                var d = e.createElement("div"),
                    s = e.createTextNode("\n          ");
                e.appendChild(d, s);
                var s = e.createComment("");
                e.appendChild(d, s);
                var s = e.createTextNode("\n          ");
                e.appendChild(d, s);
                var s = e.createElement("div");
                e.setAttribute(s, "class", "toggle"), e.appendChild(d, s);
                var s = e.createTextNode("\n        ");
                e.appendChild(d, s), e.appendChild(i, d);
                var d = e.createTextNode("\n      ");
                e.appendChild(i, d), e.appendChild(r, i);
                var i = e.createTextNode("\n    ");
                e.appendChild(r, i), e.appendChild(n, r);
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("div");
                e.setAttribute(r, "class", "setting-row");
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("h4");
                e.setAttribute(i, "class", "label");
                var d = e.createTextNode("Profile color");
                e.appendChild(i, d), e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("div");
                e.setAttribute(i, "class", "setting profile-background");
                var d = e.createTextNode("\n");
                e.appendChild(i, d);
                var d = e.createComment("");
                e.appendChild(i, d);
                var d = e.createTextNode("      ");
                e.appendChild(i, d), e.appendChild(r, i);
                var i = e.createTextNode("\n    ");
                e.appendChild(r, i), e.appendChild(n, r);
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("div");
                e.setAttribute(r, "class", "setting-row");
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("h4");
                e.setAttribute(i, "class", "label");
                var d = e.createTextNode("Hide Twitter Account");
                e.appendChild(i, d), e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("div");
                e.setAttribute(i, "class", "setting");
                var d = e.createTextNode("\n        ");
                e.appendChild(i, d);
                var d = e.createElement("div"),
                    s = e.createTextNode("\n          ");
                e.appendChild(d, s);
                var s = e.createComment("");
                e.appendChild(d, s);
                var s = e.createTextNode("\n          ");
                e.appendChild(d, s);
                var s = e.createElement("div");
                e.setAttribute(s, "class", "toggle"), e.appendChild(d, s);
                var s = e.createTextNode("\n        ");
                e.appendChild(d, s), e.appendChild(i, d);
                var d = e.createTextNode("\n      ");
                e.appendChild(i, d), e.appendChild(r, i);
                var i = e.createTextNode("\n    ");
                e.appendChild(r, i), e.appendChild(n, r);
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("div");
                e.setAttribute(r, "class", "setting-row");
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("h4");
                e.setAttribute(i, "class", "label");
                var d = e.createTextNode("Custom URL");
                e.appendChild(i, d), e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("div");
                e.setAttribute(i, "class", "setting custom-url");
                var d = e.createTextNode("\n");
                e.appendChild(i, d);
                var d = e.createComment("");
                e.appendChild(i, d);
                var d = e.createTextNode("      ");
                e.appendChild(i, d), e.appendChild(r, i);
                var i = e.createTextNode("\n    ");
                e.appendChild(r, i), e.appendChild(n, r);
                var r = e.createTextNode("\n\n");
                e.appendChild(n, r);
                var r = e.createComment("");
                e.appendChild(n, r);
                var r = e.createTextNode("  ");
                e.appendChild(n, r), e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n), e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a), t
            },
            render: function (g, b, C) {
                var f = b.dom,
                    F = b.hooks,
                    N = F.get,
                    T = F.block,
                    x = F.element;
                f.detectNamespace(C);
                var A;
                b.useFragmentCache && f.canClone ? (null === this.cachedFragment && (A = this.build(f), this.hasRendered ? this.cachedFragment = A : this.hasRendered = !0), this.cachedFragment && (A = f.cloneNode(this.cachedFragment, !0))) : A = this.build(f);
                var k = f.childAt(A, [0]),
                    E = f.childAt(k, [7]),
                    R = f.childAt(E, [7, 3, 1]),
                    M = f.childAt(E, [11, 3, 1]),
                    y = f.createMorphAt(k, 1, 1),
                    w = f.createMorphAt(f.childAt(k, [3, 1]), 1, 1),
                    B = f.createMorphAt(k, 5, 5),
                    P = f.createMorphAt(f.childAt(E, [3, 3]), 1, 1),
                    L = f.createMorphAt(E, 5, 5),
                    H = f.createMorphAt(R, 1, 1),
                    D = f.createMorphAt(f.childAt(E, [9, 3]), 1, 1),
                    S = f.createMorphAt(M, 1, 1),
                    _ = f.createMorphAt(f.childAt(E, [13, 3]), 1, 1),
                    I = f.createMorphAt(E, 15, 15);
                return T(b, y, g, "if", [N(b, g, "currentUser.avatarUrl")], {}, e, null), T(b, w, g, "if", [N(b, g, "editingProfile")], {}, t, a), T(b, B, g, "if", [N(b, g, "editingProfile")], {}, n, r), T(b, P, g, "if", [N(b, g, "editingEmail")], {}, i, d), T(b, L, g, "if", [N(b, g, "currentUser.email")], {}, s, null), x(b, R, g, "bind-attr", [], {
                    "class": ":switch currentUser.private:on:off"
                }), x(b, R, g, "action", ["togglePrivate"], {}), T(b, H, g, "if", [N(b, g, "currentUser.private")], {}, c, o), T(b, D, g, "each", [N(b, g, "profileColors")], {}, l, null), x(b, M, g, "bind-attr", [], {
                    "class": ":switch currentUser.hiddenTwitter:on:off"
                }), x(b, M, g, "action", ["toggleHiddenTwitter"], {}), T(b, S, g, "if", [N(b, g, "currentUser.hiddenTwitter")], {}, h, u), T(b, _, g, "if", [N(b, g, "currentUser.vanityUrl")], {}, p, m), T(b, I, g, "if", [N(b, g, "reservingUrl")], {}, v, null), A
            }
        }
    }())
}), define("vine-ember/templates/splash", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        var e = function () {
            var e = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("Posted by ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.content;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var s = n.createMorphAt(d, 1, 1, a);
                        return n.insertBoundary(d, null), i(t, s, e, "currentPost.username"), d
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null,
                hasRendered: !1,
                build: function (e) {
                    var t = e.createDocumentFragment(),
                        a = e.createTextNode("  ");
                    e.appendChild(t, a);
                    var a = e.createElement("div");
                    e.setAttribute(a, "class", "splash-attribution");
                    var n = e.createTextNode("\n    ");
                    e.appendChild(a, n);
                    var n = e.createComment("");
                    e.appendChild(a, n);
                    var n = e.createTextNode("\n  ");
                    e.appendChild(a, n), e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a), t
                },
                render: function (t, a, n) {
                    var r = a.dom,
                        i = a.hooks,
                        d = i.get,
                        s = i.block;
                    r.detectNamespace(n);
                    var c;
                    a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r), this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0), this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                    var o = r.createMorphAt(r.childAt(c, [1]), 1, 1);
                    return s(a, o, t, "link-user", [], {
                        user: d(a, t, "currentPost")
                    }, e, null), c
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createComment("");
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                e.appendChild(t, a);
                var a = e.createElement("div");
                e.setAttribute(a, "class", "video-container continuous"), e.appendChild(t, a);
                var a = e.createTextNode("\n");
                e.appendChild(t, a);
                var a = e.createElement("div");
                e.setAttribute(a, "id", "video-overlay"), e.appendChild(t, a);
                var a = e.createTextNode("\n\n");
                e.appendChild(t, a);
                var a = e.createElement("div");
                e.setAttribute(a, "id", "splash-container");
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("div");
                e.setAttribute(n, "class", "splash-content");
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("a");
                e.setAttribute(r, "href", "https://web.archive.org/web/20150701150124/http://get.vine.co");
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createComment("");
                e.appendChild(r, i);
                var i = e.createTextNode("\n    ");
                e.appendChild(r, i), e.appendChild(n, r);
                var r = e.createTextNode("\n\n    ");
                e.appendChild(n, r);
                var r = e.createElement("p");
                e.setAttribute(r, "class", "subtitle");
                var i = e.createTextNode("Explore a world of beautiful, looping videos.");
                e.appendChild(r, i), e.appendChild(n, r);
                var r = e.createTextNode("\n\n    ");
                e.appendChild(n, r);
                var r = e.createComment("");
                e.appendChild(n, r);
                var r = e.createTextNode("\n  ");
                e.appendChild(n, r), e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n), e.appendChild(t, a);
                var a = e.createTextNode("\n");
                e.appendChild(t, a);
                var a = e.createComment("");
                return e.appendChild(t, a), t
            },
            render: function (t, a, n) {
                var r = a.dom,
                    i = a.hooks,
                    d = i.inline,
                    s = i.get,
                    c = i.element,
                    o = i.content,
                    l = i.block;
                r.detectNamespace(n);
                var h;
                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (h = this.build(r), this.hasRendered ? this.cachedFragment = h : this.hasRendered = !0), this.cachedFragment && (h = r.cloneNode(this.cachedFragment, !0))) : h = this.build(r);
                var u = r.childAt(h, [2]),
                    p = r.childAt(h, [6, 1]),
                    m = r.createMorphAt(h, 0, 0, n),
                    v = r.createMorphAt(r.childAt(p, [1]), 1, 1),
                    g = r.createMorphAt(p, 5, 5),
                    b = r.createMorphAt(h, 8, 8, n);
                return r.insertBoundary(h, null), r.insertBoundary(h, 0), d(a, m, t, "render", ["splash/playing-vine"], {}), c(a, u, t, "bind-attr", [], {
                    style: s(a, t, "currentPost.backgroundImageStyle")
                }), d(a, v, t, "cdn-img", [], {
                    src: "images/vine_logo-07c1b523b663f8a47fa3b73af336589c.png",
                    width: "355",
                    height: "130",
                    "class": "logo-image"
                }), o(a, g, t, "download-buttons"), l(a, b, t, "if", [s(a, t, "currentPost")], {}, e, null), h
            }
        }
    }())
}), define("vine-ember/templates/time-and-location", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        var e = function () {
                var e = function () {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null,
                        hasRendered: !1,
                        build: function (e) {
                            var t = e.createDocumentFragment(),
                                a = e.createComment("");
                            return e.appendChild(t, a), t
                        },
                        render: function (e, t, a) {
                            var n = t.dom,
                                r = t.hooks,
                                i = r.get,
                                d = r.inline;
                            n.detectNamespace(a);
                            var s;
                            t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                            var c = n.createMorphAt(s, 0, 0, a);
                            return n.insertBoundary(s, null), n.insertBoundary(s, 0), d(t, c, e, "format-date", [i(t, e, "created")], {}), s
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("    ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (t, a, n) {
                        var r = a.dom,
                            i = a.hooks,
                            d = i.get,
                            s = i.block;
                        r.detectNamespace(n);
                        var c;
                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r), this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0), this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                        var o = r.createMorphAt(c, 1, 1, n);
                        return s(a, o, t, "link-to", ["permalink-post", d(a, t, "shortId")], {}, e, null), c
                    }
                }
            }(),
            t = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("    ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.get,
                            d = r.inline;
                        n.detectNamespace(a);
                        var s;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                        var c = n.createMorphAt(s, 1, 1, a);
                        return d(t, c, e, "format-date", [i(t, e, "created")], {}), s
                    }
                }
            }(),
            a = function () {
                var e = function () {
                        var e = function () {
                            return {
                                isHTMLBars: !0,
                                revision: "Ember@1.11.3",
                                blockParams: 0,
                                cachedFragment: null,
                                hasRendered: !1,
                                build: function (e) {
                                    var t = e.createDocumentFragment(),
                                        a = e.createComment("");
                                    return e.appendChild(t, a), t
                                },
                                render: function (e, t, a) {
                                    var n = t.dom,
                                        r = t.hooks,
                                        i = r.content;
                                    n.detectNamespace(a);
                                    var d;
                                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                                    var s = n.createMorphAt(d, 0, 0, a);
                                    return n.insertBoundary(d, null), n.insertBoundary(d, 0), i(t, s, e, "venueName"), d
                                }
                            }
                        }();
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createTextNode("      at ");
                                e.appendChild(t, a);
                                var a = e.createComment("");
                                e.appendChild(t, a);
                                var a = e.createTextNode("\n");
                                return e.appendChild(t, a), t
                            },
                            render: function (t, a, n) {
                                var r = a.dom,
                                    i = a.hooks,
                                    d = i.get,
                                    s = i.block;
                                r.detectNamespace(n);
                                var c;
                                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r), this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0), this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                                var o = r.createMorphAt(c, 1, 1, n);
                                return s(a, o, t, "link-to", ["venue", d(a, t, "foursquareVenueId")], {}, e, null), c
                            }
                        }
                    }(),
                    t = function () {
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createTextNode("      ");
                                e.appendChild(t, a);
                                var a = e.createComment("");
                                e.appendChild(t, a);
                                var a = e.createTextNode("\n");
                                return e.appendChild(t, a), t
                            },
                            render: function (e, t, a) {
                                var n = t.dom,
                                    r = t.hooks,
                                    i = r.content;
                                n.detectNamespace(a);
                                var d;
                                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                                var s = n.createMorphAt(d, 1, 1, a);
                                return i(t, s, e, "venueName"), d
                            }
                        }
                    }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("  ");
                        e.appendChild(t, a);
                        var a = e.createElement("span");
                        e.setAttribute(a, "class", "location");
                        var n = e.createTextNode("\n");
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        e.appendChild(a, n);
                        var n = e.createTextNode("  ");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (a, n, r) {
                        var i = n.dom,
                            d = n.hooks,
                            s = d.get,
                            c = d.block;
                        i.detectNamespace(r);
                        var o;
                        n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (o = this.build(i), this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0), this.cachedFragment && (o = i.cloneNode(this.cachedFragment, !0))) : o = this.build(i);
                        var l = i.createMorphAt(i.childAt(o, [1]), 1, 1);
                        return c(n, l, a, "if", [s(n, a, "foursquareVenueId")], {}, e, t), o
                    }
                }
            }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createElement("span");
                e.setAttribute(a, "class", "time");
                var n = e.createTextNode("\n");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n), e.appendChild(t, a);
                var a = e.createTextNode("\n");
                e.appendChild(t, a);
                var a = e.createComment("");
                return e.appendChild(t, a), t
            },
            render: function (n, r, i) {
                var d = r.dom,
                    s = r.hooks,
                    c = s.get,
                    o = s.block;
                d.detectNamespace(i);
                var l;
                r.useFragmentCache && d.canClone ? (null === this.cachedFragment && (l = this.build(d), this.hasRendered ? this.cachedFragment = l : this.hasRendered = !0), this.cachedFragment && (l = d.cloneNode(this.cachedFragment, !0))) : l = this.build(d);
                var h = d.createMorphAt(d.childAt(l, [0]), 1, 1),
                    u = d.createMorphAt(l, 2, 2, i);
                return d.insertBoundary(l, null), o(r, h, n, "if", [c(r, n, "shortId")], {}, e, t), o(r, u, n, "if", [c(r, n, "venueName")], {}, a, null), l
            }
        }
    }())
}), define("vine-ember/templates/timeline", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        var e = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createComment("");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.inline;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var s = n.createMorphAt(d, 0, 0, a);
                        return n.insertBoundary(d, null), n.insertBoundary(d, 0), i(t, s, e, "outlet", ["timelineHeader"], {}), d
                    }
                }
            }(),
            t = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("    ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.inline;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var s = n.createMorphAt(d, 1, 1, a);
                        return i(t, s, e, "partial", ["timelines/posts"], {}), d
                    }
                }
            }(),
            a = function () {
                var e = function () {
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createComment("");
                                return e.appendChild(t, a), t
                            },
                            render: function (e, t, a) {
                                var n = t.dom,
                                    r = t.hooks,
                                    i = r.inline;
                                n.detectNamespace(a);
                                var d;
                                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                                var s = n.createMorphAt(d, 0, 0, a);
                                return n.insertBoundary(d, null), n.insertBoundary(d, 0), i(t, s, e, "partial", ["timelines/posts"], {}), d
                            }
                        }
                    }(),
                    t = function () {
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createComment("");
                                return e.appendChild(t, a), t
                            },
                            render: function (e, t, a) {
                                var n = t.dom,
                                    r = t.hooks,
                                    i = r.inline;
                                n.detectNamespace(a);
                                var d;
                                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                                var s = n.createMorphAt(d, 0, 0, a);
                                return n.insertBoundary(d, null), n.insertBoundary(d, 0), i(t, s, e, "partial", ["timelines/fullscreen"], {}), d
                            }
                        }
                    }(),
                    a = function () {
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createComment("");
                                return e.appendChild(t, a), t
                            },
                            render: function (e, t, a) {
                                var n = t.dom,
                                    r = t.hooks,
                                    i = r.inline;
                                n.detectNamespace(a);
                                var d;
                                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                                var s = n.createMorphAt(d, 0, 0, a);
                                return n.insertBoundary(d, null), n.insertBoundary(d, 0), i(t, s, e, "partial", ["timelines/grid"], {}), d
                            }
                        }
                    }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("    ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n    ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n    ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (n, r, i) {
                        var d = r.dom,
                            s = r.hooks,
                            c = s.get,
                            o = s.block;
                        d.detectNamespace(i);
                        var l;
                        r.useFragmentCache && d.canClone ? (null === this.cachedFragment && (l = this.build(d), this.hasRendered ? this.cachedFragment = l : this.hasRendered = !0), this.cachedFragment && (l = d.cloneNode(this.cachedFragment, !0))) : l = this.build(d);
                        var h = d.createMorphAt(l, 1, 1, i),
                            u = d.createMorphAt(l, 3, 3, i),
                            p = d.createMorphAt(l, 5, 5, i);
                        return o(r, h, n, "if", [c(r, n, "isListMode")], {}, e, null), o(r, u, n, "if", [c(r, n, "isTvMode")], {}, t, null), o(r, p, n, "if", [c(r, n, "isGridMode")], {}, a, null), l
                    }
                }
            }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createComment("");
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                e.appendChild(t, a);
                var a = e.createComment("");
                e.appendChild(t, a);
                var a = e.createTextNode("\n\n");
                e.appendChild(t, a);
                var a = e.createElement("div"),
                    n = e.createTextNode("\n");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n), e.appendChild(t, a);
                var a = e.createTextNode("\n\n");
                e.appendChild(t, a);
                var a = e.createComment("");
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a), t
            },
            render: function (n, r, i) {
                var d = r.dom,
                    s = r.hooks,
                    c = s.inline,
                    o = s.get,
                    l = s.block,
                    h = s.element;
                d.detectNamespace(i);
                var u;
                r.useFragmentCache && d.canClone ? (null === this.cachedFragment && (u = this.build(d), this.hasRendered ? this.cachedFragment = u : this.hasRendered = !0), this.cachedFragment && (u = d.cloneNode(this.cachedFragment, !0))) : u = this.build(d);
                var p = d.childAt(u, [4]),
                    m = d.createMorphAt(u, 0, 0, i),
                    v = d.createMorphAt(u, 2, 2, i),
                    g = d.createMorphAt(p, 1, 1),
                    b = d.createMorphAt(u, 6, 6, i);
                return d.insertBoundary(u, 0), c(r, m, n, "outlet", ["customStyles"], {}), l(r, v, n, "unless", [o(r, n, "isMobile")], {}, e, null), h(r, p, n, "bind-attr", [], {
                    "class": ":timeline-content isTvMode:is-fullscreen"
                }), l(r, g, n, "if", [o(r, n, "isMobile")], {}, t, a), c(r, b, n, "outlet", ["timelineFooter"], {}), u
            }
        }
    }())
}), define("vine-ember/templates/timelines/custom-styles/channel", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        var e = function () {
            var e = function () {
                var e = function () {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null,
                        hasRendered: !1,
                        build: function (e) {
                            var t = e.createDocumentFragment(),
                                a = e.createTextNode("      .mobile .sidebar-color-block {\n        background-image: url(");
                            e.appendChild(t, a);
                            var a = e.createComment("");
                            e.appendChild(t, a);
                            var a = e.createTextNode(");\n      }\n");
                            return e.appendChild(t, a), t
                        },
                        render: function (e, t, a) {
                            var n = t.dom,
                                r = t.hooks,
                                i = r.content;
                            n.detectNamespace(a);
                            var d;
                            t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                            var s = n.createMorphAt(d, 1, 1, a);
                            return i(t, s, e, "backgroundImageUrl"), d
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("    #outer-wrapper.channel .post .post-engagement .action.like span:nth-of-type(2),\n    #outer-wrapper.channel .post .post-engagement .action.revine span:first-of-type,\n    .view-mode-toggles i,\n    .comments-container a,\n    .post-description a,\n    .post .user-info-new a:hover,\n    .post .venue a:hover,\n    .post .more-actions .icon:hover,\n    .tv-mode a {\n      color: #");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode(";\n    }\n    .comments-container a:hover,\n    .post-description a:hover {\n      color: #");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode(";\n    }\n    .mobile .sidebar-color-block,\n    #outer-wrapper.mobile header,\n    .pagination-container .pagination { background-color: #");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("; }\n    .pagination-container .pagination:hover, .pagination-container .pagination.pagination-loading { background-color: #");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("; }\n\n");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        return e.appendChild(t, a), t
                    },
                    render: function (t, a, n) {
                        var r = a.dom,
                            i = a.hooks,
                            d = i.content,
                            s = i.get,
                            c = i.block;
                        r.detectNamespace(n);
                        var o;
                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (o = this.build(r), this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0), this.cachedFragment && (o = r.cloneNode(this.cachedFragment, !0))) : o = this.build(r);
                        var l = r.createMorphAt(o, 1, 1, n),
                            h = r.createMorphAt(o, 3, 3, n),
                            u = r.createMorphAt(o, 5, 5, n),
                            p = r.createMorphAt(o, 7, 7, n),
                            m = r.createMorphAt(o, 9, 9, n);
                        return r.insertBoundary(o, null), d(a, l, t, "backgroundColor"), d(a, h, t, "backgroundColorHover"), d(a, u, t, "backgroundColor"), d(a, p, t, "backgroundColorHover"), c(a, m, t, "if", [s(a, t, "backgroundImageUrl")], {}, e, null), o
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null,
                hasRendered: !1,
                build: function (e) {
                    var t = e.createDocumentFragment(),
                        a = e.createComment("");
                    return e.appendChild(t, a), t
                },
                render: function (t, a, n) {
                    var r = a.dom,
                        i = a.hooks,
                        d = i.get,
                        s = i.block;
                    r.detectNamespace(n);
                    var c;
                    a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r), this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0), this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                    var o = r.createMorphAt(c, 0, 0, n);
                    return r.insertBoundary(c, null), r.insertBoundary(c, 0), s(a, o, t, "with", [d(a, t, "channel")], {}, e, null), c
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createComment("");
                return e.appendChild(t, a), t
            },
            render: function (t, a, n) {
                var r = a.dom,
                    i = a.hooks,
                    d = i.get,
                    s = i.block;
                r.detectNamespace(n);
                var c;
                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r), this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0), this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                var o = r.createMorphAt(c, 0, 0, n);
                return r.insertBoundary(c, null), r.insertBoundary(c, 0), s(a, o, t, "custom-styles", [], {
                    modelId: d(a, t, "channel.channelIdStr")
                }, e, null), c
            }
        }
    }())
}), define("vine-ember/templates/timelines/custom-styles/user", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        var e = function () {
            var e = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("    #outer-wrapper.user .post .post-engagement .action.like span:nth-of-type(2),\n    #outer-wrapper.user .post .post-engagement .action.like span:nth-of-type(2),\n    #outer-wrapper.user .post .post-engagement .action.revine span:first-of-type,\n    #outer-wrapper.user-fallback .post .post-engagement .action.revine span:first-of-type,\n    .fullscreen,\n    .post .user-info-new a:hover,\n    .comments-cåontainer a strong,\n    .post .more-actions .icon:hover,\n    .sidebar button,\n    .view-mode-toggles .icon-list,\n    .view-mode-toggles .icon-fullscreen,\n    .view-mode-toggles .icon-grid,\n    .tv-mode a {\n      color: ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode(";\n    }\n\n    .mobile .sidebar-color-block,\n    .grid .sidebar-color-block,\n    .pagination-container .pagination, .follow, #outer-wrapper.mobile header,\n    .sidebar button.following, .user-sidebar button.follow-requested {\n      background-color: ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode(";\n    }\n\n    .sidebar button.follow:hover,\n    .sidebar button.following,\n    .sidebar button.follow-requested {\n      box-shadow: 0 0 0 2px ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode(";\n    }\n\n    .post-description a,\n    .comments-container a {\n      color: ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode(";\n    }\n\n    .comments-container a:hover,\n    .post-description a:hover {\n      color: ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode(";\n    }\n\n    .pagination-container .pagination:hover,\n    .pagination-container .pagination.pagination-loading {\n      background-color: ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode(";\n    }\n\n    button.settings:hover,\n    .sidebar button.follow:hover,\n    .sidebar button.following:hover,\n    .sidebar button.follow-requested:hover {\n      box-shadow: 0 0 0 2px ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode(";\n    }\n\n    .sidebar button.following:hover,\n    .sidebar button.follow-requested:hover {\n      background-color: ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode(";\n    }\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.content;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var s = n.createMorphAt(d, 1, 1, a),
                            c = n.createMorphAt(d, 3, 3, a),
                            o = n.createMorphAt(d, 5, 5, a),
                            l = n.createMorphAt(d, 7, 7, a),
                            h = n.createMorphAt(d, 9, 9, a),
                            u = n.createMorphAt(d, 11, 11, a),
                            p = n.createMorphAt(d, 13, 13, a),
                            m = n.createMorphAt(d, 15, 15, a);
                        return i(t, s, e, "backgroundColor"), i(t, c, e, "backgroundColor"), i(t, o, e, "backgroundColor"), i(t, l, e, "linkColor"), i(t, h, e, "linkColorHover"), i(t, u, e, "backgroundColorHover"), i(t, p, e, "backgroundColorHover"), i(t, m, e, "backgroundColorHover"), d
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null,
                hasRendered: !1,
                build: function (e) {
                    var t = e.createDocumentFragment(),
                        a = e.createComment("");
                    return e.appendChild(t, a), t
                },
                render: function (t, a, n) {
                    var r = a.dom,
                        i = a.hooks,
                        d = i.get,
                        s = i.block;
                    r.detectNamespace(n);
                    var c;
                    a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r), this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0), this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                    var o = r.createMorphAt(c, 0, 0, n);
                    return r.insertBoundary(c, null), r.insertBoundary(c, 0), s(a, o, t, "with", [d(a, t, "user")], {}, e, null), c
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createComment("");
                return e.appendChild(t, a), t
            },
            render: function (t, a, n) {
                var r = a.dom,
                    i = a.hooks,
                    d = i.get,
                    s = i.block;
                r.detectNamespace(n);
                var c;
                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r), this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0), this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                var o = r.createMorphAt(c, 0, 0, n);
                return r.insertBoundary(c, null), r.insertBoundary(c, 0), s(a, o, t, "custom-styles", [], {
                    modelId: d(a, t, "user.userIdStr")
                }, e, null), c
            }
        }
    }())
}), define("vine-ember/templates/timelines/footers/list", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createElement("div"),
                    n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n), e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a), t
            },
            render: function (e, t, a) {
                var n = t.dom,
                    r = t.hooks,
                    i = r.element,
                    d = r.get,
                    s = r.inline;
                n.detectNamespace(a);
                var c;
                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n), this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0), this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                var o = n.childAt(c, [0]),
                    l = n.createMorphAt(o, 1, 1);
                return i(t, o, e, "bind-attr", [], {
                    "class": ":share-footer pagination.nextPage:hidden"
                }), s(t, l, e, "share-widgets", [], {
                    fbUrl: d(t, e, "list.shareObject.shareUrl"),
                    tweetUrl: d(t, e, "list.tweetUrl"),
                    vertical: !0
                }), c
            }
        }
    }())
}), define("vine-ember/templates/timelines/fullscreen", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createElement("div");
                e.setAttribute(a, "class", "tv-mode");
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n), e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a), t
            },
            render: function (e, t, a) {
                var n = t.dom,
                    r = t.hooks,
                    i = r.get,
                    d = r.inline;
                n.detectNamespace(a);
                var s;
                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                var c = n.createMorphAt(n.childAt(s, [0]), 1, 1);
                return d(t, c, e, "view", ["fullscreen-post"], {
                    post: i(t, e, "currentPost"),
                    fbUrl: i(t, e, "fbUrl"),
                    tweetUrl: i(t, e, "tweetUrl")
                }), s
            }
        }
    }())
}), define("vine-ember/templates/timelines/grid", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        var e = function () {
                var e = function () {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null,
                        hasRendered: !1,
                        build: function (e) {
                            var t = e.createDocumentFragment(),
                                a = e.createTextNode("      ");
                            e.appendChild(t, a);
                            var a = e.createComment("");
                            e.appendChild(t, a);
                            var a = e.createTextNode("\n");
                            return e.appendChild(t, a), t
                        },
                        render: function (e, t, a) {
                            var n = t.dom,
                                r = t.hooks,
                                i = r.inline;
                            n.detectNamespace(a);
                            var d;
                            t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                            var s = n.createMorphAt(d, 1, 1, a);
                            return i(t, s, e, "view", ["post-mobile"], {}), d
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createComment("");
                        return e.appendChild(t, a), t
                    },
                    render: function (t, a, n) {
                        var r = a.dom,
                            i = a.hooks,
                            d = i.block;
                        r.detectNamespace(n);
                        var s;
                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                        var c = r.createMorphAt(s, 0, 0, n);
                        return r.insertBoundary(s, null), r.insertBoundary(s, 0), d(a, c, t, "each", [], {}, e, null), s
                    }
                }
            }(),
            t = function () {
                var e = function () {
                        var e = function () {
                            return {
                                isHTMLBars: !0,
                                revision: "Ember@1.11.3",
                                blockParams: 0,
                                cachedFragment: null,
                                hasRendered: !1,
                                build: function (e) {
                                    var t = e.createDocumentFragment(),
                                        a = e.createComment("");
                                    return e.appendChild(t, a), t
                                },
                                render: function (e, t, a) {
                                    var n = t.dom,
                                        r = t.hooks,
                                        i = r.get,
                                        d = r.inline;
                                    n.detectNamespace(a);
                                    var s;
                                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                                    var c = n.createMorphAt(s, 0, 0, a);
                                    return n.insertBoundary(s, null), n.insertBoundary(s, 0), d(t, c, e, "partial", [i(t, e, "sidebarContentTemplate")], {}), s
                                }
                            }
                        }();
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createTextNode("          ");
                                e.appendChild(t, a);
                                var a = e.createComment("");
                                e.appendChild(t, a);
                                var a = e.createTextNode("\n");
                                return e.appendChild(t, a), t
                            },
                            render: function (t, a, n) {
                                var r = a.dom,
                                    i = a.hooks,
                                    d = i.get,
                                    s = i.block;
                                r.detectNamespace(n);
                                var c;
                                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r), this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0), this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                                var o = r.createMorphAt(c, 1, 1, n);
                                return s(a, o, t, "if", [d(a, t, "sidebarContentTemplate")], {}, e, null), c
                            }
                        }
                    }(),
                    t = function () {
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createTextNode("        ");
                                e.appendChild(t, a);
                                var a = e.createElement("div");
                                e.setAttribute(a, "class", "timeline-placeholder");
                                var n = e.createComment("");
                                e.appendChild(a, n), e.appendChild(t, a);
                                var a = e.createTextNode("\n");
                                return e.appendChild(t, a), t
                            },
                            render: function (e, t, a) {
                                var n = t.dom,
                                    r = t.hooks,
                                    i = r.get,
                                    d = r.inline;
                                n.detectNamespace(a);
                                var s;
                                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                                var c = n.createMorphAt(n.childAt(s, [1]), 0, 0);
                                return d(t, c, e, "partial", [i(t, e, "placeholderTemplate")], {}), s
                            }
                        }
                    }(),
                    a = function () {
                        var e = function () {
                            return {
                                isHTMLBars: !0,
                                revision: "Ember@1.11.3",
                                blockParams: 0,
                                cachedFragment: null,
                                hasRendered: !1,
                                build: function (e) {
                                    var t = e.createDocumentFragment(),
                                        a = e.createComment("");
                                    return e.appendChild(t, a), t
                                },
                                render: function (e, t, a) {
                                    var n = t.dom,
                                        r = t.hooks,
                                        i = r.inline;
                                    n.detectNamespace(a);
                                    var d;
                                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                                    var s = n.createMorphAt(d, 0, 0, a);
                                    return n.insertBoundary(d, null), n.insertBoundary(d, 0), i(t, s, e, "view", ["grid-post"], {}), d
                                }
                            }
                        }();
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createTextNode("        ");
                                e.appendChild(t, a);
                                var a = e.createComment("");
                                e.appendChild(t, a);
                                var a = e.createTextNode("\n");
                                return e.appendChild(t, a), t
                            },
                            render: function (t, a, n) {
                                var r = a.dom,
                                    i = a.hooks,
                                    d = i.block;
                                r.detectNamespace(n);
                                var s;
                                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                                var c = r.createMorphAt(s, 1, 1, n);
                                return d(a, c, t, "each", [], {}, e, null), s
                            }
                        }
                    }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("    ");
                        e.appendChild(t, a);
                        var a = e.createElement("div");
                        e.setAttribute(a, "class", "grid-container clearfix");
                        var n = e.createTextNode("\n      ");
                        e.appendChild(a, n);
                        var n = e.createElement("div");
                        e.setAttribute(n, "class", "grid post grid-feed-title-card");
                        var r = e.createTextNode("\n");
                        e.appendChild(n, r);
                        var r = e.createComment("");
                        e.appendChild(n, r);
                        var r = e.createTextNode("      ");
                        e.appendChild(n, r), e.appendChild(a, n);
                        var n = e.createTextNode("\n");
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        e.appendChild(a, n);
                        var n = e.createTextNode("    ");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (n, r, i) {
                        var d = r.dom,
                            s = r.hooks,
                            c = s.get,
                            o = s.block;
                        d.detectNamespace(i);
                        var l;
                        r.useFragmentCache && d.canClone ? (null === this.cachedFragment && (l = this.build(d), this.hasRendered ? this.cachedFragment = l : this.hasRendered = !0), this.cachedFragment && (l = d.cloneNode(this.cachedFragment, !0))) : l = this.build(d);
                        var h = d.childAt(l, [1]),
                            u = d.createMorphAt(d.childAt(h, [1]), 1, 1),
                            p = d.createMorphAt(h, 3, 3);
                        return o(r, u, n, "timeline-sidebar", [], {
                            title: c(r, n, "timelineName"),
                            options: c(r, n, "sidebarOptions"),
                            mode: c(r, n, "mode")
                        }, e, null), o(r, p, n, "if", [c(r, n, "placeholderTemplate")], {}, t, a), l
                    }
                }
            }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createElement("div"),
                    n = e.createTextNode("\n");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n), e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a), t
            },
            render: function (a, n, r) {
                var i = n.dom,
                    d = n.hooks,
                    s = d.element,
                    c = d.get,
                    o = d.block,
                    l = d.inline;
                i.detectNamespace(r);
                var h;
                n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (h = this.build(i), this.hasRendered ? this.cachedFragment = h : this.hasRendered = !0), this.cachedFragment && (h = i.cloneNode(this.cachedFragment, !0))) : h = this.build(i);
                var u = i.childAt(h, [0]),
                    p = i.createMorphAt(u, 1, 1),
                    m = i.createMorphAt(u, 3, 3);
                return s(n, u, a, "bind-attr", [], {
                    "class": ":posts-container :grid pagination.nextPage::no-pagination"
                }), o(n, p, a, "if", [c(n, a, "isMobile")], {}, e, t), l(n, m, a, "partial", ["pagination"], {}), h
            }
        }
    }())
}), define("vine-ember/templates/timelines/headers/channel", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        var e = function () {
            var e = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("    ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.get,
                            d = r.inline;
                        n.detectNamespace(a);
                        var s;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                        var c = n.createMorphAt(s, 1, 1, a);
                        return d(t, c, e, "secure-img", [], {
                            "class": "icon",
                            src: i(t, e, "channelIconUrl")
                        }), s
                    }
                }
            }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null,
                hasRendered: !1,
                build: function (e) {
                    var t = e.createDocumentFragment(),
                        a = e.createComment("");
                    return e.appendChild(t, a), t
                },
                render: function (t, a, n) {
                    var r = a.dom,
                        i = a.hooks,
                        d = i.get,
                        s = i.block;
                    r.detectNamespace(n);
                    var c;
                    a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r), this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0), this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                    var o = r.createMorphAt(c, 0, 0, n);
                    return r.insertBoundary(c, null), r.insertBoundary(c, 0), s(a, o, t, "with", [d(a, t, "channel")], {}, e, null), c
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createComment("");
                return e.appendChild(t, a), t
            },
            render: function (t, a, n) {
                var r = a.dom,
                    i = a.hooks,
                    d = i.get,
                    s = i.block;
                r.detectNamespace(n);
                var c;
                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r), this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0), this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                var o = r.createMorphAt(c, 0, 0, n);
                return r.insertBoundary(c, null), r.insertBoundary(c, 0), s(a, o, t, "timeline-header", [], {
                    model: d(a, t, "channel")
                }, e, null), c
            }
        }
    }())
}), define("vine-ember/templates/timelines/headers/editors-picks", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        var e = function () {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null,
                hasRendered: !1,
                build: function (e) {
                    var t = e.createDocumentFragment(),
                        a = e.createTextNode("  ");
                    e.appendChild(t, a);
                    var a = e.createComment("");
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a), t
                },
                render: function (e, t, a) {
                    var n = t.dom,
                        r = t.hooks,
                        i = r.inline;
                    n.detectNamespace(a);
                    var d;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                    var s = n.createMorphAt(d, 1, 1, a);
                    return i(t, s, e, "cdn-img", [], {
                        src: "images/channels/EditorsPicks.svg",
                        "class": "icon"
                    }), d
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createComment("");
                return e.appendChild(t, a), t
            },
            render: function (t, a, n) {
                var r = a.dom,
                    i = a.hooks,
                    d = i.block;
                r.detectNamespace(n);
                var s;
                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                var c = r.createMorphAt(s, 0, 0, n);
                return r.insertBoundary(s, null), r.insertBoundary(s, 0), d(a, c, t, "timeline-header", [], {
                    cssClass: "editors-picks"
                }, e, null), s
            }
        }
    }())
}), define("vine-ember/templates/timelines/headers/list", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        var e = function () {
                var e = function () {
                    var e = function () {
                            return {
                                isHTMLBars: !0,
                                revision: "Ember@1.11.3",
                                blockParams: 0,
                                cachedFragment: null,
                                hasRendered: !1,
                                build: function (e) {
                                    var t = e.createDocumentFragment(),
                                        a = e.createTextNode("      ");
                                    e.appendChild(t, a);
                                    var a = e.createElement("div");
                                    e.setAttribute(a, "class", "author");
                                    var n = e.createTextNode("\n        ");
                                    e.appendChild(a, n);
                                    var n = e.createElement("span"),
                                        r = e.createTextNode("by");
                                    e.appendChild(n, r), e.appendChild(a, n);
                                    var n = e.createComment("");
                                    e.appendChild(a, n);
                                    var n = e.createTextNode("\n      ");
                                    e.appendChild(a, n), e.appendChild(t, a);
                                    var a = e.createTextNode("\n");
                                    return e.appendChild(t, a), t
                                },
                                render: function (e, t, a) {
                                    var n = t.dom,
                                        r = t.hooks,
                                        i = r.get,
                                        d = r.inline;
                                    n.detectNamespace(a);
                                    var s;
                                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                                    var c = n.createMorphAt(n.childAt(s, [1]), 2, 2);
                                    return d(t, c, e, "user-info", [], {
                                        data: i(t, e, "this"),
                                        cssClass: "user-info-size-38 user-info-hide-metadata user-info-inherit-color"
                                    }), s
                                }
                            }
                        }(),
                        t = function () {
                            return {
                                isHTMLBars: !0,
                                revision: "Ember@1.11.3",
                                blockParams: 0,
                                cachedFragment: null,
                                hasRendered: !1,
                                build: function (e) {
                                    var t = e.createDocumentFragment(),
                                        a = e.createTextNode("      ");
                                    e.appendChild(t, a);
                                    var a = e.createElement("div");
                                    e.setAttribute(a, "class", "description");
                                    var n = e.createTextNode("\n        ");
                                    e.appendChild(a, n);
                                    var n = e.createComment("");
                                    e.appendChild(a, n);
                                    var n = e.createTextNode("\n      ");
                                    e.appendChild(a, n), e.appendChild(t, a);
                                    var a = e.createTextNode("\n");
                                    return e.appendChild(t, a), t
                                },
                                render: function (e, t, a) {
                                    var n = t.dom,
                                        r = t.hooks,
                                        i = r.get,
                                        d = r.inline;
                                    n.detectNamespace(a);
                                    var s;
                                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                                    var c = n.createMorphAt(n.childAt(s, [1]), 1, 1);
                                    return d(t, c, e, "html-linebreak", [i(t, e, "description")], {}), s
                                }
                            }
                        }(),
                        a = function () {
                            var e = function () {
                                return {
                                    isHTMLBars: !0,
                                    revision: "Ember@1.11.3",
                                    blockParams: 0,
                                    cachedFragment: null,
                                    hasRendered: !1,
                                    build: function (e) {
                                        var t = e.createDocumentFragment(),
                                            a = e.createElement("button");
                                        e.setAttribute(a, "class", "play-fullscreen");
                                        var n = e.createTextNode("Play fullscreen");
                                        e.appendChild(a, n);
                                        var n = e.createElement("span");
                                        return e.setAttribute(n, "class", "icon-fullscreen"), e.appendChild(a, n), e.appendChild(t, a), t
                                    },
                                    render: function (e, t, a) {
                                        var n = t.dom;
                                        n.detectNamespace(a);
                                        var r;
                                        return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n), this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0), this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n), r
                                    }
                                }
                            }();
                            return {
                                isHTMLBars: !0,
                                revision: "Ember@1.11.3",
                                blockParams: 0,
                                cachedFragment: null,
                                hasRendered: !1,
                                build: function (e) {
                                    var t = e.createDocumentFragment(),
                                        a = e.createTextNode("      ");
                                    e.appendChild(t, a);
                                    var a = e.createComment("");
                                    e.appendChild(t, a);
                                    var a = e.createTextNode("\n");
                                    return e.appendChild(t, a), t
                                },
                                render: function (t, a, n) {
                                    var r = a.dom,
                                        i = a.hooks,
                                        d = i.subexpr,
                                        s = i.block;
                                    r.detectNamespace(n);
                                    var c;
                                    a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r), this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0), this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                                    var o = r.createMorphAt(c, 1, 1, n);
                                    return s(a, o, t, "link-to", [d(a, t, "query-params", [], {
                                        mode: "tv"
                                    })], {}, e, null), c
                                }
                            }
                        }();
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null,
                        hasRendered: !1,
                        build: function (e) {
                            var t = e.createDocumentFragment(),
                                a = e.createTextNode("    ");
                            e.appendChild(t, a);
                            var a = e.createElement("h1"),
                                n = e.createComment("");
                            e.appendChild(a, n), e.appendChild(t, a);
                            var a = e.createTextNode("\n\n");
                            e.appendChild(t, a);
                            var a = e.createComment("");
                            e.appendChild(t, a);
                            var a = e.createTextNode("\n");
                            e.appendChild(t, a);
                            var a = e.createComment("");
                            e.appendChild(t, a);
                            var a = e.createTextNode("\n");
                            e.appendChild(t, a);
                            var a = e.createComment("");
                            e.appendChild(t, a);
                            var a = e.createTextNode("\n    ");
                            e.appendChild(t, a);
                            var a = e.createComment("");
                            e.appendChild(t, a);
                            var a = e.createTextNode("\n");
                            return e.appendChild(t, a), t
                        },
                        render: function (n, r, i) {
                            var d = r.dom,
                                s = r.hooks,
                                c = s.get,
                                o = s.inline,
                                l = s.block;
                            d.detectNamespace(i);
                            var h;
                            r.useFragmentCache && d.canClone ? (null === this.cachedFragment && (h = this.build(d), this.hasRendered ? this.cachedFragment = h : this.hasRendered = !0), this.cachedFragment && (h = d.cloneNode(this.cachedFragment, !0))) : h = this.build(d);
                            var u = d.createMorphAt(d.childAt(h, [1]), 0, 0),
                                p = d.createMorphAt(h, 3, 3, i),
                                m = d.createMorphAt(h, 5, 5, i),
                                v = d.createMorphAt(h, 7, 7, i),
                                g = d.createMorphAt(h, 9, 9, i);
                            return o(r, u, n, "html-linebreak", [c(r, n, "title")], {}), l(r, p, n, "with", [c(r, n, "createdByUser")], {}, e, null), l(r, m, n, "if", [c(r, n, "description")], {}, t, null), l(r, v, n, "unless", [c(r, n, "isMobile")], {}, a, null), o(r, g, n, "share-widgets", [], {
                                fbUrl: c(r, n, "shareObject.shareUrl"),
                                tweetUrl: c(r, n, "tweetUrl")
                            }), h
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createComment("");
                        return e.appendChild(t, a), t
                    },
                    render: function (t, a, n) {
                        var r = a.dom,
                            i = a.hooks,
                            d = i.get,
                            s = i.block;
                        r.detectNamespace(n);
                        var c;
                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r), this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0), this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                        var o = r.createMorphAt(c, 0, 0, n);
                        return r.insertBoundary(c, null), r.insertBoundary(c, 0), s(a, o, t, "with", [d(a, t, "list")], {}, e, null), c
                    }
                }
            }(),
            t = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("  ");
                        e.appendChild(t, a);
                        var a = e.createElement("div");
                        e.setAttribute(a, "class", "share-sidebar list");
                        var n = e.createTextNode("\n    ");
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        e.appendChild(a, n);
                        var n = e.createTextNode("\n  ");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.get,
                            d = r.inline;
                        n.detectNamespace(a);
                        var s;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                        var c = n.createMorphAt(n.childAt(s, [1]), 1, 1);
                        return d(t, c, e, "share-post", [], {
                            post: i(t, e, "list"),
                            featureSet: "listHeader",
                            location: "ListHeader",
                            isMobile: !1
                        }), s
                    }
                }
            }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createComment("");
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                e.appendChild(t, a);
                var a = e.createComment("");
                return e.appendChild(t, a), t
            },
            render: function (a, n, r) {
                var i = n.dom,
                    d = n.hooks,
                    s = d.get,
                    c = d.block;
                i.detectNamespace(r);
                var o;
                n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (o = this.build(i), this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0), this.cachedFragment && (o = i.cloneNode(this.cachedFragment, !0))) : o = this.build(i);
                var l = i.createMorphAt(o, 0, 0, r),
                    h = i.createMorphAt(o, 2, 2, r);
                return i.insertBoundary(o, null), i.insertBoundary(o, 0), c(n, l, a, "timeline-header", [], {
                    cssClass: "list",
                    model: s(n, a, "list")
                }, e, null), c(n, h, a, "unless", [s(n, a, "isMobile")], {}, t, null), o
            }
        }
    }())
}), define("vine-ember/templates/timelines/headers/popular-now", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        var e = function () {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null,
                hasRendered: !1,
                build: function (e) {
                    var t = e.createDocumentFragment(),
                        a = e.createTextNode("  ");
                    e.appendChild(t, a);
                    var a = e.createComment("");
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a), t
                },
                render: function (e, t, a) {
                    var n = t.dom,
                        r = t.hooks,
                        i = r.inline;
                    n.detectNamespace(a);
                    var d;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                    var s = n.createMorphAt(d, 1, 1, a);
                    return i(t, s, e, "cdn-img", [], {
                        src: "images/sidebar/popnow.svg",
                        "class": "icon"
                    }), d
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createComment("");
                return e.appendChild(t, a), t
            },
            render: function (t, a, n) {
                var r = a.dom,
                    i = a.hooks,
                    d = i.block;
                r.detectNamespace(n);
                var s;
                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                var c = r.createMorphAt(s, 0, 0, n);
                return r.insertBoundary(s, null), r.insertBoundary(s, 0), d(a, c, t, "timeline-header", [], {
                    cssClass: "popular-now"
                }, e, null), s
            }
        }
    }())
}), define("vine-ember/templates/timelines/headers/tag", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        var e = function () {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null,
                hasRendered: !1,
                build: function (e) {
                    var t = e.createDocumentFragment(),
                        a = e.createTextNode("  ");
                    e.appendChild(t, a);
                    var a = e.createElement("h1"),
                        n = e.createComment("");
                    e.appendChild(a, n), e.appendChild(t, a);
                    var a = e.createTextNode("\n  ");
                    e.appendChild(t, a);
                    var a = e.createElement("h5"),
                        n = e.createComment("");
                    e.appendChild(a, n), e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a), t
                },
                render: function (e, t, a) {
                    var n = t.dom,
                        r = t.hooks,
                        i = r.content,
                        d = r.get,
                        s = r.inline;
                    n.detectNamespace(a);
                    var c;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n), this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0), this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                    var o = n.createMorphAt(n.childAt(c, [1]), 0, 0),
                        l = n.createMorphAt(n.childAt(c, [3]), 0, 0);
                    return i(t, o, e, "hashtag"), s(t, l, e, "max-count", [d(t, e, "pagination.count")], {
                        max: 499,
                        display: 500,
                        unit: "Post"
                    }), c
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createComment("");
                return e.appendChild(t, a), t
            },
            render: function (t, a, n) {
                var r = a.dom,
                    i = a.hooks,
                    d = i.block;
                r.detectNamespace(n);
                var s;
                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                var c = r.createMorphAt(s, 0, 0, n);
                return r.insertBoundary(s, null), r.insertBoundary(s, 0), d(a, c, t, "timeline-header", [], {}, e, null), s
            }
        }
    }())
}), define("vine-ember/templates/timelines/headers/venue", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        var e = function () {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null,
                hasRendered: !1,
                build: function (e) {
                    var t = e.createDocumentFragment(),
                        a = e.createTextNode("  ");
                    e.appendChild(t, a);
                    var a = e.createElement("span");
                    e.setAttribute(a, "class", "icon-venue"), e.appendChild(t, a);
                    var a = e.createTextNode("\n  ");
                    e.appendChild(t, a);
                    var a = e.createElement("h1"),
                        n = e.createComment("");
                    e.appendChild(a, n), e.appendChild(t, a);
                    var a = e.createTextNode("\n  ");
                    e.appendChild(t, a);
                    var a = e.createElement("h5"),
                        n = e.createComment("");
                    e.appendChild(a, n), e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a), t
                },
                render: function (e, t, a) {
                    var n = t.dom,
                        r = t.hooks,
                        i = r.content,
                        d = r.get,
                        s = r.inline;
                    n.detectNamespace(a);
                    var c;
                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (c = this.build(n), this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0), this.cachedFragment && (c = n.cloneNode(this.cachedFragment, !0))) : c = this.build(n);
                    var o = n.createMorphAt(n.childAt(c, [3]), 0, 0),
                        l = n.createMorphAt(n.childAt(c, [5]), 0, 0);
                    return i(t, o, e, "venueName"), s(t, l, e, "max-count", [d(t, e, "pagination.count")], {
                        max: 499,
                        display: 500,
                        unit: "Post"
                    }), c
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createComment("");
                return e.appendChild(t, a), t
            },
            render: function (t, a, n) {
                var r = a.dom,
                    i = a.hooks,
                    d = i.get,
                    s = i.block;
                r.detectNamespace(n);
                var c;
                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r), this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0), this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                var o = r.createMorphAt(c, 0, 0, n);
                return r.insertBoundary(c, null), r.insertBoundary(c, 0), s(a, o, t, "timeline-header", [], {
                    model: d(a, t, "this"),
                    cssClass: "venue"
                }, e, null), c
            }
        }
    }())
}), define("vine-ember/templates/timelines/placeholders/blocked", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createElement("div");
                e.setAttribute(a, "class", "icon-frowny"), e.appendChild(t, a);
                var a = e.createTextNode("\n");
                e.appendChild(t, a);
                var a = e.createElement("h2"),
                    n = e.createTextNode("Sorry, you can't access this profile.");
                return e.appendChild(a, n), e.appendChild(t, a), t
            },
            render: function (e, t, a) {
                var n = t.dom;
                n.detectNamespace(a);
                var r;
                return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n), this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0), this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n), r
            }
        }
    }())
}), define("vine-ember/templates/timelines/placeholders/empty", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        var e = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("    ");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.content;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var s = n.createMorphAt(d, 1, 1, a);
                        return i(t, s, e, "noPostsMessage"), d
                    }
                }
            }(),
            t = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("    No posts available.\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom;
                        n.detectNamespace(a);
                        var r;
                        return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n), this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0), this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n), r
                    }
                }
            }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createElement("div");
                e.setAttribute(a, "class", "icon-frowny"), e.appendChild(t, a);
                var a = e.createTextNode("\n");
                e.appendChild(t, a);
                var a = e.createElement("h2"),
                    n = e.createTextNode("\n");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n), e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a), t
            },
            render: function (a, n, r) {
                var i = n.dom,
                    d = n.hooks,
                    s = d.get,
                    c = d.block;
                i.detectNamespace(r);
                var o;
                n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (o = this.build(i), this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0), this.cachedFragment && (o = i.cloneNode(this.cachedFragment, !0))) : o = this.build(i);
                var l = i.createMorphAt(i.childAt(o, [2]), 1, 1);
                return c(n, l, a, "if", [s(n, a, "noPostsMessage")], {}, e, t), o
            }
        }
    }())
}), define("vine-ember/templates/timelines/placeholders/private", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createElement("div");
                e.setAttribute(a, "class", "icon-lock"), e.appendChild(t, a);
                var a = e.createTextNode("\n");
                e.appendChild(t, a);
                var a = e.createElement("h2"),
                    n = e.createTextNode("You must be following ");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createTextNode(" to view these posts.");
                e.appendChild(a, n), e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a), t
            },
            render: function (e, t, a) {
                var n = t.dom,
                    r = t.hooks,
                    i = r.content;
                n.detectNamespace(a);
                var d;
                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                var s = n.createMorphAt(n.childAt(d, [2]), 1, 1);
                return i(t, s, e, "timelineName"), d
            }
        }
    }())
}), define("vine-ember/templates/timelines/posts", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        var e = function () {
                var e = function () {
                    var e = function () {
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createComment("");
                                return e.appendChild(t, a), t
                            },
                            render: function (e, t, a) {
                                var n = t.dom,
                                    r = t.hooks,
                                    i = r.get,
                                    d = r.inline;
                                n.detectNamespace(a);
                                var s;
                                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                                var c = n.createMorphAt(s, 0, 0, a);
                                return n.insertBoundary(s, null), n.insertBoundary(s, 0), d(t, c, e, "partial", [i(t, e, "sidebarContentTemplate")], {}), s
                            }
                        }
                    }();
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null,
                        hasRendered: !1,
                        build: function (e) {
                            var t = e.createDocumentFragment(),
                                a = e.createTextNode("    ");
                            e.appendChild(t, a);
                            var a = e.createComment("");
                            e.appendChild(t, a);
                            var a = e.createTextNode("\n");
                            return e.appendChild(t, a), t
                        },
                        render: function (t, a, n) {
                            var r = a.dom,
                                i = a.hooks,
                                d = i.get,
                                s = i.block;
                            r.detectNamespace(n);
                            var c;
                            a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r), this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0), this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                            var o = r.createMorphAt(c, 1, 1, n);
                            return s(a, o, t, "if", [d(a, t, "sidebarContentTemplate")], {}, e, null), c
                        }
                    }
                }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createComment("");
                        return e.appendChild(t, a), t
                    },
                    render: function (t, a, n) {
                        var r = a.dom,
                            i = a.hooks,
                            d = i.get,
                            s = i.block;
                        r.detectNamespace(n);
                        var c;
                        a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r), this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0), this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                        var o = r.createMorphAt(c, 0, 0, n);
                        return r.insertBoundary(c, null), r.insertBoundary(c, 0), s(a, o, t, "timeline-sidebar", [], {
                            title: d(a, t, "timelineName"),
                            options: d(a, t, "sidebarOptions"),
                            mode: d(a, t, "mode"),
                            hideToggles: d(a, t, "hasHeader"),
                            hasGridMode: d(a, t, "hasGridMode"),
                            isMobile: d(a, t, "isMobile")
                        }, e, null), c
                    }
                }
            }(),
            t = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createComment("");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.inline;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var s = n.createMorphAt(d, 0, 0, a);
                        return n.insertBoundary(d, null), n.insertBoundary(d, 0), i(t, s, e, "outlet", ["rightSidebar"], {}), d
                    }
                }
            }(),
            a = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("        ");
                        e.appendChild(t, a);
                        var a = e.createElement("div");
                        e.setAttribute(a, "class", "timeline-placeholder");
                        var n = e.createComment("");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.get,
                            d = r.inline;
                        n.detectNamespace(a);
                        var s;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                        var c = n.createMorphAt(n.childAt(s, [1]), 0, 0);
                        return d(t, c, e, "partial", [i(t, e, "placeholderTemplate")], {}), s
                    }
                }
            }(),
            n = function () {
                var e = function () {
                        var e = function () {
                            return {
                                isHTMLBars: !0,
                                revision: "Ember@1.11.3",
                                blockParams: 0,
                                cachedFragment: null,
                                hasRendered: !1,
                                build: function (e) {
                                    var t = e.createDocumentFragment(),
                                        a = e.createComment("");
                                    return e.appendChild(t, a), t
                                },
                                render: function (e, t, a) {
                                    var n = t.dom,
                                        r = t.hooks,
                                        i = r.inline;
                                    n.detectNamespace(a);
                                    var d;
                                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                                    var s = n.createMorphAt(d, 0, 0, a);
                                    return n.insertBoundary(d, null), n.insertBoundary(d, 0), i(t, s, e, "view", ["post-mobile"], {}), d
                                }
                            }
                        }();
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createTextNode("          ");
                                e.appendChild(t, a);
                                var a = e.createComment("");
                                e.appendChild(t, a);
                                var a = e.createTextNode("\n");
                                return e.appendChild(t, a), t
                            },
                            render: function (t, a, n) {
                                var r = a.dom,
                                    i = a.hooks,
                                    d = i.block;
                                r.detectNamespace(n);
                                var s;
                                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                                var c = r.createMorphAt(s, 1, 1, n);
                                return d(a, c, t, "each", [], {}, e, null), s
                            }
                        }
                    }(),
                    t = function () {
                        var e = function () {
                            return {
                                isHTMLBars: !0,
                                revision: "Ember@1.11.3",
                                blockParams: 0,
                                cachedFragment: null,
                                hasRendered: !1,
                                build: function (e) {
                                    var t = e.createDocumentFragment(),
                                        a = e.createComment("");
                                    return e.appendChild(t, a), t
                                },
                                render: function (e, t, a) {
                                    var n = t.dom,
                                        r = t.hooks,
                                        i = r.inline;
                                    n.detectNamespace(a);
                                    var d;
                                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                                    var s = n.createMorphAt(d, 0, 0, a);
                                    return n.insertBoundary(d, null), n.insertBoundary(d, 0), i(t, s, e, "view", ["post"], {}), d
                                }
                            }
                        }();
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createTextNode("          ");
                                e.appendChild(t, a);
                                var a = e.createComment("");
                                e.appendChild(t, a);
                                var a = e.createTextNode("\n");
                                return e.appendChild(t, a), t
                            },
                            render: function (t, a, n) {
                                var r = a.dom,
                                    i = a.hooks,
                                    d = i.block;
                                r.detectNamespace(n);
                                var s;
                                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                                var c = r.createMorphAt(s, 1, 1, n);
                                return d(a, c, t, "each", [], {}, e, null), s
                            }
                        }
                    }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createComment("");
                        return e.appendChild(t, a), t
                    },
                    render: function (a, n, r) {
                        var i = n.dom,
                            d = n.hooks,
                            s = d.get,
                            c = d.block;
                        i.detectNamespace(r);
                        var o;
                        n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (o = this.build(i), this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0), this.cachedFragment && (o = i.cloneNode(this.cachedFragment, !0))) : o = this.build(i);
                        var l = i.createMorphAt(o, 0, 0, r);
                        return i.insertBoundary(o, null), i.insertBoundary(o, 0), c(n, l, a, "if", [s(n, a, "isMobile")], {}, e, t), o
                    }
                }
            }(),
            r = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createComment("");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.inline;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var s = n.createMorphAt(d, 0, 0, a);
                        return n.insertBoundary(d, null), n.insertBoundary(d, 0), i(t, s, e, "outlet", ["rightSidebar"], {}), d
                    }
                }
            }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createComment("");
                e.appendChild(t, a);
                var a = e.createTextNode("\n\n");
                e.appendChild(t, a);
                var a = e.createComment("");
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                e.appendChild(t, a);
                var a = e.createElement("div");
                e.setAttribute(a, "class", "timeline-container");
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("div");
                e.setAttribute(n, "class", "padding"), e.appendChild(a, n);
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("div");
                e.setAttribute(n, "class", "timeline");
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createComment("");
                e.appendChild(n, r);
                var r = e.createTextNode("\n\n    ");
                e.appendChild(n, r);
                var r = e.createElement("div"),
                    i = e.createTextNode("\n");
                e.appendChild(r, i);
                var i = e.createComment("");
                e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createComment("");
                e.appendChild(r, i);
                var i = e.createTextNode("\n    ");
                e.appendChild(r, i), e.appendChild(n, r);
                var r = e.createTextNode("\n  ");
                e.appendChild(n, r), e.appendChild(a, n);
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("div");
                e.setAttribute(n, "class", "padding");
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createComment("");
                e.appendChild(n, r);
                var r = e.createTextNode("\n  ");
                e.appendChild(n, r), e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n), e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a), t
            },
            render: function (i, d, s) {
                var c = d.dom,
                    o = d.hooks,
                    l = o.get,
                    h = o.inline,
                    u = o.block,
                    p = o.element;
                c.detectNamespace(s);
                var m;
                d.useFragmentCache && c.canClone ? (null === this.cachedFragment && (m = this.build(c), this.hasRendered ? this.cachedFragment = m : this.hasRendered = !0), this.cachedFragment && (m = c.cloneNode(this.cachedFragment, !0))) : m = this.build(c);
                var v = c.childAt(m, [4]),
                    g = c.childAt(v, [3]),
                    b = c.childAt(g, [3]),
                    C = c.createMorphAt(m, 0, 0, s),
                    f = c.createMorphAt(m, 2, 2, s),
                    F = c.createMorphAt(g, 1, 1),
                    N = c.createMorphAt(b, 1, 1),
                    T = c.createMorphAt(b, 3, 3),
                    x = c.createMorphAt(c.childAt(v, [5]), 1, 1);
                return c.insertBoundary(m, 0), h(d, C, i, "view-mode-toggles", [], {
                    mode: l(d, i, "mode"),
                    hasGridMode: l(d, i, "hasGridMode")
                }), u(d, f, i, "unless", [l(d, i, "disableSidebar")], {}, e, null), u(d, F, i, "if", [l(d, i, "isMobile")], {}, t, null), p(d, b, i, "bind-attr", [], {
                    "class": ":posts-container pagination.nextPage::no-pagination"
                }), u(d, N, i, "if", [l(d, i, "placeholderTemplate")], {}, a, n), h(d, T, i, "partial", ["pagination"], {}), u(d, x, i, "unless", [l(d, i, "isMobile")], {}, r, null), m
            }
        }
    }())
}), define("vine-ember/templates/timelines/sidebars/list", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        var e = function () {
            var e = function () {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null,
                        hasRendered: !1,
                        build: function (e) {
                            var t = e.createDocumentFragment(),
                                a = e.createTextNode("    ");
                            e.appendChild(t, a);
                            var a = e.createElement("div");
                            e.setAttribute(a, "class", "author");
                            var n = e.createTextNode("\n      ");
                            e.appendChild(a, n);
                            var n = e.createElement("span"),
                                r = e.createTextNode("by");
                            e.appendChild(n, r), e.appendChild(a, n);
                            var n = e.createComment("");
                            e.appendChild(a, n);
                            var n = e.createTextNode("\n    ");
                            e.appendChild(a, n), e.appendChild(t, a);
                            var a = e.createTextNode("\n");
                            return e.appendChild(t, a), t
                        },
                        render: function (e, t, a) {
                            var n = t.dom,
                                r = t.hooks,
                                i = r.get,
                                d = r.inline;
                            n.detectNamespace(a);
                            var s;
                            t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                            var c = n.createMorphAt(n.childAt(s, [1]), 2, 2);
                            return d(t, c, e, "user-info", [], {
                                data: i(t, e, "this"),
                                cssClass: "user-info-size-38 user-info-hide-metadata user-info-inherit-color"
                            }), s
                        }
                    }
                }(),
                t = function () {
                    return {
                        isHTMLBars: !0,
                        revision: "Ember@1.11.3",
                        blockParams: 0,
                        cachedFragment: null,
                        hasRendered: !1,
                        build: function (e) {
                            var t = e.createDocumentFragment(),
                                a = e.createTextNode("    ");
                            e.appendChild(t, a);
                            var a = e.createElement("div");
                            e.setAttribute(a, "class", "description");
                            var n = e.createTextNode("\n      ");
                            e.appendChild(a, n);
                            var n = e.createComment("");
                            e.appendChild(a, n);
                            var n = e.createTextNode("\n    ");
                            e.appendChild(a, n), e.appendChild(t, a);
                            var a = e.createTextNode("\n");
                            return e.appendChild(t, a), t
                        },
                        render: function (e, t, a) {
                            var n = t.dom,
                                r = t.hooks,
                                i = r.get,
                                d = r.inline;
                            n.detectNamespace(a);
                            var s;
                            t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                            var c = n.createMorphAt(n.childAt(s, [1]), 1, 1);
                            return d(t, c, e, "html-linebreak", [i(t, e, "description")], {}), s
                        }
                    }
                }();
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null,
                hasRendered: !1,
                build: function (e) {
                    var t = e.createDocumentFragment(),
                        a = e.createComment("");
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    e.appendChild(t, a);
                    var a = e.createComment("");
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n  ");
                    e.appendChild(t, a);
                    var a = e.createComment("");
                    e.appendChild(t, a);
                    var a = e.createTextNode("\n");
                    return e.appendChild(t, a), t
                },
                render: function (a, n, r) {
                    var i = n.dom,
                        d = n.hooks,
                        s = d.get,
                        c = d.block,
                        o = d.inline;
                    i.detectNamespace(r);
                    var l;
                    n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (l = this.build(i), this.hasRendered ? this.cachedFragment = l : this.hasRendered = !0), this.cachedFragment && (l = i.cloneNode(this.cachedFragment, !0))) : l = this.build(i);
                    var h = i.createMorphAt(l, 0, 0, r),
                        u = i.createMorphAt(l, 2, 2, r),
                        p = i.createMorphAt(l, 4, 4, r);
                    return i.insertBoundary(l, 0), c(n, h, a, "with", [s(n, a, "createdByUser")], {}, e, null), c(n, u, a, "if", [s(n, a, "description")], {}, t, null), o(n, p, a, "share-widgets", [], {
                        fbUrl: s(n, a, "shareObject.shareUrl"),
                        tweetUrl: s(n, a, "tweetUrl")
                    }), l
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createComment("");
                return e.appendChild(t, a), t
            },
            render: function (t, a, n) {
                var r = a.dom,
                    i = a.hooks,
                    d = i.get,
                    s = i.block;
                r.detectNamespace(n);
                var c;
                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r), this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0), this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                var o = r.createMorphAt(c, 0, 0, n);
                return r.insertBoundary(c, null), r.insertBoundary(c, 0), s(a, o, t, "with", [d(a, t, "list")], {}, e, null), c
            }
        }
    }())
}), define("vine-ember/templates/timelines/sidebars/suspension-sidebar", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createComment("");
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a), t
            },
            render: function (e, t, a) {
                var n = t.dom,
                    r = t.hooks,
                    i = r.get,
                    d = r.inline;
                n.detectNamespace(a);
                var s;
                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                var c = n.createMorphAt(s, 0, 0, a);
                return n.insertBoundary(s, 0), d(t, c, e, "suspension-sidebar", [], {
                    userIdStr: i(t, e, "user.userIdStr")
                }), s
            }
        }
    }())
}), define("vine-ember/templates/timelines/sidebars/user", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        var e = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("  ");
                        e.appendChild(t, a);
                        var a = e.createElement("span");
                        e.setAttribute(a, "class", "verified");
                        var n = e.createElement("span");
                        e.setAttribute(n, "class", "icon-verified"), e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom;
                        n.detectNamespace(a);
                        var r;
                        return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n), this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0), this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n), r
                    }
                }
            }(),
            t = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createElement("br");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.get,
                            d = r.inline;
                        n.detectNamespace(a);
                        var s;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                        var c = n.createMorphAt(s, 1, 1, a);
                        return n.insertBoundary(s, null), d(t, c, e, "replace-emoji", [i(t, e, "user.location")], {}), s
                    }
                }
            }(),
            a = function () {
                var e = function () {
                        var e = function () {
                            var e = function () {
                                    return {
                                        isHTMLBars: !0,
                                        revision: "Ember@1.11.3",
                                        blockParams: 0,
                                        cachedFragment: null,
                                        hasRendered: !1,
                                        build: function (e) {
                                            var t = e.createDocumentFragment(),
                                                a = e.createTextNode("          ");
                                            e.appendChild(t, a);
                                            var a = e.createElement("div");
                                            e.setAttribute(a, "class", "loops");
                                            var n = e.createTextNode("\n            ");
                                            e.appendChild(a, n);
                                            var n = e.createElement("div");
                                            e.setAttribute(n, "class", "metric-count");
                                            var r = e.createComment("");
                                            e.appendChild(n, r), e.appendChild(a, n);
                                            var n = e.createTextNode("\n            ");
                                            e.appendChild(a, n);
                                            var n = e.createElement("div");
                                            e.setAttribute(n, "class", "metric-name");
                                            var r = e.createTextNode("Loops");
                                            e.appendChild(n, r), e.appendChild(a, n);
                                            var n = e.createTextNode("\n          ");
                                            e.appendChild(a, n), e.appendChild(t, a);
                                            var a = e.createTextNode("\n");
                                            return e.appendChild(t, a), t
                                        },
                                        render: function (e, t, a) {
                                            var n = t.dom,
                                                r = t.hooks,
                                                i = r.get,
                                                d = r.inline;
                                            n.detectNamespace(a);
                                            var s;
                                            t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                                            var c = n.createMorphAt(n.childAt(s, [1, 1]), 0, 0);
                                            return d(t, c, e, "commaize-number", [i(t, e, "loopCount")], {}), s
                                        }
                                    }
                                }(),
                                t = function () {
                                    return {
                                        isHTMLBars: !0,
                                        revision: "Ember@1.11.3",
                                        blockParams: 0,
                                        cachedFragment: null,
                                        hasRendered: !1,
                                        build: function (e) {
                                            var t = e.createDocumentFragment(),
                                                a = e.createTextNode("          ");
                                            e.appendChild(t, a);
                                            var a = e.createElement("div");
                                            e.setAttribute(a, "class", "posts");
                                            var n = e.createTextNode("\n            ");
                                            e.appendChild(a, n);
                                            var n = e.createElement("div");
                                            e.setAttribute(n, "class", "metric-count");
                                            var r = e.createComment("");
                                            e.appendChild(n, r), e.appendChild(a, n);
                                            var n = e.createTextNode("\n            ");
                                            e.appendChild(a, n);
                                            var n = e.createElement("div");
                                            e.setAttribute(n, "class", "metric-name");
                                            var r = e.createTextNode("Posts");
                                            e.appendChild(n, r), e.appendChild(a, n);
                                            var n = e.createTextNode("\n          ");
                                            e.appendChild(a, n), e.appendChild(t, a);
                                            var a = e.createTextNode("\n");
                                            return e.appendChild(t, a), t
                                        },
                                        render: function (e, t, a) {
                                            var n = t.dom,
                                                r = t.hooks,
                                                i = r.get,
                                                d = r.inline;
                                            n.detectNamespace(a);
                                            var s;
                                            t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                                            var c = n.createMorphAt(n.childAt(s, [1, 1]), 0, 0);
                                            return d(t, c, e, "format-count", [i(t, e, "postCount")], {}), s
                                        }
                                    }
                                }();
                            return {
                                isHTMLBars: !0,
                                revision: "Ember@1.11.3",
                                blockParams: 0,
                                cachedFragment: null,
                                hasRendered: !1,
                                build: function (e) {
                                    var t = e.createDocumentFragment(),
                                        a = e.createTextNode("      ");
                                    e.appendChild(t, a);
                                    var a = e.createElement("div");
                                    e.setAttribute(a, "class", "follow-metrics");
                                    var n = e.createTextNode("\n");
                                    e.appendChild(a, n);
                                    var n = e.createComment("");
                                    e.appendChild(a, n);
                                    var n = e.createTextNode("        ");
                                    e.appendChild(a, n);
                                    var n = e.createElement("div");
                                    e.setAttribute(n, "class", "followers");
                                    var r = e.createTextNode("\n          ");
                                    e.appendChild(n, r);
                                    var r = e.createElement("div");
                                    e.setAttribute(r, "class", "metric-count");
                                    var i = e.createComment("");
                                    e.appendChild(r, i), e.appendChild(n, r);
                                    var r = e.createTextNode("\n          ");
                                    e.appendChild(n, r);
                                    var r = e.createElement("div");
                                    e.setAttribute(r, "class", "metric-name");
                                    var i = e.createTextNode("Followers");
                                    e.appendChild(r, i), e.appendChild(n, r);
                                    var r = e.createTextNode("\n        ");
                                    e.appendChild(n, r), e.appendChild(a, n);
                                    var n = e.createTextNode("\n        ");
                                    e.appendChild(a, n);
                                    var n = e.createElement("div");
                                    e.setAttribute(n, "class", "following");
                                    var r = e.createTextNode("\n          ");
                                    e.appendChild(n, r);
                                    var r = e.createElement("div");
                                    e.setAttribute(r, "class", "metric-count");
                                    var i = e.createComment("");
                                    e.appendChild(r, i), e.appendChild(n, r);
                                    var r = e.createTextNode("\n          ");
                                    e.appendChild(n, r);
                                    var r = e.createElement("div");
                                    e.setAttribute(r, "class", "metric-name");
                                    var i = e.createTextNode("Following");
                                    e.appendChild(r, i), e.appendChild(n, r);
                                    var r = e.createTextNode("\n        ");
                                    e.appendChild(n, r), e.appendChild(a, n);
                                    var n = e.createTextNode("\n      ");
                                    e.appendChild(a, n), e.appendChild(t, a);
                                    var a = e.createTextNode("\n");
                                    return e.appendChild(t, a), t
                                },
                                render: function (a, n, r) {
                                    var i = n.dom,
                                        d = n.hooks,
                                        s = d.get,
                                        c = d.block,
                                        o = d.inline;
                                    i.detectNamespace(r);
                                    var l;
                                    n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (l = this.build(i), this.hasRendered ? this.cachedFragment = l : this.hasRendered = !0), this.cachedFragment && (l = i.cloneNode(this.cachedFragment, !0))) : l = this.build(i);
                                    var h = i.childAt(l, [1]),
                                        u = i.createMorphAt(h, 1, 1),
                                        p = i.createMorphAt(i.childAt(h, [3, 1]), 0, 0),
                                        m = i.createMorphAt(i.childAt(h, [5, 1]), 0, 0);
                                    return c(n, u, a, "if", [s(n, a, "loopCount")], {}, e, t), o(n, p, a, "format-count", [s(n, a, "followerCount")], {}), o(n, m, a, "format-count", [s(n, a, "followingCount")], {}), l
                                }
                            }
                        }();
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createComment("");
                                return e.appendChild(t, a), t
                            },
                            render: function (t, a, n) {
                                var r = a.dom,
                                    i = a.hooks,
                                    d = i.get,
                                    s = i.block;
                                r.detectNamespace(n);
                                var c;
                                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r), this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0), this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                                var o = r.createMorphAt(c, 0, 0, n);
                                return r.insertBoundary(c, null), r.insertBoundary(c, 0), s(a, o, t, "with", [d(a, t, "user")], {}, e, null), c
                            }
                        }
                    }(),
                    t = function () {
                        var e = function () {
                            return {
                                isHTMLBars: !0,
                                revision: "Ember@1.11.3",
                                blockParams: 0,
                                cachedFragment: null,
                                hasRendered: !1,
                                build: function (e) {
                                    var t = e.createDocumentFragment(),
                                        a = e.createTextNode("      ");
                                    e.appendChild(t, a);
                                    var a = e.createElement("button");
                                    e.setAttribute(a, "class", "settings");
                                    var n = e.createTextNode("\n        ");
                                    e.appendChild(a, n);
                                    var n = e.createElement("div");
                                    e.setAttribute(n, "class", "button-icon");
                                    var r = e.createElement("div");
                                    e.setAttribute(r, "class", "icon-settings"), e.appendChild(n, r), e.appendChild(a, n);
                                    var n = e.createTextNode("\n        Settings\n      ");
                                    e.appendChild(a, n), e.appendChild(t, a);
                                    var a = e.createTextNode("\n");
                                    return e.appendChild(t, a), t
                                },
                                render: function (e, t, a) {
                                    var n = t.dom;
                                    n.detectNamespace(a);
                                    var r;
                                    return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n), this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0), this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n), r
                                }
                            }
                        }();
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createComment("");
                                return e.appendChild(t, a), t
                            },
                            render: function (t, a, n) {
                                var r = a.dom,
                                    i = a.hooks,
                                    d = i.block;
                                r.detectNamespace(n);
                                var s;
                                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                                var c = r.createMorphAt(s, 0, 0, n);
                                return r.insertBoundary(s, null), r.insertBoundary(s, 0), d(a, c, t, "link-to", ["settings"], {}, e, null), s
                            }
                        }
                    }(),
                    a = function () {
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createTextNode("    ");
                                e.appendChild(t, a);
                                var a = e.createComment("");
                                e.appendChild(t, a);
                                var a = e.createTextNode("\n");
                                return e.appendChild(t, a), t
                            },
                            render: function (e, t, a) {
                                var n = t.dom,
                                    r = t.hooks,
                                    i = r.get,
                                    d = r.inline;
                                n.detectNamespace(a);
                                var s;
                                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                                var c = n.createMorphAt(s, 1, 1, a);
                                return d(t, c, e, "follow-button", [], {
                                    user: i(t, e, "user"),
                                    cssClass: "follow-button-large"
                                }), s
                            }
                        }
                    }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        return e.appendChild(t, a), t
                    },
                    render: function (n, r, i) {
                        var d = r.dom,
                            s = r.hooks,
                            c = s.get,
                            o = s.block;
                        d.detectNamespace(i);
                        var l;
                        r.useFragmentCache && d.canClone ? (null === this.cachedFragment && (l = this.build(d), this.hasRendered ? this.cachedFragment = l : this.hasRendered = !0), this.cachedFragment && (l = d.cloneNode(this.cachedFragment, !0))) : l = this.build(d);
                        var h = d.createMorphAt(l, 0, 0, i),
                            u = d.createMorphAt(l, 2, 2, i);
                        return d.insertBoundary(l, null), d.insertBoundary(l, 0), o(r, h, n, "if", [c(r, n, "showStats")], {}, e, null), o(r, u, n, "if", [c(r, n, "user.isCurrentUser")], {}, t, a), l
                    }
                }
            }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createComment("");
                e.appendChild(t, a);
                var a = e.createTextNode("\n");
                e.appendChild(t, a);
                var a = e.createElement("h5");
                e.setAttribute(a, "class", "description");
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n), e.appendChild(t, a);
                var a = e.createTextNode("\n\n");
                e.appendChild(t, a);
                var a = e.createComment("");
                return e.appendChild(t, a), t
            },
            render: function (n, r, i) {
                var d = r.dom,
                    s = r.hooks,
                    c = s.get,
                    o = s.block,
                    l = s.inline;
                d.detectNamespace(i);
                var h;
                r.useFragmentCache && d.canClone ? (null === this.cachedFragment && (h = this.build(d), this.hasRendered ? this.cachedFragment = h : this.hasRendered = !0), this.cachedFragment && (h = d.cloneNode(this.cachedFragment, !0))) : h = this.build(d);
                var u = d.childAt(h, [2]),
                    p = d.createMorphAt(h, 0, 0, i),
                    m = d.createMorphAt(u, 1, 1),
                    v = d.createMorphAt(u, 3, 3),
                    g = d.createMorphAt(h, 4, 4, i);
                return d.insertBoundary(h, null), d.insertBoundary(h, 0), o(r, p, n, "if", [c(r, n, "user.verified")], {}, e, null), l(r, m, n, "replace-emoji", [c(r, n, "user.description")], {}), o(r, v, n, "if", [c(r, n, "user.location")], {}, t, null), o(r, g, n, "unless", [c(r, n, "isBlocked")], {}, a, null), h
            }
        }
    }())
}), define("vine-ember/templates/unsubscribe-vm", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        var e = function () {
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createComment("");
                        return e.appendChild(t, a), t
                    },
                    render: function (e, t, a) {
                        var n = t.dom,
                            r = t.hooks,
                            i = r.inline;
                        n.detectNamespace(a);
                        var d;
                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                        var s = n.createMorphAt(d, 0, 0, a);
                        return n.insertBoundary(d, null), n.insertBoundary(d, 0), i(t, s, e, "cdn-img", [], {
                            src: "images/vine_logo_white.svg",
                            width: "auto",
                            height: "106",
                            "class": "logo"
                        }), d
                    }
                }
            }(),
            t = function () {
                var e = function () {
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createTextNode("        You've unsubscribed from Vine message emails. For the best experience get the app.\n");
                                return e.appendChild(t, a), t
                            },
                            render: function (e, t, a) {
                                var n = t.dom;
                                n.detectNamespace(a);
                                var r;
                                return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n), this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0), this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n), r
                            }
                        }
                    }(),
                    t = function () {
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createTextNode("        Oops.  Looks like something went wrong. For the best experience get the app.\n");
                                return e.appendChild(t, a), t
                            },
                            render: function (e, t, a) {
                                var n = t.dom;
                                n.detectNamespace(a);
                                var r;
                                return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n), this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0), this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n), r
                            }
                        }
                    }(),
                    a = function () {
                        var e = function () {
                            return {
                                isHTMLBars: !0,
                                revision: "Ember@1.11.3",
                                blockParams: 0,
                                cachedFragment: null,
                                hasRendered: !1,
                                build: function (e) {
                                    var t = e.createDocumentFragment(),
                                        a = e.createElement("button");
                                    e.setAttribute(a, "class", "confirm");
                                    var n = e.createTextNode("Continue");
                                    return e.appendChild(a, n), e.appendChild(t, a), t
                                },
                                render: function (e, t, a) {
                                    var n = t.dom;
                                    n.detectNamespace(a);
                                    var r;
                                    return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n), this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0), this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n), r
                                }
                            }
                        }();
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createTextNode("      ");
                                e.appendChild(t, a);
                                var a = e.createComment("");
                                e.appendChild(t, a);
                                var a = e.createTextNode("\n");
                                return e.appendChild(t, a), t
                            },
                            render: function (t, a, n) {
                                var r = a.dom,
                                    i = a.hooks,
                                    d = i.block;
                                r.detectNamespace(n);
                                var s;
                                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                                var c = r.createMorphAt(s, 1, 1, n);
                                return d(a, c, t, "link-to", ["feed"], {}, e, null), s
                            }
                        }
                    }(),
                    n = function () {
                        var e = function () {
                            return {
                                isHTMLBars: !0,
                                revision: "Ember@1.11.3",
                                blockParams: 0,
                                cachedFragment: null,
                                hasRendered: !1,
                                build: function (e) {
                                    var t = e.createDocumentFragment(),
                                        a = e.createElement("button");
                                    e.setAttribute(a, "class", "confirm");
                                    var n = e.createTextNode("Continue");
                                    return e.appendChild(a, n), e.appendChild(t, a), t
                                },
                                render: function (e, t, a) {
                                    var n = t.dom;
                                    n.detectNamespace(a);
                                    var r;
                                    return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n), this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0), this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n), r
                                }
                            }
                        }();
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createTextNode("      ");
                                e.appendChild(t, a);
                                var a = e.createComment("");
                                e.appendChild(t, a);
                                var a = e.createTextNode("\n");
                                return e.appendChild(t, a), t
                            },
                            render: function (t, a, n) {
                                var r = a.dom,
                                    i = a.hooks,
                                    d = i.block;
                                r.detectNamespace(n);
                                var s;
                                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                                var c = r.createMorphAt(s, 1, 1, n);
                                return d(a, c, t, "link-to", ["index"], {}, e, null), s
                            }
                        }
                    }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("    ");
                        e.appendChild(t, a);
                        var a = e.createElement("h4"),
                            n = e.createTextNode("\n");
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        e.appendChild(a, n);
                        var n = e.createTextNode("    ");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n\n    ");
                        e.appendChild(t, a);
                        var a = e.createElement("a");
                        e.setAttribute(a, "href", "https://web.archive.org/web/20150701150124/https://itunes.apple.com/us/app/vine/id592447445?mt=8&uo=4&at=10lmBm&ct=Vine_Homepage_Download"), e.setAttribute(a, "target", "_blank");
                        var n = e.createTextNode("\n      ");
                        e.appendChild(a, n);
                        var n = e.createElement("button");
                        e.setAttribute(n, "class", "app-icon white ios"), e.appendChild(a, n);
                        var n = e.createTextNode("\n    ");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n    ");
                        e.appendChild(t, a);
                        var a = e.createElement("a");
                        e.setAttribute(a, "href", "https://web.archive.org/web/20150701150124/https://play.google.com/store/apps/details?id=co.vine.android"), e.setAttribute(a, "target", "_blank");
                        var n = e.createTextNode("\n      ");
                        e.appendChild(a, n);
                        var n = e.createElement("button");
                        e.setAttribute(n, "class", "app-icon white android"), e.appendChild(a, n);
                        var n = e.createTextNode("\n    ");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n    ");
                        e.appendChild(t, a);
                        var a = e.createElement("a");
                        e.setAttribute(a, "href", "https://web.archive.org/web/20150701150124/http://www.windowsphone.com/s?appid=f9e6f07e-e47e-47f5-806d-55d4f79f2b60"), e.setAttribute(a, "target", "_blank");
                        var n = e.createTextNode("\n      ");
                        e.appendChild(a, n);
                        var n = e.createElement("button");
                        e.setAttribute(n, "class", "app-icon white windows"), e.appendChild(a, n);
                        var n = e.createTextNode("\n    ");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n\n    ");
                        e.appendChild(t, a);
                        var a = e.createElement("br");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n\n");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (r, i, d) {
                        var s = i.dom,
                            c = i.hooks,
                            o = c.get,
                            l = c.block;
                        s.detectNamespace(d);
                        var h;
                        i.useFragmentCache && s.canClone ? (null === this.cachedFragment && (h = this.build(s), this.hasRendered ? this.cachedFragment = h : this.hasRendered = !0), this.cachedFragment && (h = s.cloneNode(this.cachedFragment, !0))) : h = this.build(s);
                        var u = s.createMorphAt(s.childAt(h, [1]), 1, 1),
                            p = s.createMorphAt(h, 11, 11, d);
                        return l(i, u, r, "if", [o(i, r, "unsubscribed")], {}, e, t), l(i, p, r, "if", [o(i, r, "session.isAuthenticated")], {}, a, n), h
                    }
                }
            }(),
            a = function () {
                var e = function () {
                        var e = function () {
                            return {
                                isHTMLBars: !0,
                                revision: "Ember@1.11.3",
                                blockParams: 0,
                                cachedFragment: null,
                                hasRendered: !1,
                                build: function (e) {
                                    var t = e.createDocumentFragment(),
                                        a = e.createElement("button"),
                                        n = e.createTextNode("Cancel");
                                    return e.appendChild(a, n), e.appendChild(t, a), t
                                },
                                render: function (e, t, a) {
                                    var n = t.dom;
                                    n.detectNamespace(a);
                                    var r;
                                    return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n), this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0), this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n), r
                                }
                            }
                        }();
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createTextNode("      ");
                                e.appendChild(t, a);
                                var a = e.createComment("");
                                e.appendChild(t, a);
                                var a = e.createTextNode("\n");
                                return e.appendChild(t, a), t
                            },
                            render: function (t, a, n) {
                                var r = a.dom,
                                    i = a.hooks,
                                    d = i.block;
                                r.detectNamespace(n);
                                var s;
                                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                                var c = r.createMorphAt(s, 1, 1, n);
                                return d(a, c, t, "link-to", ["feed"], {}, e, null), s
                            }
                        }
                    }(),
                    t = function () {
                        var e = function () {
                            return {
                                isHTMLBars: !0,
                                revision: "Ember@1.11.3",
                                blockParams: 0,
                                cachedFragment: null,
                                hasRendered: !1,
                                build: function (e) {
                                    var t = e.createDocumentFragment(),
                                        a = e.createElement("button"),
                                        n = e.createTextNode("Cancel");
                                    return e.appendChild(a, n), e.appendChild(t, a), t
                                },
                                render: function (e, t, a) {
                                    var n = t.dom;
                                    n.detectNamespace(a);
                                    var r;
                                    return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n), this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0), this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n), r
                                }
                            }
                        }();
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createTextNode("      ");
                                e.appendChild(t, a);
                                var a = e.createComment("");
                                e.appendChild(t, a);
                                var a = e.createTextNode("\n");
                                return e.appendChild(t, a), t
                            },
                            render: function (t, a, n) {
                                var r = a.dom,
                                    i = a.hooks,
                                    d = i.block;
                                r.detectNamespace(n);
                                var s;
                                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (s = this.build(r), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = r.cloneNode(this.cachedFragment, !0))) : s = this.build(r);
                                var c = r.createMorphAt(s, 1, 1, n);
                                return d(a, c, t, "link-to", ["index"], {}, e, null), s
                            }
                        }
                    }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("    ");
                        e.appendChild(t, a);
                        var a = e.createElement("h4"),
                            n = e.createTextNode("Are you sure you don't want to receive any more Vine messages to your email?");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n    ");
                        e.appendChild(t, a);
                        var a = e.createElement("button");
                        e.setAttribute(a, "class", "confirm unsubscribe");
                        var n = e.createTextNode("Unsubscribe");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        e.appendChild(t, a);
                        var a = e.createComment("");
                        return e.appendChild(t, a), t
                    },
                    render: function (a, n, r) {
                        var i = n.dom,
                            d = n.hooks,
                            s = d.element,
                            c = d.get,
                            o = d.block;
                        i.detectNamespace(r);
                        var l;
                        n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (l = this.build(i), this.hasRendered ? this.cachedFragment = l : this.hasRendered = !0), this.cachedFragment && (l = i.cloneNode(this.cachedFragment, !0))) : l = this.build(i);
                        var h = i.childAt(l, [3]),
                            u = i.createMorphAt(l, 5, 5, r);
                        return i.insertBoundary(l, null), s(n, h, a, "action", ["unsubscribe"], {}), o(n, u, a, "if", [c(n, a, "session.isAuthenticated")], {}, e, t), l
                    }
                }
            }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createElement("div"),
                    n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createTextNode("\n\n");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n), e.appendChild(t, a);
                var a = e.createTextNode("\n");
                return e.appendChild(t, a), t
            },
            render: function (n, r, i) {
                var d = r.dom,
                    s = r.hooks,
                    c = s.element,
                    o = s.block,
                    l = s.get;
                d.detectNamespace(i);
                var h;
                r.useFragmentCache && d.canClone ? (null === this.cachedFragment && (h = this.build(d), this.hasRendered ? this.cachedFragment = h : this.hasRendered = !0), this.cachedFragment && (h = d.cloneNode(this.cachedFragment, !0))) : h = this.build(d);
                var u = d.childAt(h, [0]),
                    p = d.createMorphAt(u, 1, 1),
                    m = d.createMorphAt(u, 3, 3);
                return c(r, u, n, "bind-attr", [], {
                    "class": ":confirmation confirmed"
                }), o(r, p, n, "link-to", ["index"], {}, e, null), o(r, m, n, "if", [l(r, n, "confirmed")], {}, t, a), h
            }
        }
    }())
}), define("vine-ember/templates/user-preview", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        var e = function () {
            return {
                isHTMLBars: !0,
                revision: "Ember@1.11.3",
                blockParams: 0,
                cachedFragment: null,
                hasRendered: !1,
                build: function (e) {
                    var t = e.createDocumentFragment(),
                        a = e.createElement("button"),
                        n = e.createTextNode("Reserve your URL");
                    return e.appendChild(a, n), e.appendChild(t, a), t
                },
                render: function (e, t, a) {
                    var n = t.dom;
                    n.detectNamespace(a);
                    var r;
                    return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n), this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0), this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n), r
                }
            }
        }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createElement("div");
                e.setAttribute(a, "class", "login-page");
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("h2"),
                    r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("strong"),
                    i = e.createComment("");
                e.appendChild(r, i);
                var i = e.createTextNode("'s web profile is coming soon.");
                e.appendChild(r, i), e.appendChild(n, r);
                var r = e.createElement("br");
                e.appendChild(n, r);
                var r = e.createTextNode("\n    Have a Vine account?\n  ");
                e.appendChild(n, r), e.appendChild(a, n);
                var n = e.createTextNode("\n\n  ");
                e.appendChild(a, n);
                var n = e.createComment("");
                e.appendChild(a, n);
                var n = e.createTextNode("\n");
                e.appendChild(a, n), e.appendChild(t, a);
                var a = e.createTextNode("\n\n");
                e.appendChild(t, a);
                var a = e.createElement("div");
                e.setAttribute(a, "class", "custom-url-footer");
                var n = e.createTextNode("\n  ");
                e.appendChild(a, n);
                var n = e.createElement("div");
                e.setAttribute(n, "class", "custom-url-footer-content");
                var r = e.createTextNode("\n    ");
                e.appendChild(n, r);
                var r = e.createElement("h5"),
                    i = e.createTextNode("\n      Don't have a Vine account? Get the app to register.");
                e.appendChild(r, i);
                var i = e.createElement("br");
                e.appendChild(r, i);
                var i = e.createTextNode("Available free on\n      ");
                e.appendChild(r, i);
                var i = e.createElement("a");
                e.setAttribute(i, "href", "https://web.archive.org/web/20150701150124/https://itunes.apple.com/us/app/vine/id592447445?mt=8&uo=4&at=10lmBm&ct=Vine_Homepage_Download");
                var d = e.createTextNode("iPhone");
                e.appendChild(i, d), e.appendChild(r, i);
                var i = e.createTextNode(",\n      ");
                e.appendChild(r, i);
                var i = e.createElement("a");
                e.setAttribute(i, "href", "https://web.archive.org/web/20150701150124/https://play.google.com/store/apps/details?id=co.vine.android");
                var d = e.createTextNode("Android");
                e.appendChild(i, d), e.appendChild(r, i);
                var i = e.createTextNode(" and\n      ");
                e.appendChild(r, i);
                var i = e.createElement("a");
                e.setAttribute(i, "href", "https://web.archive.org/web/20150701150124/http://www.windowsphone.com/s?appid=f9e6f07e-e47e-47f5-806d-55d4f79f2b60");
                var d = e.createTextNode("Windows Phone");
                e.appendChild(i, d), e.appendChild(r, i);
                var i = e.createTextNode(".\n    ");
                e.appendChild(r, i), e.appendChild(n, r);
                var r = e.createTextNode("\n\n    ");
                e.appendChild(n, r);
                var r = e.createElement("h5"),
                    i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("a");
                e.setAttribute(i, "href", "/help");
                var d = e.createTextNode("FAQ");
                e.appendChild(i, d), e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("span");
                e.setAttribute(i, "class", "dot");
                var d = e.createTextNode("·");
                e.appendChild(i, d), e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("a");
                e.setAttribute(i, "href", "/contact");
                var d = e.createTextNode("Contact Support");
                e.appendChild(i, d), e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("span");
                e.setAttribute(i, "class", "dot");
                var d = e.createTextNode("·");
                e.appendChild(i, d), e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("a");
                e.setAttribute(i, "href", "/terms"), e.setAttribute(i, "class", "terms");
                var d = e.createTextNode("Terms");
                e.appendChild(i, d), e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("span");
                e.setAttribute(i, "class", "dot");
                var d = e.createTextNode("·");
                e.appendChild(i, d), e.appendChild(r, i);
                var i = e.createTextNode("\n      ");
                e.appendChild(r, i);
                var i = e.createElement("a");
                e.setAttribute(i, "href", "/privacy"), e.setAttribute(i, "class", "terms");
                var d = e.createTextNode("Privacy");
                e.appendChild(i, d), e.appendChild(r, i);
                var i = e.createTextNode("\n    ");
                e.appendChild(r, i), e.appendChild(n, r);
                var r = e.createTextNode("\n  ");
                e.appendChild(n, r), e.appendChild(a, n);
                var n = e.createTextNode("\n");
                return e.appendChild(a, n), e.appendChild(t, a), t
            },
            render: function (t, a, n) {
                var r = a.dom,
                    i = a.hooks,
                    d = i.get,
                    s = i.inline,
                    c = i.content,
                    o = i.block,
                    l = i.element;
                r.detectNamespace(n);
                var h;
                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (h = this.build(r), this.hasRendered ? this.cachedFragment = h : this.hasRendered = !0), this.cachedFragment && (h = r.cloneNode(this.cachedFragment, !0))) : h = this.build(r);
                var u = r.childAt(h, [0]),
                    p = r.childAt(h, [2, 1, 1]),
                    m = r.createMorphAt(u, 1, 1),
                    v = r.createMorphAt(r.childAt(u, [3, 1]), 0, 0),
                    g = r.createMorphAt(u, 5, 5);
                return s(a, m, t, "secure-img", [], {
                    src: d(a, t, "user.avatarUrl"),
                    "class": "avatar"
                }), c(a, v, t, "user.username"), o(a, g, t, "link-to", ["custom-url.login"], {}, e, null), l(a, p, t, "bind-attr", [], {
                    "class": "showRegistration:hidden preview:hidden"
                }), h
            }
        }
    }())
}), define("vine-ember/templates/vm-post", ["exports"], function (e) {
    "use strict";
    e["default"] = Ember.HTMLBars.template(function () {
        var e = function () {
                var e = function () {
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createComment("");
                                return e.appendChild(t, a), t
                            },
                            render: function (e, t, a) {
                                var n = t.dom,
                                    r = t.hooks,
                                    i = r.inline;
                                n.detectNamespace(a);
                                var d;
                                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                                var s = n.createMorphAt(d, 0, 0, a);
                                return n.insertBoundary(d, null), n.insertBoundary(d, 0), i(t, s, e, "cdn-img", [], {
                                    src: "images/vine_logo_white.svg",
                                    width: "auto",
                                    height: "106",
                                    "class": "logo"
                                }), d
                            }
                        }
                    }(),
                    t = function () {
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createTextNode("      ");
                                e.appendChild(t, a);
                                var a = e.createElement("h2"),
                                    n = e.createTextNode("We've emailed you a new link but for the best experience get the app.");
                                e.appendChild(a, n), e.appendChild(t, a);
                                var a = e.createTextNode("\n");
                                return e.appendChild(t, a), t
                            },
                            render: function (e, t, a) {
                                var n = t.dom;
                                n.detectNamespace(a);
                                var r;
                                return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n), this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0), this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n), r
                            }
                        }
                    }(),
                    a = function () {
                        var e = function () {
                                return {
                                    isHTMLBars: !0,
                                    revision: "Ember@1.11.3",
                                    blockParams: 0,
                                    cachedFragment: null,
                                    hasRendered: !1,
                                    build: function (e) {
                                        var t = e.createDocumentFragment(),
                                            a = e.createTextNode("          ");
                                        e.appendChild(t, a);
                                        var a = e.createComment("");
                                        e.appendChild(t, a);
                                        var a = e.createTextNode("\n");
                                        return e.appendChild(t, a), t
                                    },
                                    render: function (e, t, a) {
                                        var n = t.dom,
                                            r = t.hooks,
                                            i = r.content;
                                        n.detectNamespace(a);
                                        var d;
                                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                                        var s = n.createMorphAt(d, 1, 1, a);
                                        return i(t, s, e, "confirmation.error.message"), d
                                    }
                                }
                            }(),
                            t = function () {
                                return {
                                    isHTMLBars: !0,
                                    revision: "Ember@1.11.3",
                                    blockParams: 0,
                                    cachedFragment: null,
                                    hasRendered: !1,
                                    build: function (e) {
                                        var t = e.createDocumentFragment(),
                                            a = e.createTextNode("          Oops.  Looks like something went wrong.\n");
                                        return e.appendChild(t, a), t
                                    },
                                    render: function (e, t, a) {
                                        var n = t.dom;
                                        n.detectNamespace(a);
                                        var r;
                                        return t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (r = this.build(n), this.hasRendered ? this.cachedFragment = r : this.hasRendered = !0), this.cachedFragment && (r = n.cloneNode(this.cachedFragment, !0))) : r = this.build(n), r
                                    }
                                }
                            }();
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createTextNode("      ");
                                e.appendChild(t, a);
                                var a = e.createElement("h2"),
                                    n = e.createTextNode("\n");
                                e.appendChild(a, n);
                                var n = e.createComment("");
                                e.appendChild(a, n);
                                var n = e.createTextNode("        For the best experience get the app.\n      ");
                                e.appendChild(a, n), e.appendChild(t, a);
                                var a = e.createTextNode("\n");
                                return e.appendChild(t, a), t
                            },
                            render: function (a, n, r) {
                                var i = n.dom,
                                    d = n.hooks,
                                    s = d.get,
                                    c = d.block;
                                i.detectNamespace(r);
                                var o;
                                n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (o = this.build(i), this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0), this.cachedFragment && (o = i.cloneNode(this.cachedFragment, !0))) : o = this.build(i);
                                var l = i.createMorphAt(i.childAt(o, [1]), 1, 1);
                                return c(n, l, a, "if", [s(n, a, "confirmation.error.message")], {}, e, t), o
                            }
                        }
                    }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("  ");
                        e.appendChild(t, a);
                        var a = e.createElement("div");
                        e.setAttribute(a, "class", "confirmation");
                        var n = e.createTextNode("\n    ");
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        e.appendChild(a, n);
                        var n = e.createTextNode("\n\n");
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        e.appendChild(a, n);
                        var n = e.createTextNode("\n");
                        e.appendChild(a, n);
                        var n = e.createComment("");
                        e.appendChild(a, n);
                        var n = e.createTextNode("\n    ");
                        e.appendChild(a, n);
                        var n = e.createElement("a");
                        e.setAttribute(n, "href", "https://web.archive.org/web/20150701150124/https://itunes.apple.com/us/app/vine/id592447445?mt=8&uo=4&at=10lmBm&ct=Vine_Homepage_Download"), e.setAttribute(n, "target", "_blank");
                        var r = e.createTextNode("\n      ");
                        e.appendChild(n, r);
                        var r = e.createElement("button");
                        e.setAttribute(r, "class", "app-icon white ios"), e.appendChild(n, r);
                        var r = e.createTextNode("\n    ");
                        e.appendChild(n, r), e.appendChild(a, n);
                        var n = e.createTextNode("\n    ");
                        e.appendChild(a, n);
                        var n = e.createElement("a");
                        e.setAttribute(n, "href", "https://web.archive.org/web/20150701150124/https://play.google.com/store/apps/details?id=co.vine.android"), e.setAttribute(n, "target", "_blank");
                        var r = e.createTextNode("\n      ");
                        e.appendChild(n, r);
                        var r = e.createElement("button");
                        e.setAttribute(r, "class", "app-icon white android"),
                            e.appendChild(n, r);
                        var r = e.createTextNode("\n    ");
                        e.appendChild(n, r), e.appendChild(a, n);
                        var n = e.createTextNode("\n    ");
                        e.appendChild(a, n);
                        var n = e.createElement("a");
                        e.setAttribute(n, "href", "https://web.archive.org/web/20150701150124/http://www.windowsphone.com/s?appid=f9e6f07e-e47e-47f5-806d-55d4f79f2b60"), e.setAttribute(n, "target", "_blank");
                        var r = e.createTextNode("\n      ");
                        e.appendChild(n, r);
                        var r = e.createElement("button");
                        e.setAttribute(r, "class", "app-icon white windows"), e.appendChild(n, r);
                        var r = e.createTextNode("\n    ");
                        e.appendChild(n, r), e.appendChild(a, n);
                        var n = e.createTextNode("\n  ");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (n, r, i) {
                        var d = r.dom,
                            s = r.hooks,
                            c = s.block,
                            o = s.get;
                        d.detectNamespace(i);
                        var l;
                        r.useFragmentCache && d.canClone ? (null === this.cachedFragment && (l = this.build(d), this.hasRendered ? this.cachedFragment = l : this.hasRendered = !0), this.cachedFragment && (l = d.cloneNode(this.cachedFragment, !0))) : l = this.build(d);
                        var h = d.childAt(l, [1]),
                            u = d.createMorphAt(h, 1, 1),
                            p = d.createMorphAt(h, 3, 3),
                            m = d.createMorphAt(h, 5, 5);
                        return c(r, u, n, "link-to", ["index"], {}, e, null), c(r, p, n, "if", [o(r, n, "confirmation.resent")], {}, t, null), c(r, m, n, "if", [o(r, n, "confirmation.error")], {}, a, null), l
                    }
                }
            }(),
            t = function () {
                var e = function () {
                        var e = function () {
                            return {
                                isHTMLBars: !0,
                                revision: "Ember@1.11.3",
                                blockParams: 0,
                                cachedFragment: null,
                                hasRendered: !1,
                                build: function (e) {
                                    var t = e.createDocumentFragment(),
                                        a = e.createTextNode("            ");
                                    e.appendChild(t, a);
                                    var a = e.createElement("div");
                                    e.setAttribute(a, "class", "vine-player");
                                    var n = e.createTextNode("\n              ");
                                    e.appendChild(a, n);
                                    var n = e.createElement("div");
                                    e.setAttribute(n, "class", "vine-video-container");
                                    var r = e.createTextNode("\n                ");
                                    e.appendChild(n, r);
                                    var r = e.createElement("video");
                                    e.setAttribute(r, "preload", "auto");
                                    var i = e.createTextNode("\n                  ");
                                    e.appendChild(r, i);
                                    var i = e.createElement("source");
                                    e.setAttribute(i, "type", "video/mp4"), e.appendChild(r, i);
                                    var i = e.createTextNode("\n                ");
                                    e.appendChild(r, i), e.appendChild(n, r);
                                    var r = e.createTextNode("\n              ");
                                    e.appendChild(n, r), e.appendChild(a, n);
                                    var n = e.createTextNode("\n            ");
                                    e.appendChild(a, n), e.appendChild(t, a);
                                    var a = e.createTextNode("\n            ");
                                    e.appendChild(t, a);
                                    var a = e.createElement("img");
                                    e.setAttribute(a, "class", "thumbnail"), e.appendChild(t, a);
                                    var a = e.createTextNode("\n            ");
                                    e.appendChild(t, a);
                                    var a = e.createElement("button");
                                    e.setAttribute(a, "class", "play mobile"), e.appendChild(t, a);
                                    var a = e.createTextNode("\n");
                                    return e.appendChild(t, a), t
                                },
                                render: function (e, t, a) {
                                    var n = t.dom,
                                        r = t.hooks,
                                        i = r.get,
                                        d = r.element;
                                    n.detectNamespace(a);
                                    var s;
                                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                                    var c = n.childAt(s, [1, 1, 1, 1]),
                                        o = n.childAt(s, [3]),
                                        l = n.childAt(s, [5]);
                                    return d(t, c, e, "bind-attr", [], {
                                        src: i(t, e, "secureVideoUrl")
                                    }), d(t, o, e, "bind-attr", [], {
                                        src: i(t, e, "secureThumbnailUrl")
                                    }), d(t, l, e, "action", ["play"], {
                                        target: "view"
                                    }), d(t, l, e, "bind-attr", [], {
                                        style: i(t, e, "backgroundColorStyle")
                                    }), s
                                }
                            }
                        }();
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createComment("");
                                return e.appendChild(t, a), t
                            },
                            render: function (t, a, n) {
                                var r = a.dom,
                                    i = a.hooks,
                                    d = i.get,
                                    s = i.block;
                                r.detectNamespace(n);
                                var c;
                                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (c = this.build(r), this.hasRendered ? this.cachedFragment = c : this.hasRendered = !0), this.cachedFragment && (c = r.cloneNode(this.cachedFragment, !0))) : c = this.build(r);
                                var o = r.createMorphAt(c, 0, 0, n);
                                return r.insertBoundary(c, null), r.insertBoundary(c, 0), s(a, o, t, "if", [d(a, t, "isMobile")], {}, e, null), c
                            }
                        }
                    }(),
                    t = function () {
                        var e = function () {
                            return {
                                isHTMLBars: !0,
                                revision: "Ember@1.11.3",
                                blockParams: 0,
                                cachedFragment: null,
                                hasRendered: !1,
                                build: function (e) {
                                    var t = e.createDocumentFragment(),
                                        a = e.createTextNode("            ");
                                    e.appendChild(t, a);
                                    var a = e.createElement("div");
                                    e.setAttribute(a, "class", "overlay mobile-mask"), e.appendChild(t, a);
                                    var a = e.createTextNode("\n");
                                    return e.appendChild(t, a), t
                                },
                                render: function (e, t, a) {
                                    var n = t.dom,
                                        r = t.hooks,
                                        i = r.get,
                                        d = r.element;
                                    n.detectNamespace(a);
                                    var s;
                                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                                    var c = n.childAt(s, [1]);
                                    return d(t, c, e, "bind-attr", [], {
                                        style: i(t, e, "backgroundColorStyle")
                                    }), s
                                }
                            }
                        }();
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createComment("");
                                e.appendChild(t, a);
                                var a = e.createTextNode("          ");
                                e.appendChild(t, a);
                                var a = e.createElement("div");
                                e.setAttribute(a, "class", "overlay");
                                var n = e.createTextNode("\n            ");
                                e.appendChild(a, n);
                                var n = e.createElement("div");
                                e.setAttribute(n, "class", "expired-logo"), e.appendChild(a, n);
                                var n = e.createTextNode("\n          ");
                                e.appendChild(a, n), e.appendChild(t, a);
                                var a = e.createTextNode("\n");
                                return e.appendChild(t, a), t
                            },
                            render: function (t, a, n) {
                                var r = a.dom,
                                    i = a.hooks,
                                    d = i.get,
                                    s = i.block,
                                    c = i.element;
                                r.detectNamespace(n);
                                var o;
                                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (o = this.build(r), this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0), this.cachedFragment && (o = r.cloneNode(this.cachedFragment, !0))) : o = this.build(r);
                                var l = r.childAt(o, [2, 1]),
                                    h = r.createMorphAt(o, 0, 0, n);
                                return r.insertBoundary(o, 0), s(a, h, t, "if", [d(a, t, "isMobile")], {}, e, null), c(a, l, t, "bind-attr", [], {
                                    style: d(a, t, "backgroundColorStyle")
                                }), o
                            }
                        }
                    }(),
                    a = function () {
                        var e = function () {
                            return {
                                isHTMLBars: !0,
                                revision: "Ember@1.11.3",
                                blockParams: 0,
                                cachedFragment: null,
                                hasRendered: !1,
                                build: function (e) {
                                    var t = e.createDocumentFragment(),
                                        a = e.createTextNode("              ");
                                    e.appendChild(t, a);
                                    var a = e.createElement("a");
                                    e.setAttribute(a, "href", "#");
                                    var n = e.createTextNode("\n                ");
                                    e.appendChild(a, n);
                                    var n = e.createElement("h5"),
                                        r = e.createTextNode("I want to see it again");
                                    e.appendChild(n, r), e.appendChild(a, n);
                                    var n = e.createTextNode("\n              ");
                                    e.appendChild(a, n), e.appendChild(t, a);
                                    var a = e.createTextNode("\n");
                                    return e.appendChild(t, a), t
                                },
                                render: function (e, t, a) {
                                    var n = t.dom,
                                        r = t.hooks,
                                        i = r.element,
                                        d = r.get;
                                    n.detectNamespace(a);
                                    var s;
                                    t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                                    var c = n.childAt(s, [1]),
                                        o = n.childAt(c, [1]);
                                    return i(t, c, e, "action", ["resendLink"], {}), i(t, o, e, "bind-attr", [], {
                                        style: d(t, e, "textColorStyle")
                                    }), s
                                }
                            }
                        }();
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createTextNode("          ");
                                e.appendChild(t, a);
                                var a = e.createElement("div");
                                e.setAttribute(a, "class", "expired-container");
                                var n = e.createTextNode("\n            ");
                                e.appendChild(a, n);
                                var n = e.createElement("h3"),
                                    r = e.createTextNode("\n              ");
                                e.appendChild(n, r);
                                var r = e.createComment("");
                                e.appendChild(n, r);
                                var r = e.createTextNode("\n            ");
                                e.appendChild(n, r), e.appendChild(a, n);
                                var n = e.createTextNode("\n            ");
                                e.appendChild(a, n);
                                var n = e.createElement("a");
                                e.setAttribute(n, "href", "https://web.archive.org/web/20150701150124/https://itunes.apple.com/us/app/vine/id592447445?mt=8&uo=4&at=10lmBm&ct=Vine_Homepage_Download"), e.setAttribute(n, "target", "_blank");
                                var r = e.createTextNode("\n              ");
                                e.appendChild(n, r);
                                var r = e.createElement("button");
                                e.setAttribute(r, "class", "app-icon ios"), e.appendChild(n, r);
                                var r = e.createTextNode("\n            ");
                                e.appendChild(n, r), e.appendChild(a, n);
                                var n = e.createTextNode("\n            ");
                                e.appendChild(a, n);
                                var n = e.createElement("a");
                                e.setAttribute(n, "href", "https://web.archive.org/web/20150701150124/https://play.google.com/store/apps/details?id=co.vine.android"), e.setAttribute(n, "target", "_blank");
                                var r = e.createTextNode("\n              ");
                                e.appendChild(n, r);
                                var r = e.createElement("button");
                                e.setAttribute(r, "class", "app-icon android"), e.appendChild(n, r);
                                var r = e.createTextNode("\n            ");
                                e.appendChild(n, r), e.appendChild(a, n);
                                var n = e.createTextNode("\n            ");
                                e.appendChild(a, n);
                                var n = e.createElement("a");
                                e.setAttribute(n, "href", "https://web.archive.org/web/20150701150124/http://www.windowsphone.com/s?appid=f9e6f07e-e47e-47f5-806d-55d4f79f2b60"), e.setAttribute(n, "target", "_blank");
                                var r = e.createTextNode("\n              ");
                                e.appendChild(n, r);
                                var r = e.createElement("button");
                                e.setAttribute(r, "class", "app-icon windows"), e.appendChild(n, r);
                                var r = e.createTextNode("\n            ");
                                e.appendChild(n, r), e.appendChild(a, n);
                                var n = e.createTextNode("\n          ");
                                e.appendChild(a, n), e.appendChild(t, a);
                                var a = e.createTextNode("\n\n          ");
                                e.appendChild(t, a);
                                var a = e.createElement("div");
                                e.setAttribute(a, "class", "resend-link");
                                var n = e.createTextNode("\n");
                                e.appendChild(a, n);
                                var n = e.createComment("");
                                e.appendChild(a, n);
                                var n = e.createTextNode("          ");
                                e.appendChild(a, n), e.appendChild(t, a);
                                var a = e.createTextNode("\n");
                                return e.appendChild(t, a), t
                            },
                            render: function (t, a, n) {
                                var r = a.dom,
                                    i = a.hooks,
                                    d = i.content,
                                    s = i.get,
                                    c = i.element,
                                    o = i.block;
                                r.detectNamespace(n);
                                var l;
                                a.useFragmentCache && r.canClone ? (null === this.cachedFragment && (l = this.build(r), this.hasRendered ? this.cachedFragment = l : this.hasRendered = !0), this.cachedFragment && (l = r.cloneNode(this.cachedFragment, !0))) : l = this.build(r);
                                var h = r.childAt(l, [1]),
                                    u = r.childAt(h, [3, 1]),
                                    p = r.childAt(h, [5, 1]),
                                    m = r.childAt(h, [7, 1]),
                                    v = r.createMorphAt(r.childAt(h, [1]), 1, 1),
                                    g = r.createMorphAt(r.childAt(l, [3]), 1, 1);
                                return d(a, v, t, "expiredMessage"), c(a, u, t, "bind-attr", [], {
                                    style: s(a, t, "backgroundColorStyle")
                                }), c(a, p, t, "bind-attr", [], {
                                    style: s(a, t, "backgroundColorStyle")
                                }), c(a, m, t, "bind-attr", [], {
                                    style: s(a, t, "backgroundColorStyle")
                                }), o(a, g, t, "if", [s(a, t, "resendable")], {}, e, null), l
                            }
                        }
                    }(),
                    n = function () {
                        var e = function () {
                                var e = function () {
                                        return {
                                            isHTMLBars: !0,
                                            revision: "Ember@1.11.3",
                                            blockParams: 0,
                                            cachedFragment: null,
                                            hasRendered: !1,
                                            build: function (e) {
                                                var t = e.createDocumentFragment(),
                                                    a = e.createComment("");
                                                return e.appendChild(t, a), t
                                            },
                                            render: function (e, t, a) {
                                                var n = t.dom,
                                                    r = t.hooks,
                                                    i = r.get,
                                                    d = r.inline;
                                                n.detectNamespace(a);
                                                var s;
                                                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (s = this.build(n), this.hasRendered ? this.cachedFragment = s : this.hasRendered = !0), this.cachedFragment && (s = n.cloneNode(this.cachedFragment, !0))) : s = this.build(n);
                                                var c = n.createMorphAt(s, 0, 0, a);
                                                return n.insertBoundary(s, null), n.insertBoundary(s, 0), d(t, c, e, "secure-img", [], {
                                                    src: i(t, e, "user.avatarUrl"),
                                                    "class": "avatar"
                                                }), s
                                            }
                                        }
                                    }(),
                                    t = function () {
                                        return {
                                            isHTMLBars: !0,
                                            revision: "Ember@1.11.3",
                                            blockParams: 0,
                                            cachedFragment: null,
                                            hasRendered: !1,
                                            build: function (e) {
                                                var t = e.createDocumentFragment(),
                                                    a = e.createTextNode("post by ");
                                                e.appendChild(t, a);
                                                var a = e.createComment("");
                                                return e.appendChild(t, a), t
                                            },
                                            render: function (e, t, a) {
                                                var n = t.dom,
                                                    r = t.hooks,
                                                    i = r.content;
                                                n.detectNamespace(a);
                                                var d;
                                                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                                                var s = n.createMorphAt(d, 1, 1, a);
                                                return n.insertBoundary(d, null), i(t, s, e, "post.username"), d
                                            }
                                        }
                                    }();
                                return {
                                    isHTMLBars: !0,
                                    revision: "Ember@1.11.3",
                                    blockParams: 0,
                                    cachedFragment: null,
                                    hasRendered: !1,
                                    build: function (e) {
                                        var t = e.createDocumentFragment(),
                                            a = e.createTextNode("              ");
                                        e.appendChild(t, a);
                                        var a = e.createElement("div");
                                        e.setAttribute(a, "class", "post-share");
                                        var n = e.createTextNode("\n                ");
                                        e.appendChild(a, n);
                                        var n = e.createComment("");
                                        e.appendChild(a, n);
                                        var n = e.createTextNode("\n                ");
                                        e.appendChild(a, n);
                                        var n = e.createElement("span"),
                                            r = e.createTextNode("\n                  shared a\n                  ");
                                        e.appendChild(n, r);
                                        var r = e.createComment("");
                                        e.appendChild(n, r);
                                        var r = e.createTextNode("\n                ");
                                        e.appendChild(n, r), e.appendChild(a, n);
                                        var n = e.createTextNode("\n              ");
                                        e.appendChild(a, n), e.appendChild(t, a);
                                        var a = e.createTextNode("\n              ");
                                        e.appendChild(t, a);
                                        var a = e.createElement("div");
                                        e.setAttribute(a, "class", "message");
                                        var n = e.createComment("");
                                        e.appendChild(a, n), e.appendChild(t, a);
                                        var a = e.createTextNode("\n");
                                        return e.appendChild(t, a), t
                                    },
                                    render: function (a, n, r) {
                                        var i = n.dom,
                                            d = n.hooks,
                                            s = d.get,
                                            c = d.block,
                                            o = d.content;
                                        i.detectNamespace(r);
                                        var l;
                                        n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (l = this.build(i), this.hasRendered ? this.cachedFragment = l : this.hasRendered = !0), this.cachedFragment && (l = i.cloneNode(this.cachedFragment, !0))) : l = this.build(i);
                                        var h = i.childAt(l, [1]),
                                            u = i.createMorphAt(h, 1, 1),
                                            p = i.createMorphAt(i.childAt(h, [3]), 1, 1),
                                            m = i.createMorphAt(i.childAt(l, [3]), 0, 0);
                                        return c(n, u, a, "link-user", [], {
                                            user: s(n, a, "user")
                                        }, e, null), c(n, p, a, "link-to", ["permalink-post", s(n, a, "post.shortId")], {}, t, null), o(n, m, a, "post.description"), l
                                    }
                                }
                            }(),
                            t = function () {
                                return {
                                    isHTMLBars: !0,
                                    revision: "Ember@1.11.3",
                                    blockParams: 0,
                                    cachedFragment: null,
                                    hasRendered: !1,
                                    build: function (e) {
                                        var t = e.createDocumentFragment(),
                                            a = e.createTextNode("              ");
                                        e.appendChild(t, a);
                                        var a = e.createElement("div");
                                        e.setAttribute(a, "class", "message");
                                        var n = e.createComment("");
                                        e.appendChild(a, n), e.appendChild(t, a);
                                        var a = e.createTextNode("\n");
                                        return e.appendChild(t, a), t
                                    },
                                    render: function (e, t, a) {
                                        var n = t.dom,
                                            r = t.hooks,
                                            i = r.content;
                                        n.detectNamespace(a);
                                        var d;
                                        t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                                        var s = n.createMorphAt(n.childAt(d, [1]), 0, 0);
                                        return i(t, s, e, "message"), d
                                    }
                                }
                            }();
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createTextNode("          ");
                                e.appendChild(t, a);
                                var a = e.createElement("div");
                                e.setAttribute(a, "class", "info-container");
                                var n = e.createTextNode("\n            ");
                                e.appendChild(a, n);
                                var n = e.createElement("div"),
                                    r = e.createTextNode("\n              ");
                                e.appendChild(n, r);
                                var r = e.createElement("h3");
                                e.setAttribute(r, "class", "label");
                                var i = e.createTextNode("From");
                                e.appendChild(r, i), e.appendChild(n, r);
                                var r = e.createTextNode("\n              ");
                                e.appendChild(n, r);
                                var r = e.createComment("");
                                e.appendChild(n, r);
                                var r = e.createTextNode("\n              ");
                                e.appendChild(n, r);
                                var r = e.createElement("hr");
                                e.appendChild(n, r);
                                var r = e.createTextNode("\n            ");
                                e.appendChild(n, r), e.appendChild(a, n);
                                var n = e.createTextNode("\n\n            ");
                                e.appendChild(a, n);
                                var n = e.createElement("div");
                                e.setAttribute(n, "class", "row");
                                var r = e.createTextNode("\n              ");
                                e.appendChild(n, r);
                                var r = e.createElement("h3");
                                e.setAttribute(r, "class", "label");
                                var i = e.createTextNode("To");
                                e.appendChild(r, i), e.appendChild(n, r);
                                var r = e.createTextNode("\n              ");
                                e.appendChild(n, r);
                                var r = e.createElement("span");
                                e.setAttribute(r, "class", "username recipient");
                                var i = e.createTextNode("\n                ");
                                e.appendChild(r, i);
                                var i = e.createComment("");
                                e.appendChild(r, i);
                                var i = e.createTextNode("\n              ");
                                e.appendChild(r, i), e.appendChild(n, r);
                                var r = e.createTextNode("\n            ");
                                e.appendChild(n, r), e.appendChild(a, n);
                                var n = e.createTextNode("\n            ");
                                e.appendChild(a, n);
                                var n = e.createElement("hr");
                                e.appendChild(a, n);
                                var n = e.createTextNode("\n\n");
                                e.appendChild(a, n);
                                var n = e.createComment("");
                                e.appendChild(a, n);
                                var n = e.createTextNode("\n            ");
                                e.appendChild(a, n);
                                var n = e.createElement("h5"),
                                    r = e.createComment("");
                                e.appendChild(n, r), e.appendChild(a, n);
                                var n = e.createTextNode("\n          ");
                                e.appendChild(a, n), e.appendChild(t, a);
                                var a = e.createTextNode("\n");
                                return e.appendChild(t, a), t
                            },
                            render: function (a, n, r) {
                                var i = n.dom,
                                    d = n.hooks,
                                    s = d.element,
                                    c = d.get,
                                    o = d.inline,
                                    l = d.block;
                                i.detectNamespace(r);
                                var h;
                                n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (h = this.build(i), this.hasRendered ? this.cachedFragment = h : this.hasRendered = !0), this.cachedFragment && (h = i.cloneNode(this.cachedFragment, !0))) : h = this.build(i);
                                var u = i.childAt(h, [1]),
                                    p = i.childAt(u, [1]),
                                    m = i.createMorphAt(p, 3, 3),
                                    v = i.createMorphAt(i.childAt(u, [3, 3]), 1, 1),
                                    g = i.createMorphAt(u, 7, 7),
                                    b = i.createMorphAt(i.childAt(u, [9]), 0, 0);
                                return s(n, p, a, "bind-attr", [], {
                                    "class": ":row post:hidden"
                                }), o(n, m, a, "user-info", [], {
                                    data: c(n, a, "user"),
                                    cssClass: "user-info-size-38 user-info-hide-metadata"
                                }), o(n, v, a, "user-info", [], {
                                    data: c(n, a, "recipientUser"),
                                    cssClass: "user-info-size-38 user-info-hide-metadata",
                                    delinkify: !0
                                }), l(n, g, a, "if", [c(n, a, "post")], {}, e, t), o(n, b, a, "format-date", [c(n, a, "created")], {}), h
                            }
                        }
                    }(),
                    r = function () {
                        return {
                            isHTMLBars: !0,
                            revision: "Ember@1.11.3",
                            blockParams: 0,
                            cachedFragment: null,
                            hasRendered: !1,
                            build: function (e) {
                                var t = e.createDocumentFragment(),
                                    a = e.createComment("");
                                return e.appendChild(t, a), t
                            },
                            render: function (e, t, a) {
                                var n = t.dom,
                                    r = t.hooks,
                                    i = r.inline;
                                n.detectNamespace(a);
                                var d;
                                t.useFragmentCache && n.canClone ? (null === this.cachedFragment && (d = this.build(n), this.hasRendered ? this.cachedFragment = d : this.hasRendered = !0), this.cachedFragment && (d = n.cloneNode(this.cachedFragment, !0))) : d = this.build(n);
                                var s = n.createMorphAt(d, 0, 0, a);
                                return n.insertBoundary(d, null), n.insertBoundary(d, 0), i(t, s, e, "cdn-img", [], {
                                    src: "images/vine_logo_white.svg",
                                    width: "90",
                                    height: "36"
                                }), d
                            }
                        }
                    }();
                return {
                    isHTMLBars: !0,
                    revision: "Ember@1.11.3",
                    blockParams: 0,
                    cachedFragment: null,
                    hasRendered: !1,
                    build: function (e) {
                        var t = e.createDocumentFragment(),
                            a = e.createTextNode("  ");
                        e.appendChild(t, a);
                        var a = e.createElement("div");
                        e.setAttribute(a, "class", "permalink-container");
                        var n = e.createTextNode("\n    ");
                        e.appendChild(a, n);
                        var n = e.createElement("div"),
                            r = e.createTextNode("\n      ");
                        e.appendChild(n, r);
                        var r = e.createElement("div");
                        e.setAttribute(r, "class", "video-container");
                        var i = e.createTextNode("\n");
                        e.appendChild(r, i);
                        var i = e.createComment("");
                        e.appendChild(r, i);
                        var i = e.createTextNode("\n");
                        e.appendChild(r, i);
                        var i = e.createComment("");
                        e.appendChild(r, i);
                        var i = e.createTextNode("\n        ");
                        e.appendChild(r, i);
                        var i = e.createElement("div");
                        e.setAttribute(i, "class", "loading-bar"), e.appendChild(r, i);
                        var i = e.createTextNode("\n      ");
                        e.appendChild(r, i), e.appendChild(n, r);
                        var r = e.createTextNode("\n\n\n      ");
                        e.appendChild(n, r);
                        var r = e.createElement("div");
                        e.setAttribute(r, "class", "card-content");
                        var i = e.createTextNode("\n");
                        e.appendChild(r, i);
                        var i = e.createComment("");
                        e.appendChild(r, i);
                        var i = e.createTextNode("      ");
                        e.appendChild(r, i), e.appendChild(n, r);
                        var r = e.createTextNode("\n    ");
                        e.appendChild(n, r), e.appendChild(a, n);
                        var n = e.createTextNode("\n\n    ");
                        e.appendChild(a, n);
                        var n = e.createElement("div");
                        e.setAttribute(n, "class", "made-with-vine");
                        var r = e.createTextNode("\n      ");
                        e.appendChild(n, r);
                        var r = e.createElement("h3"),
                            i = e.createTextNode("Made with");
                        e.appendChild(r, i), e.appendChild(n, r);
                        var r = e.createTextNode("\n      ");
                        e.appendChild(n, r);
                        var r = e.createComment("");
                        e.appendChild(n, r);
                        var r = e.createTextNode("\n      ");
                        e.appendChild(n, r);
                        var r = e.createElement("a");
                        e.setAttribute(r, "href", "https://web.archive.org/web/20150701150124/http://get.vine.co");
                        var i = e.createTextNode("\n        ");
                        e.appendChild(r, i);
                        var i = e.createElement("button"),
                            d = e.createTextNode("Download the App");
                        e.appendChild(i, d), e.appendChild(r, i);
                        var i = e.createTextNode("\n      ");
                        e.appendChild(r, i), e.appendChild(n, r);
                        var r = e.createTextNode("\n    ");
                        e.appendChild(n, r), e.appendChild(a, n);
                        var n = e.createTextNode("\n  ");
                        e.appendChild(a, n), e.appendChild(t, a);
                        var a = e.createTextNode("\n");
                        return e.appendChild(t, a), t
                    },
                    render: function (i, d, s) {
                        var c = d.dom,
                            o = d.hooks,
                            l = o.element,
                            h = o.get,
                            u = o.block;
                        c.detectNamespace(s);
                        var p;
                        d.useFragmentCache && c.canClone ? (null === this.cachedFragment && (p = this.build(c), this.hasRendered ? this.cachedFragment = p : this.hasRendered = !0), this.cachedFragment && (p = c.cloneNode(this.cachedFragment, !0))) : p = this.build(c);
                        var m = c.childAt(p, [1]),
                            v = c.childAt(m, [1]),
                            g = c.childAt(v, [1]),
                            b = c.childAt(m, [3]),
                            C = c.childAt(b, [5, 1]),
                            f = c.createMorphAt(g, 1, 1),
                            F = c.createMorphAt(g, 3, 3),
                            N = c.createMorphAt(c.childAt(v, [3]), 1, 1),
                            T = c.createMorphAt(b, 3, 3);
                        return l(d, v, i, "bind-attr", [], {
                            "class": ":card expired"
                        }), l(d, g, i, "bind-attr", [], {
                            style: h(d, i, "backgroundImageStyle")
                        }), u(d, f, i, "unless", [h(d, i, "expired")], {}, e, null), u(d, F, i, "if", [h(d, i, "expired")], {}, t, null), u(d, N, i, "if", [h(d, i, "expired")], {}, a, n), u(d, T, i, "link-to", ["index"], {}, r, null), l(d, C, i, "bind-attr", [], {
                            "class": ":download-app session.isAuthenticated:hidden",
                            style: h(d, i, "textColorStyle")
                        }), p
                    }
                }
            }();
        return {
            isHTMLBars: !0,
            revision: "Ember@1.11.3",
            blockParams: 0,
            cachedFragment: null,
            hasRendered: !1,
            build: function (e) {
                var t = e.createDocumentFragment(),
                    a = e.createComment("");
                return e.appendChild(t, a), t
            },
            render: function (a, n, r) {
                var i = n.dom,
                    d = n.hooks,
                    s = d.get,
                    c = d.block;
                i.detectNamespace(r);
                var o;
                n.useFragmentCache && i.canClone ? (null === this.cachedFragment && (o = this.build(i), this.hasRendered ? this.cachedFragment = o : this.hasRendered = !0), this.cachedFragment && (o = i.cloneNode(this.cachedFragment, !0))) : o = this.build(i);
                var l = i.createMorphAt(o, 0, 0, r);
                return i.insertBoundary(o, null), i.insertBoundary(o, 0), c(n, l, a, "if", [s(n, a, "confirmation")], {}, e, t), o
            }
        }
    }())
}), define("vine-ember/utils/emoji_regex", ["exports"], function (e) {
    "use strict";
    var t = /(\ud83c\uddef\ud83c\uddf5|\ud83c\uddf0\ud83c\uddf7|\ud83c\udde9\ud83c\uddea|\ud83c\udde8\ud83c\uddf3|\ud83c\uddfa\ud83c\uddf8|\ud83c\uddeb\ud83c\uddf7|\ud83c\uddea\ud83c\uddf8|\ud83c\uddee\ud83c\uddf9|\ud83c\uddf7\ud83c\uddfa|\ud83c\uddec\ud83c\udde7|\x23([\u20e3])|\x30([\u20e3])|\x31([\u20e3])|\x32([\u20e3])|\x33([\u20e3])|\x34([\u20e3])|\x35([\u20e3])|\x36([\u20e3])|\x37([\u20e3])|\x38([\u20e3])|\x39([\u20e3])|\ud83c([\udc04]|[\udccf]|[\udd70-\udd71]|[\udd7e-\udd7f]|[\udd8e]|[\udd91-\udd9a]|[\udde6-\uddff]|[\ude01-\ude02]|[\ude1a]|[\ude2f]|[\ude32-\ude3a]|[\ude50-\ude51]|[\udf00-\udf20]|[\udf30-\udf35]|[\udf37-\udf7c]|[\udf80-\udf93]|[\udfa0-\udfc4]|[\udfc6-\udfca]|[\udfe0-\udff0])|\ud83d([\udc00-\udc3e]|[\udc40]|[\udc42-\udcf7]|[\udcf9-\udcfc]|[\udd00-\udd3d]|[\udd50-\udd67]|[\uddfb-\ude40]|[\ude45-\ude4f]|[\ude80-\udec5])|[\u2712]|[\u2714]|[\u2716]|[\u2728]|[\u2733-\u2734]|[\u2744]|[\u2747]|[\u274c]|[\u274e]|[\u2753-\u2755]|[\u2757]|[\u2764]|[\u2795-\u2797]|[\u27a1]|[\u27b0]|[\u27bf]|[\u2934-\u2935]|[\u2b05-\u2b07]|[\u2b1b-\u2b1c]|[\u2b50]|[\u2b55]|[\u3030]|[\u303d]|[\u3297]|[\u3299]|[\ue50a]|[\u203c]|[\u2049]|[\u2139]|[\u2194-\u2199]|[\u21a9-\u21aa]|[\u231a-\u231b]|[\u23e9-\u23ec]|[\u23f0]|[\u23f3]|[\u24c2]|[\u25aa-\u25ab]|[\u25b6]|[\u25c0]|[\u25fb-\u25fe]|[\u2600-\u2601]|[\u260e]|[\u2611]|[\u2614-\u2615]|[\u261d]|[\u263a]|[\u2648-\u2653]|[\u2660]|[\u2663]|[\u2665-\u2666]|[\u2668]|[\u267b]|[\u267f]|[\u2693]|[\u26a0-\u26a1]|[\u26aa-\u26ab]|[\u26bd-\u26be]|[\u26c4-\u26c5]|[\u26ce]|[\u26d4]|[\u26ea]|[\u26f2-\u26f3]|[\u26f5]|[\u26fa]|[\u26fd]|[\u2702]|[\u2705]|[\u2708-\u270c]|[\u270f])[\uFE00-\uFE0F]?/g;
    e["default"] = t
}), define("vine-ember/utils/emojify", ["exports", "vine-ember/utils/emoji_regex"], function (e, t) {
    "use strict";

    function a(e) {
        for (var a = 0; a < e.length; a++)
            if (e.charCodeAt(a) > 255) return e.replace(t["default"], '<span class="emoji" data-emoji="$1">$1</span>');
        return e
    }
    e["default"] = a
}), define("vine-ember/utils/loop-incrementor", ["exports"], function (e) {
    "use strict";

    function t() {
        clearInterval(s), s = setInterval(n, 1e3 / c)
    }

    function a() {
        clearInterval(s)
    }

    function n() {
        var e = Date.now();
        o.forEach(function (t) {
            var a = (e - t.asOfTime) / 1e3;
            t.count += a * t.velocity, t.asOfTime = e, t.callback(Math.round(t.count))
        })
    }

    function r(e, a, n, r) {
        var i = Math.round(1e6 * Math.random());
        return o.push({
            id: e,
            handle: i,
            count: a,
            velocity: n,
            callback: r,
            asOfTime: Date.now()
        }), (l[e] = l[e] || []).push(o[o.length - 1]), 1 === o.length && t(), i
    }

    function i(e) {
        function t(t) {
            return t.handle === e ? (n = n || t.id, !1) : !0
        }
        var n;
        o = o.filter(t), l[n] && (l[n] = l[n].filter(t), 0 === l[n].length && delete l[n]), 0 === o.length && a()
    }

    function d(e) {
        l[e] && l[e].forEach(function (e) {
            e.callback(Math.round(++e.count))
        })
    }
    var s, c = .5,
        o = [],
        l = {};
    e["default"] = {
        add: r,
        remove: i,
        addLoopTo: d
    }
}), define("vine-ember/utils/service-loader", ["exports"], function (e) {
    "use strict";
    var t = window.requirejs,
        a = window.require,
        n = Ember.Object.extend({
            fixtures: {},
            services: {},
            init: function () {
                this.loadFixtures(), this.loadServices(), Ember.keys(this.get("services")).forEach(function (e) {
                    this.setService(e)
                }.bind(this))
            },
            loadFixtures: function () {
                var e = this.get("fixtures");
                Ember.keys(t._eak_seen).filter(function (e) {
                    return /\/fixtures\/services/.test(e)
                }).forEach(function (t) {
                    var n = t.split("/").slice(4).join("/"),
                        r = a(t, null, null, !0)["default"];
                    e[n] = r
                })
            },
            loadServices: function () {
                var e = this.get("services");
                Ember.keys(t._eak_seen).filter(function (e) {
                    return /^vine-ember\/services/.test(e)
                }).forEach(function (t) {
                    var n = t.split("/").slice(2).join("/"),
                        r = a(t, null, null, !0)["default"];
                    e[n] = r
                })
            },
            setService: function (e) {
                var t = this.get("fixtures"),
                    a = this.get("services");
                return (Ember.testing || window.fixturesMode) && t[e] ? void this.set(e, t[e]) : a[e] ? void this.set(e, a[e]) : void 0
            }
        });
    e["default"] = n
}), define("vine-ember/views/application", ["exports", "ember"], function (e, t) {
    "use strict";
    var a = t["default"].View.extend({
        didInsertElement: function () {
            if (this.bindVisibilityChange(), this.get("controller.hasNotification") && !this.get("controller.isMobile")) {
                var e = $.throttle(10, function () {
                    $(window).scrollTop() > 40 ? t["default"].$("#outer-wrapper").addClass("cover-notification") : t["default"].$("#outer-wrapper").removeClass("cover-notification")
                });
                $(window).bind("scroll", e), $(window).scroll(), this.set("scrollBinding", e)
            }
        },
        willDestroyElement: function () {
            t["default"].$("header").removeClass("cover-notification"), this.get("scrollBinding") && $(window).unbind("scroll", this.get("scrollBinding")), this.get("visibilityChangeEvent") && $(document).unbind(this.get("visibilityChangeEvent"))
        },
        resetMenu: function () {
            this.get("controller.transitioning") && (this.send("hideMobileMenu"), this.send("hideSearchMenu"), this.get("controller").set("transitioning", !1))
        }.observes("controller.transitioning"),
        bindVisibilityChange: function () {
            var e, t;
            "undefined" != typeof document.hidden ? (e = "hidden", t = "visibilitychange") : "undefined" != typeof document.mozHidden ? (e = "mozHidden", t = "mozvisibilitychange") : "undefined" != typeof document.msHidden ? (e = "msHidden", t = "msvisibilitychange") : "undefined" != typeof document.webkitHidden && (e = "webkitHidden", t = "webkitvisibilitychange"), t && ($(document).on(t, function () {
                this.set("controller.isVisible", !document[e])
            }.bind(this)), this.set("controller.isVisible", !document[e]), this.set("visibilityChangeEvent", t))
        },
        actions: {
            toggleMobileMenu: function () {
                var e = this.$(".mobile-menu");
                e.hasClass("expanded") || this.$(".global-search").removeClass("expanded"), e.toggleClass("expanded")
            },
            hideMobileMenu: function () {
                this.$(".mobile-menu").removeClass("expanded")
            },
            toggleSearchMenu: function () {
                var e = this.$(".global-search");
                e.hasClass("expanded") || this.$(".mobile-menu").removeClass("expanded"), e.toggleClass("expanded")
            },
            hideSearchMenu: function () {
                this.$(".global-search input").blur()
            }
        }
    });
    e["default"] = a
}), define("vine-ember/views/current-user", ["exports", "ember"], function (e, t) {
    "use strict";
    var a = t["default"].View.extend({
        templateName: "current-user",
        classNames: "current-user",
        mouseEnter: function () {
            window.clearTimeout(this.get("timeout")), this.$(".user.menu").show()
        },
        mouseLeave: function () {
            this.set("timeout", window.setTimeout(function () {
                this.$(".user.menu").hide()
            }, 100))
        },
        touchStart: function (e) {
            e.target === this.$(".icon")[0] && (e.preventDefault(), e.stopPropagation(), this.$(".user-menu").toggle())
        }
    });
    e["default"] = a
}), define("vine-ember/views/custom-url-input", ["exports", "vine-ember/services/url", "vine-ember/components/my-input"], function (e, t, a) {
    "use strict";
    var n = a["default"].extend({
        name: "url",
        maxlength: "32",
        classNameBindings: ["errorState:error", "availableState:available"],
        input: function () {
            this.sendAction("reset"), this.sendAction("typing", !0)
        },
        valueChanged: $.debounce(200, function () {
            this.sendAction("reset"), this.sendAction("typing", !1);
            var e = this.get("value");
            if (e) {
                if (e.length < 3) return void this.sendAction("error", {
                    response: {
                        error: "URL must be between 3 and 32 characters."
                    }
                });
                this.checkUrl(encodeURIComponent(e))
            }
        }).observes("value"),
        checkUrl: function (e) {
            t["default"].checkUrl(this.get("session.userId"), e).then(function () {
                this.sendAction("available")
            }.bind(this), function (e) {
                this.sendAction("error", e)
            }.bind(this))
        }
    });
    e["default"] = n
}), define("vine-ember/views/explore/list", ["exports", "ember", "vine-ember/views/modal-enabled-post"], function (e, t, a) {
    "use strict";
    var n = a["default"].extend({
        templateName: "explore/list",
        classNameBindings: "controller.listIdClass",
        timeline: t["default"].computed.alias("controller.controllers.index.content")
    });
    e["default"] = n
}), define("vine-ember/views/explore/mobile", ["exports", "ember"], function (e, t) {
    "use strict";
    var a = t["default"].View.extend({
        didInsertElement: function () {
            this.get("session.isAuthenticated") || this._bindScroll()
        },
        _bindScroll: function () {
            t["default"].$("header").addClass("hide-logo");
            var e = function () {
                var e = $(window).scrollTop();
                e > this.$(".logo-image").offset().top + this.$(".logo-image").height() - 45 ? t["default"].$("header").removeClass("hide-logo") : t["default"].$("header").addClass("hide-logo")
            }.bind(this);
            $(window).scroll(e), this.set("scrollBinding", e)
        },
        _unbindScroll: function () {
            this.get("scrollBinding") && (t["default"].$("header").removeClass("hide-logo"), $(window).unbind("scroll", this.get("scrollBinding")))
        },
        sessionChanged: function () {
            this.get("session.isAuthenticated") ? this._unbindScroll() : this._bindScroll()
        }.observes("session.userId"),
        willDestroyElement: function () {
            this._unbindScroll()
        }
    });
    e["default"] = a
}), define("vine-ember/views/explore/pinned-channel", ["exports", "ember"], function (e, t) {
    "use strict";
    var a = t["default"].View.extend({
        templateName: "explore/pinned-channel",
        didInsertElement: function () {
            this._super();
            var e = this.$(".pinned-channel-color").text();
            e = e.replace(/\[\[channelId\]\]/g, this.get("controller.channelIdAttr")), e = e.replace(/\[\[backgroundColor\]\]/g, this.get("controller.channel.backgroundColor")), this.$(".pinned-channel-color").text(e)
        }
    });
    e["default"] = a
}), define("vine-ember/views/explore/posts/one-mobile", ["exports", "vine-ember/views/post-mobile"], function (e, t) {
    "use strict";
    var a = t["default"].extend({
        templateName: "explore/posts/one-mobile"
    });
    e["default"] = a
}), define("vine-ember/views/explore/posts/one", ["exports", "ember", "vine-ember/views/modal-enabled-post"], function (e, t, a) {
    "use strict";
    var n = a["default"].extend({
        tagName: "article",
        classNameBindings: "controller.postIdClass",
        templateName: "explore/posts/one",
        timeline: t["default"].computed.alias("controller.controllers.index.content")
    });
    e["default"] = n
}), define("vine-ember/views/explore/posts/popular-mobile", ["exports", "vine-ember/views/post-mobile"], function (e, t) {
    "use strict";
    var a = t["default"].extend({
        classNames: ["post-mobile", "small"],
        templateName: "explore/posts/popular-mobile"
    });
    e["default"] = a
}), define("vine-ember/views/explore/posts/popular", ["exports", "ember", "vine-ember/views/modal-enabled-post"], function (e, t, a) {
    "use strict";
    var n = a["default"].extend({
        classNames: ["sidebar-video popular-post"],
        classNameBindings: "controller.postIdClass",
        templateName: "explore/posts/popular",
        timeline: t["default"].computed.alias("controller.controllers.index.content")
    });
    e["default"] = n
}), define("vine-ember/views/explore/posts/three", ["exports", "ember", "vine-ember/views/modal-enabled-post"], function (e, t, a) {
    "use strict";
    var n = a["default"].extend({
        classNames: ["post-container"],
        classNameBindings: "controller.postIdClass",
        timeline: t["default"].computed.alias("controller.controllers.index.content")
    });
    e["default"] = n
}), define("vine-ember/views/explore/sidebar-list", ["exports", "vine-ember/views/explore/list"], function (e, t) {
    "use strict";
    var a = t["default"].extend({
        templateName: "explore/sidebar-list"
    });
    e["default"] = a
}), define("vine-ember/views/fullscreen-post", ["exports", "vine-ember/views/post", "vine-ember/mixins/continuous-play-view"], function (e, t, a) {
    "use strict";
    var n = t["default"].extend(a["default"], {
        templateName: "fullscreen-post",
        didInsertElement: function () {
            this.send("resize");
            var e = $.throttle(250, function () {
                this.send("resize")
            }.bind(this));
            $(window).resize(e), this.send("playCurrentVine"), this.$().attr({
                tabindex: 1
            }), this.$().focus()
        },
        willDestroyElement: function () {
            $(window).unbind("resize");
        },
        _doNavRight: $.throttle(500, function () {
            this.get("controller").send("navRight")
        }),
        _doNavLeft: $.throttle(500, function () {
            this.get("controller").send("navLeft")
        }),
        _doToggleMute: $.debounce(200, function () {
            this.get("controller").send("toggleMute")
        }),
        _doTogglePlay: $.debounce(200, function () {
            this.get("controller").send("togglePlay")
        }),
        shouldShowShare: function () {
            return this.get("fbUrl") && this.get("tweetUrl")
        }.property("fbUrl", "tweetUrl"),
        keyDown: $.throttle(100, function (e) {
            switch (e.which) {
            case 39:
                this._doNavRight();
                break;
            case 37:
                this._doNavLeft();
                break;
            case 38:
                this.get("controller").send("like");
                break;
            case 32:
                e.preventDefault(), this._doTogglePlay();
                break;
            case 77:
                this._doToggleMute();
                break;
            case 27:
                this.get("controller").send("closeFullscreen");
                break;
            default:
                return
            }
        }),
        playCurrentVine: function () {
            this.send("gaq", ["_trackEvent", "TV Mode", "play post"]), this.get("controller.playingVine").send("play", this._getVideoObject())
        }.observes("post.postIdStr"),
        actions: {
            resize: function () {
                var e = $(window).height(),
                    t = this.$(".video-container");
                t.height(e), t.width(e), this.get("controller.playingVine.player") && this.get("controller.playingVine.player").setVideoSize(e, e)
            }
        }
    });
    e["default"] = n
}), define("vine-ember/views/grid-post", ["exports", "vine-ember/views/modal-enabled-post"], function (e, t) {
    "use strict";
    var a = t["default"].extend({
        templateName: "grid-post",
        classNames: ["grid", "post"]
    });
    e["default"] = a
}), define("vine-ember/views/index", ["exports", "ember"], function (e, t) {
    "use strict";
    var a = t["default"].View.extend({
        didInsertElement: function () {
            this.get("controller.isMobile") || this.send("bindScroll")
        },
        sessionChanged: function () {
            this.get("session.isAuthenticated") ? (this.set("headerHeight", 178), this.set("searchTop", 75)) : (this.set("headerHeight", 370), this.set("searchTop", 120)), setTimeout(function () {
                $(window).scroll()
            }, 50)
        }.observes("session.isAuthenticated").on("init"),
        willDestroyElement: function () {
            this.send("unbindScroll")
        },
        actions: {
            bindScroll: function () {
                var e = $.throttle(10, function () {
                    var e = $(window).scrollTop();
                    e < this.get("headerHeight") ? (t["default"].$("header, .login-link, .get-app-button").addClass("transparent"), t["default"].$(".fullscreen").addClass("offset")) : (t["default"].$("header, .login-link, .get-app-button").removeClass("transparent"), t["default"].$(".fullscreen").removeClass("offset"));
                    var a = this.$("#search-input"),
                        n = this.get("searchTop");
                    e > n ? a.addClass("transparent") : a.removeClass("transparent");
                    var r = t["default"].$("#explore-header").height(),
                        i = 1 - $(window).scrollTop() / r;
                    t["default"].$("#splash-container, #search-input .search input").css("opacity", i)
                }.bind(this));
                this.set("scrollBinding", e), $(window).scroll(e), $(window).scroll()
            },
            unbindScroll: function () {
                this.get("scrollBinding") && $(window).unbind("scroll", this.get("scrollBinding")), t["default"].$("header, .login-link, .get-app-button").removeClass("transparent")
            }
        }
    });
    e["default"] = a
}), define("vine-ember/views/jobs", ["exports", "ember"], function (e, t) {
    "use strict";
    var a = t["default"].View.extend({
        classNames: ["jobs"],
        players: [],
        didInsertElement: function () {
            this._createPlayerElement(), this.get("controller.isMobile") || (this.bindBulletClicks(), this.bindKeyboardEvents(), this.manageVideoStates(), this.setupPlantParallax(), $(window).on("scroll.jobs", this.manageVideoStates.bind(this))), this.setCarouselSize(), this.setCurrentBullet(), this.setVideoSize(), $(window).on("orientationchange.jobs resize.jobs", this.setCarouselSize.bind(this)), $(window).on("orientationchange.jobs resize.jobs", this.setVideoSize.bind(this)), $(window).scrollTop(0)
        },
        willDestroyElement: function () {
            $(window).off(".jobs"), $(document).off(".jobs")
        },
        setCarouselSize: function () {
            var e = this.$(".jobs-wrapper").width(),
                t = this.$(".perks ul.perk-slides li");
            t.css("width", e)
        },
        setVideoSize: function () {
            var e = 1920,
                t = 960,
                a = this.$(".jobs-wrapper").width();
            this.$(".hero video, .hero embed, .hero").css({
                width: a,
                height: Math.round(a / e * t)
            })
        },
        bindKeyboardEvents: function () {
            $(document).on("keyup.jobs", function (e) {
                (37 === e.keyCode || 39 === e.keyCode) && (this.get("controller").send(37 === e.keyCode ? "prevPerk" : "nextPerk"), this.get("controller").send("resumePerkAnimation"), e.preventDefault(), e.stopPropagation())
            }.bind(this))
        },
        bindBulletClicks: function () {
            this.$(".bullets").click(function (e) {
                this.set("controller.currentPerkIndex", $(e.target).prevAll("div").length), this.get("controller").send("resumePerkAnimation")
            }.bind(this))
        },
        _parallaxEffect: function (e, t, a) {
            t.scrollRange = t.stopsAtScroll - t.startsAtScroll, t.valueRange = t.endValue - t.startValue, $(window).on("scroll.jobs", function () {
                var n = $(window).scrollTop() + $(window).height();
                n < t.startsAtScroll || n > t.stopsAtScroll || (a ? a(e, t, n) : $(e).css(t.property, t.startValue + (n - t.startsAtScroll) / t.scrollRange * t.valueRange))
            })
        },
        setupPlantParallax: function () {
            this.$("*[data-parallax]").toArray().forEach(function (e) {
                this._parallaxEffect(e, JSON.parse(e.getAttribute("data-parallax")))
            }.bind(this))
        },
        _createPlayerElement: function (e) {
            var t = {
                    features: [],
                    plugins: ["flash"],
                    pluginPath: "/assets/swf/",
                    enablePluginSmoothing: !0,
                    flashName: "flashmediaelement.2.swf",
                    startVolume: 0
                },
                a = [];
            a.push({
                element: this.$(".hero video").get(0),
                success: function (e) {
                    $(e).bind("ended", e.setCurrentTime.bind(e, 0)), e.setSrc([{
                        src: this.get("controller.heroVideoUrl"),
                        type: "video/mp4"
                    }]), this.set("controller.heroPlayer", e), $(e).bind("canplay", function () {
                        this.$(".hero-play-button").remove()
                    }.bind(this)), e.setMuted(!0), e.play()
                }.bind(this)
            }), this.$(".vines-all-the-way-down video").toArray().forEach(function (e) {
                a.push({
                    element: e,
                    success: function (e, t) {
                        $(e).bind("ended", e.setCurrentTime.bind(e, 0))
                    }
                })
            }), a.forEach(function (e) {
                var a = $(e.element).parent(),
                    n = Math.max(a.width(), a.height()),
                    r = {
                        defaultVideoWidth: n,
                        defaultVideoHeight: n,
                        success: function (t, a) {
                            this.players.push([t, a]), e.success(t, a)
                        }.bind(this),
                        error: function (e) {
                            window.console.log("Player initialization failed.", e)
                        }
                    };
                window.MediaElement(e.element, $.extend({}, t, r))
            }.bind(this))
        },
        setCurrentBullet: function () {
            var e = this.$(".bullets div");
            if (e) {
                var t = this.get("controller.currentPerkIndex");
                e.removeClass("current").eq(t).addClass("current")
            }
        }.observes("controller.currentPerkIndex"),
        manageVideoStates: function () {
            var e = $(window).scrollTop(),
                t = $(window).height();
            this.players.forEach(function (a) {
                var n = a[0],
                    r = a[1],
                    i = $(r).offset().top,
                    d = $(r).height(),
                    s = i + d > e && e + t > i;
                s ? n.play() : n.pause()
            })
        },
        visibilityChange: function () {
            var e = !this.get("controller.controllers.application.isVisible");
            this.players.forEach(function (t) {
                var a = t[0],
                    n = t[1];
                e ? (n.setAttribute("data-was-paused", a.paused), a.pause()) : ("false" === n.getAttribute("data-was-paused") && a.play(), n.removeAttribute("data-was-paused"))
            })
        }.observes("controller.controllers.application.isVisible"),
        actions: {
            playHeroVideo: function () {
                this.get("controller.heroPlayer").play(), this.$(".hero-play-button").remove()
            }
        }
    });
    e["default"] = a
}), define("vine-ember/views/login", ["exports", "ember"], function (e, t) {
    "use strict";
    var a = t["default"].View.extend({
        classNames: ["login-page"],
        didInsertElement: function () {
            this.get("controller.isMobile") || this.$('input[name="email"]').focus(), this.get("controller").send("gaq", ["_trackEvent", "Login", "page"])
        }
    });
    e["default"] = a
}), define("vine-ember/views/modal-enabled-post", ["exports", "ember"], function (e, t) {
    "use strict";
    var a = t["default"].View.extend({
        timeline: t["default"].computed.alias("controller.parentController.content"),
        click: function (e) {
            $(e.target).is("a, button") || 0 !== $(e.target).closest("a, button").length || this.get("controller").send("openModalView", this.get("timeline"))
        }
    });
    e["default"] = a
}), define("vine-ember/views/modal/base", ["exports", "ember"], function (e, t) {
    "use strict";
    var a = t["default"].View.extend({
        modalContainer: ".modal, .container",
        didInsertElement: function () {
            this.$().attr({
                tabindex: 1
            }), this.$().focus()
        },
        click: function (e) {
            $(e.target).is(this.get("modalContainer")) && this.get("controller").send("hideModal")
        },
        touchStart: function (e) {
            return $(e.target).is(this.$(this.get("modalContainer"))) && this.get("controller").send("hideModal"), !0
        },
        keyDown: function (e) {
            27 === e.which && this.get("controller").send("hideModal")
        }
    });
    e["default"] = a
}), define("vine-ember/views/modal/embed", ["exports", "vine-ember/views/modal/base"], function (e, t) {
    "use strict";
    var a = t["default"].extend({
        didInsertElement: function () {
            $(window).on("message.embed", function (e) {
                if (e.originalEvent.data && e.originalEvent.data.split) {
                    var t = e.originalEvent.data.split("::");
                    if ("ping" === t[0]) e.originalEvent.source.postMessage("pong", "*"), e.originalEvent.source.postMessage("scrolledInToView", "*");
                    else if ("height" === t[0]) {
                        var a = this.$("iframe").get(0);
                        a.style.removeProperty ? a.style.removeProperty("height") : a.style.removeAttribute("height"), a.height = parseInt(t[2], 10)
                    }
                }
            }), this.$("textarea").on("focus", function () {
                this.setSelectionRange(0, 9999), $(this).mouseup(function () {
                    return $(this).unbind("mouseup"), !1
                })
            })
        },
        willDestroyElement: function () {
            $(window).off("message.embed"), this.$("iframe").remove(), this.get("controller").send("hideModal")
        }
    });
    e["default"] = a
}), define("vine-ember/views/modal/flash-error", ["exports", "vine-ember/views/modal/base"], function (e, t) {
    "use strict";
    var a = t["default"].extend({
        classNames: ["modal flash-error"]
    });
    e["default"] = a
}), define("vine-ember/views/modal/job", ["exports", "vine-ember/views/modal/base"], function (e, t) {
    "use strict";
    var a = t["default"].extend();
    e["default"] = a
}), define("vine-ember/views/modal/login", ["exports", "vine-ember/views/modal/base"], function (e, t) {
    "use strict";
    var a = t["default"].extend({
        classNames: ["modal login"],
        didInsertElement: function () {
            this.get("controller").send("gaq", ["_trackEvent", "Login", "modal"]), this.get("controller.controllers.login").send("resetForm")
        }
    });
    e["default"] = a
}), define("vine-ember/views/modal/post", ["exports", "ember", "vine-ember/views/modal/base", "vine-ember/mixins/continuous-play-view"], function (e, t, a, n) {
    "use strict";
    var r = a["default"].extend(n["default"], {
        classNames: ["modal post-navigator"],
        post: t["default"].computed.alias("controller.currentPost"),
        modalContainer: ".permalink-content-wrapper, .permalink-container",
        didInsertElement: function () {
            this.get("controller").send("bindFullscreenListener"), this.send("playCurrentVine"), this._super()
        },
        willDestroyElement: function () {
            this.get("controller").send("unbindFullscreenListener")
        },
        _scrollToElement: function (e) {
            var t = e.offset().top - $(window).height() / 2 + e.height() / 2;
            $("html, body").animate({
                scrollTop: t
            })
        },
        currentPostChanged: function () {
            var e = t["default"].$("." + this.get("controller.currentPost.postIdClass"));
            if (e.length > 0) return void this._scrollToElement(e);
            var a = t["default"].$(".list-" + this.get("controller.currentPost.context.list.timelineIdStr"));
            if (a.length > 0) return void this._scrollToElement(a);
            var n = t["default"].$(".user-" + this.get("controller.currentPost.context.user.userIdStr"));
            n.length > 0 && this._scrollToElement(n)
        }.observes("controller.currentPost"),
        _doNavRight: $.throttle(500, function () {
            this.get("controller").send("navRight")
        }),
        _doNavLeft: $.throttle(500, function () {
            this.get("controller").send("navLeft")
        }),
        _doToggleMute: $.debounce(200, function () {
            this.get("controller").send("toggleMute")
        }),
        _doTogglePlay: $.debounce(200, function () {
            this.get("controller").send("togglePlay")
        }),
        keyDown: $.throttle(100, function (e) {
            if (27 === e.which) return void this.get("controller").send("hideModal");
            if (!this.$("input").is(":focus")) switch (e.which) {
            case 39:
                this._doNavRight();
                break;
            case 37:
                this._doNavLeft();
                break;
            case 32:
                e.preventDefault(), this._doTogglePlay();
                break;
            case 77:
                this._doToggleMute();
                break;
            default:
                return
            }
        })
    });
    e["default"] = r
}), define("vine-ember/views/modal/report", ["exports", "vine-ember/views/modal/base"], function (e, t) {
    "use strict";
    var a = t["default"].extend({
        classNames: ["modal report"],
        willDestroyElement: function () {
            this.get("controller").send("reset")
        },
        isReportChanged: function () {
            var e = this.$(".reasons .row input");
            this.get("controller.isReport") && e && e.first().click()
        }.observes("controller.isReport")
    });
    e["default"] = a
}), define("vine-ember/views/modal/vm", ["exports", "vine-ember/views/modal/base"], function (e, t) {
    "use strict";
    var a = t["default"].extend({
        didInsertElement: function () {
            if (this._bindRecipientsScroll(), this.get("controller").send("reset"), this.get("controller").send("reloadRecipients"), this.get("controller.isMobile")) $(window).scrollTop(0);
            else {
                var e = 100;
                this.$(".vm-modal").css({
                    marginTop: $(window).scrollTop() + e + "px"
                })
            }
        },
        _bindRecipientsScroll: function () {
            var e = this.$(".vm-recipients"),
                t = this.$(".recipients-container"),
                a = $.throttle(10, function () {
                    if (!this.get("controller.paginating")) {
                        var a = t.height() - e.height() - 40;
                        e.scrollTop() > a && (this.get("controller.autocompleteRecipients.length") ? this.get("controller").send("loadAutocompleteResults") : this.get("controller").send("paginateRecipients"))
                    }
                }.bind(this));
            e.bind("scroll", a), this.set("scrollBinding", a)
        },
        modeChanged: function () {
            this.$(".vm-recipients") && this.$(".vm-recipients").scrollTop(0)
        }.observes("controller.isAutocomplete"),
        willDestroyElement: function () {
            this.get("scrollBinding") && this.$(".vm-recipients").unbind("scroll", this.get("scrollBinding"))
        }
    });
    e["default"] = a
}), define("vine-ember/views/permalink-post", ["exports", "ember", "vine-ember/views/post"], function (e, t, a) {
    "use strict";
    var n = a["default"].extend({
        templateName: "permalink-post",
        classNames: ["permalink-post-wrapper"],
        classNameBindings: ["controller.relatedVideosExpanded"],
        isReady: !1,
        didInsertElement: function () {
            this.set("isReady", !0)
        },
        willDestroyElement: function () {
            this.get("controller").send("resetRelatedVideosState")
        },
        shouldOpenEmbedModalChanged: function () {
            if (this.get("isReady")) {
                var e = this.get("controller.shouldOpenEmbedModal") ? "pause" : "play";
                t["default"].run.next(this.send.bind(this, e))
            }
        }.observes("controller.shouldOpenEmbedModal", "isReady"),
        _getVideoObject: function () {
            return {
                view: this,
                post: this.get("controller"),
                el: this.$(".video-container.main"),
                controlEls: this.$(".play, .thumbnail"),
                playerEls: this.$(".vine-player")
            }
        },
        registerWithPlayer: function () {
            if (this.get("isReady") && !this.get("controller.isMobile")) {
                this.get("controller.isModal") || this.get("controller.playingVine").set("endedEvent", function () {
                    this.get("controller").send("showRelatedVideos")
                }.bind(this));
                var e = this._getVideoObject();
                this.get("controller.playingVine").send("videoRendered", e), this.get("controller").set("videoObject", e)
            }
        }.observes("controller.secureVideoUrl", "isReady"),
        postChanged: function () {
            this.get("controller.isMobile") && (this.get("controller.playingVine").send("reset"), this.set("player", void 0), this.rerender())
        }.observes("controller.postIdStr"),
        transitionRelatedVideos: function () {
            if (this.get("controller.triggerRelatedVideosTransition")) {
                this.send("pause"), this.get("controller.playingVine").send("reset"), this.set("isReady", !1), this.get("controller").setProperties({
                    triggerRelatedVideosTransition: !1,
                    transitioningRelatedVideos: !0
                });
                var e = 500,
                    a = this.$(),
                    n = this.$(".related-videos"),
                    r = this.$(".selected-container");
                a.addClass("activated"), n.addClass("fade-posts"), t["default"].run.later(this, function () {
                    n.addClass("activated"), r.css({
                        left: "198px"
                    })
                }, e), t["default"].run.later(this, function () {
                    r.addClass("activated"), r.css({
                        top: 0,
                        left: 0
                    })
                }, e + 100), t["default"].run.later(this, function () {
                    n.addClass("fade-out"), a.removeClass("activated")
                }, 2 * e), t["default"].run.later(this, function () {
                    this.set("isReady", !0), a.removeClass("activated"), n.removeClass("activated").removeClass("fade-out").removeClass("fade-posts"), r.removeClass("activated"), this.set("controller.transitioningRelatedVideos", !1), this.get("controller").send("resetRelatedVideosState")
                }, 3 * e)
            }
        }.observes("controller.triggerRelatedVideosTransition"),
        commentsChanged: function () {
            this.get("isReady") && this.get("controller.comments.dirty") && t["default"].run.scheduleOnce("afterRender", this, function () {
                this.get("controller.commentsExpanded") ? this.send("scrollComments") : this.send("toggleComments"), this.set("controller.comments.dirty", !1)
            }.bind(this))
        }.observes("controller.comments.dirty"),
        collapseComments: function () {
            this.get("controller.commentsExpanded") && this.send("toggleComments")
        }.observes("controller.postIdStr"),
        _doToggleComments: function () {
            var e = this.$(".comments-container");
            if (!e) return void this.set("controller.commentsExpanded", !1);
            var t = [".social-context", ".user-info-new", ".post-description", ".time-location", ".post-engagement", ".engagement-metrics", ".comment"],
                a = 100,
                n = 0;
            this.get("controller.commentsExpanded") || (t.forEach(function (e) {
                n += this.$(e).height()
            }.bind(this)), n = this.$(".card-content").height() - n - a), e.css("height", n + "px"), this.$(".action.comments").toggleClass("active"), this.send("scrollComments"), this.get("controller").toggleProperty("commentsExpanded")
        },
        actions: {
            toggleComments: function () {
                this.get("controller").send("showRelatedVideos"), this.get("controller").send("doAuthenticatedAction", "view comments", this._doToggleComments.bind(this))
            },
            scrollComments: function () {
                this.$(".comments-container").scrollTop(1e3)
            },
            submitComment: function () {
                this.get("controller.commentsExpanded") || this.send("toggleComments"), this.get("controller").send("comment")
            }
        }
    });
    e["default"] = n
}), define("vine-ember/views/playing-vine", ["exports", "ember"], function (e, t) {
    "use strict";
    var a = t["default"].View.extend({
        classNames: ["vine-player"],
        currentTime: -1,
        lastLikeBadgeDegrees: void 0,
        didInsertElement: function () {
            this._createPlayerElement();
            var e = $.throttle(500, function () {
                this.get("controller").send("checkViewport")
            }.bind(this));
            $(window).bind("scroll", e), this.set("scrollBinding", e), this.get("controller.isMobile") && this.$().hide()
        },
        willDestroyElement: function () {
            this.get("scrollBinding") && $(window).unbind("scroll", this.get("scrollBinding")), this.get("healthChecker") && window.clearInterval(this.get("healthChecker"))
        },
        doubleClick: function (e) {
            var a, n = $('<div class="like"><div class="icon-like_stroked"></div></div>'),
                r = this.$(".vine-video-container"),
                i = 44,
                d = e.pageX - r.offset().left - i,
                s = e.pageY - r.offset().top - i;
            if (this.get("lastLikeBadgeDegrees")) {
                var c, o = this.get("lastLikeBadgeDegrees"),
                    l = (o + 30) / 60,
                    h = 1 / 6;
                l > .5 ? (c = 60 * (l - h), a = Math.floor(Math.random() * c) - 30) : (c = 60 * (1 - l - h), a = 60 - Math.floor(Math.random() * c) - 30)
            } else a = Math.floor(60 * Math.random()) - 30;
            n.css({
                top: s,
                left: d,
                transform: "rotate(" + a + "deg)"
            }), r.append(n), this.set("lastLikeBadgeDegrees", a);
            var u = !1,
                p = new RegExp("MSIE ([0-9]{1,}[.0-9]{0,})"),
                m = p.exec(window.navigator.userAgent);
            m && (u = parseFloat(m[1]) < 10), u && t["default"].run.later(this, function () {
                n.fadeOut(6e3)
            }, 180), t["default"].run.later(this, function () {
                n.remove()
            }, 6200);
            var v = this.get("controller.playing.post");
            v && !v.get("liked") && v.send("like")
        },
        _createPlayerElement: function (e) {
            var t = window.navigator.userAgent,
                a = /android/i.test(t),
                n = /ipad/i.test(t),
                r = n || /iphone|ipod/i.test(t),
                i = /MSIE [7-9]/i.test(t),
                d = this.$("video"),
                s = this.get("controller.defaultVideoSize"),
                c = !r && !a;
            this.get("controller").set("displayAudio", c);
            var o = {
                defaultVideoWidth: s,
                defaultVideoHeight: s,
                features: [],
                plugins: ["flash"],
                pluginPath: "/assets/swf/",
                enablePluginSmoothing: !0,
                flashName: "flashmediaelement.2.swf",
                startVolume: 1,
                success: function (t) {
                    this.get("controller.isMobile") || this._initHealthChecker(t), t.needsPhantomFrameFix = "native" !== t.pluginType || i, this.get("controller").send("playerInitialized", t, this.$()), e && this.get("controller").send("play")
                }.bind(this),
                error: function () {
                    this.get("controller").send("gaq", ["_trackEvent", "Post", "video error"]), /firefox/i.test(window.navigator.userAgent) && !window.navigator.mimeTypes["application/x-shockwave-flash"] && this.get("controller").send("showModal", "flash-error")
                }.bind(this)
            };
            window.MediaElement(d[0], o)
        },
        _initHealthChecker: function (e) {
            this.get("healthChecker") && window.clearInterval(this.get("healthChecker"));
            var t = window.setInterval(function () {
                var t = !this.get("controller.loading");
                if (t && !e.paused) {
                    if (e.currentTime === this.get("currentTime")) return void this.send("rebootPlayer");
                    this.set("currentTime", e.currentTime)
                }
            }.bind(this), 1e3);
            this.set("healthChecker", t), this.get("controller.loopSuccessChecker") || this.get("controller").set("loopSuccessChecker", this._loopSuccessChecker.bind(this))
        },
        _loopSuccessChecker: function () {
            var e = this.get("controller.player");
            e.currentTime >= Math.floor(e.duration) && this.send("rebootPlayer"), this.set("currentTime", -1)
        },
        postChanged: function () {
            this.set("currentTime", -1), this.set("controller.loading", !0);
            var e = this.$(".like");
            e && e.remove(), this.set("lastLikeBadgeDegrees", void 0)
        }.observes("controller.playing.post.postIdStr"),
        actions: {
            rebootPlayer: function () {
                var e = '<video preload="auto"><source src="default.mp4" type="video/mp4"></video>';
                this.$(".vine-video-container").html(e), this.get("controller").send("gaq", ["_trackEvent", "Post", "video reboot"]), this.set("controller.forceFallback", !0), this._createPlayerElement(!0)
            }
        }
    });
    e["default"] = a
}), define("vine-ember/views/playlists/grid-list", ["exports", "ember", "vine-ember/views/modal-enabled-post"], function (e, t, a) {
    "use strict";
    var n = a["default"].extend({
        templateName: "playlists/grid-list",
        classNames: ["grid", "post"],
        timeline: t["default"].computed.alias("controller.controllers.playlists.model"),
        didInsertElement: function () {
            this.get("controller.isMobile") && this.$(".video-container").height(this.$(".video-container").width())
        },
        mouseEnter: function () {
            this.get("controller").send("bindFullscreenListener")
        },
        mouseLeave: function () {
            this.get("controller").send("unbindFullscreenListener")
        },
        click: function (e) {
            this._super(e), this.get("controller").send("unbindFullscreenListener"), this.get("controller.isMobile") && this.get("controller").send("routeToList")
        }
    });
    e["default"] = n
}), define("vine-ember/views/post-actions-menu", ["exports", "ember"], function (e, t) {
    "use strict";
    var a = t["default"].View.extend({
        templateName: "post-actions-menu",
        classNames: "more-actions",
        click: function (e) {
            return this.get("controller.onShare") ? (($(e.target).is("li") || $(e.target).closest("li").length) && this.get("controller").send(this.get("controller.onShare")), !0) : void 0
        },
        mouseEnter: function () {
            window.clearTimeout(this.get("timeout")), this.$(".menu").show()
        },
        mouseLeave: function () {
            this.set("timeout", window.setTimeout(function () {
                this.$(".menu").hide()
            }, 100))
        },
        touchStart: function (e) {
            e.target === this.$(".icon")[0] && this.$(".menu").toggle()
        },
        shouldShowPostLink: function () {
            return !this.get("controller.isPermalink") || this.get("controller.parentController.isModal")
        }.property("controller.isPermalink", "controller.parentController.isModal")
    });
    e["default"] = a
}), define("vine-ember/views/post-mobile", ["exports", "vine-ember/views/post"], function (e, t) {
    "use strict";
    var a = t["default"].extend({
        templateName: "post-mobile",
        classNames: ["post-mobile"],
        classNameBindings: ["controller.isPermalink"],
        didInsertElement: function () {
            this._super(), this.send("resizeVideo"), this.send("resizeComments");
            var e = function () {
                this.send("resizeVideo"), this.send("resizeComments")
            }.bind(this);
            if ($(window).resize(e), this.set("resizeBinding", e), this.get("controller.isPermalink") && this.get("controller.playingVine").set("initMobileEvent", function (e) {
                    this.send("bindSharePanelEvent")
                }.bind(this)), this.get("controller.playingVine").send("checkViewport"), this.get("controller.shouldShowMobileInterstitial")) {
                var t = this.$(".mobile-interstitial-controls");
                if (t.css("marginTop", .75 * this.$().width() - t.height()), /iP(hone|ad|od)/.test(navigator.userAgent)) {
                    this.$(".open-in-app").css("display", "block");
                    var a = "vine://post/" + this.get("controller.postIdStr");
                    $(window).on("load", function () {
                        var e = document.createElement("iframe");
                        e.id = "redirect_frame", e.style.display = "none", e.src = a, document.body.appendChild(e), document.body.removeChild(e)
                    })
                }
            }
        },
        _getVideoObject: function () {
            return {
                view: this,
                post: this.get("controller"),
                el: this.$(".video-container"),
                controlEls: this.$(".play, .thumbnail"),
                playerEls: this.$(".vine-player"),
                video: this.$("video")
            }
        },
        willDestroyElement: function () {
            $(window).unbind("resize", this.get("resizeBinding"))
        },
        postChanged: function () {
            this.get("controller.playingVine").send("reset"), this.set("player", void 0), this.rerender()
        }.observes("controller.postIdStr"),
        canShowRelatedVideosChanged: function () {
            this.get("controller.canShowRelatedVideos") && this.send("expandSharePanel")
        }.observes("controller.canShowRelatedVideos"),
        actions: {
            resizeVideo: function () {
                var e = this.$(".video-container");
                if (e.is(":visible")) {
                    var t = this.$(".video-container").width();
                    this.set("controller.videoHeight", t)
                } else this.set("controller.videoHeight", void 0)
            },
            resizeComments: function () {
                this.$(".comment input").width(this.$(".card-content").width() - 15)
            },
            bindSharePanelEvent: function (e) {
                e = e || this.get("player"), $(e).bind("webkitendfullscreen", function () {
                    this.get("controller").send("showRelatedVideos")
                }.bind(this))
            },
            expandSharePanel: function () {
                return this.get("controller.canShowRelatedVideos") ? (this.$(".share-panel").show(), this.$(".share-panel").addClass("activated"), this.send("pause"), void this.set("sharePanelExpanded", !0)) : void this.get("controller").send("showRelatedVideos")
            },
            collapseSharePanel: function () {
                this.$(".share-panel").removeClass("activated"), this.get("controller").send("trackRelatedVideoEvent", "collapseMobile"), this.set("sharePanelExpanded", !1)
            },
            pause: function () {
                this._super(), this.get("controller.hasRelatedVideos") && this.get("controller").send("showRelatedVideos")
            },
            hideMobileInterstitial: function () {
                this.$(".mobile-interstitial").hide(), this.get("controller").send("hideMobileInterstitial"), this.send("play")
            }
        }
    });
    e["default"] = a
}), define("vine-ember/views/post", ["exports", "ember"], function (e, t) {
    "use strict";
    var a = t["default"].View.extend({
        templateName: "post",
        classNames: ["post"],
        didInsertElement: function () {
            this.get("controller").send("videoRendered", this._getVideoObject())
        },
        _getVideoObject: function () {
            return {
                view: this,
                post: this.get("controller"),
                el: this.$(".video-container")
            }
        },
        actions: {
            toggleShare: function () {
                this.$(".share-overlay").fadeToggle(), this.$(".action.share").toggleClass("active")
            },
            play: function () {
                var e = null;
                if (this.get("controller.playingVine.playing") && (e = this.get("controller.playingVine.playing.el").closest(".post").attr("id")), this.$(".video-container")) {
                    var t = this.$(".video-container").closest(".post").attr("id");
                    e !== t && this.get("controller.playingVine").send("play", this._getVideoObject())
                }
            },
            pause: function () {
                var e = null;
                this.get("controller.playingVine.playing") && (e = this.get("controller.playingVine.playing.el").closest(".post").attr("id"));
                var t = this.$(".video-container").closest(".post").attr("id");
                e === t && this.get("controller.playingVine").send("pause", this._getVideoObject())
            }
        }
    });
    e["default"] = a
}), define("vine-ember/views/promo/camera", ["exports", "ember"], function (e, t) {
    "use strict";
    var a = t["default"].View.extend({
        didInsertElement: function () {
            this._bindHeros();
            var e = $.throttle(10, function () {
                var e = $(window).scrollTop();
                e > this.$("#promo-header").height() ? (this.get("controller").send("stopVideo"), $("#outer-wrapper").addClass("show-header")) : $("#outer-wrapper").removeClass("show-header")
            }.bind(this));
            $(window).scroll(e), this.set("scrollBinding", e);
            var t = $.throttle(10, function () {
                this.send("resizeHeader")
            }.bind(this));
            t(), $(window).bind("resize", t), this.set("resize", t)
        },
        willDestroyElement: function () {
            this.get("fadeInterval") && window.clearInterval(this.get("fadeInterval")), this.get("scrollBinding") && $(window).unbind("scroll", this.get("scrollBinding")), this.get("resizeBinding") && $(window).unbind("resize", this.get("resizeBinding")), $("#outer-wrapper").removeClass("show-header")
        },
        _bindHeros: function () {
            this.get("fadeInterval") && window.clearInterval(this.get("fadeInterval"));
            var e, t = this.$(".hero"),
                a = 0;
            t.hide(), t.first().show();
            var n = window.setInterval(function () {
                e = (a + 1) % t.length, t.eq(e).css({
                    zIndex: 1
                }).show(), t.eq(a).css({
                    zIndex: 2
                }).fadeOut(1e3), a = e
            }, 2e3);
            this.setProperties("fadeInterval", n)
        },
        _bindPlayer: function () {
            function e(e) {
                var r = JSON.parse(e.data);
                switch (r.event) {
                case "ready":
                    if (t.data("bound")) return;
                    t[0].contentWindow.postMessage({
                        method: "addEventListener",
                        value: "finish"
                    }, a), t.attr({
                        "data-bound": !0
                    });
                    break;
                case "finish":
                    n.send("stopVideo")
                }
            }
            window.addEventListener ? window.addEventListener("message", e, !1) : window.attachEvent("onmessage", e, !1);
            var t = this.$(".iframe-container iframe"),
                a = window.location.protocol + t.attr("src").split("?")[0],
                n = this.get("controller")
        },
        videoPlayChanged: function () {
            this.send("resizeHeader", !0), this.get("controller.isPlaying") ? t["default"].run.scheduleOnce("afterRender", function () {
                this._bindPlayer()
            }.bind(this)) : t["default"].run.scheduleOnce("afterRender", function () {
                this._bindHeros()
            }.bind(this))
        }.observes("controller.isPlaying"),
        actions: {
            playVideo: function () {
                var e = this.get("controller");
                e.send("scrollToTop"), this.$(".header-content").fadeOut(500, function () {
                    e.send("playVideo")
                })
            },
            resizeHeader: function (e) {
                var t = this.$("#promo-header"),
                    a = $("#outer-wrapper.promo-camera");
                if (t && a) {
                    var n = a.width();
                    if (!this.get("controller.isPlaying") || n > 1280) return t.removeAttr("style"), void a.removeAttr("style");
                    var r = Math.floor(n / 2) + "px",
                        i = {
                            height: r
                        },
                        d = {
                            "padding-top": r
                        };
                    e && n > 605 && (t.animate(i, 500), a.animate(d, 500)), t.css(i), a.css(d)
                }
            }
        }
    });
    e["default"] = a
}), define("vine-ember/views/related-videos/playing-vine", ["exports", "vine-ember/views/playing-vine"], function (e, t) {
    "use strict";
    var a = t["default"].extend({
        templateName: "playing-vine",
        didInsertElement: function () {
            this.get("controller.isMobile") || this._createPlayerElement()
        }
    });
    e["default"] = a
}), define("vine-ember/views/related-videos/post", ["exports", "ember"], function (e, t) {
    "use strict";
    var a = t["default"].View.extend({
        templateName: "related-videos/post",
        classNames: "related-post",
        isMobile: t["default"].computed.alias("controller.isMobile"),
        didInsertElement: function () {
            return this.$("a").css("color", this.get("userColor")), this.$(".avatar-new img").css("border", "2px solid " + this.get("userColor")), this.get("controller.canShow") ? void this._transitionPost() : void this.set("useCanShowBinding", !0)
        },
        userColor: function () {
            var e = this.get("context.backgroundColor"),
                t = "#333333";
            return e && e !== t ? e : "#00bf8f"
        }.property("context.backgroundColor"),
        _transitionPost: function () {
            var e = this.$(),
                a = 70 * this.get("context.renderIndex");
            $("<img>").attr("src", this.get("context.secureThumbnailUrl")).load(function () {
                t["default"].run.later(function () {
                    e.addClass("pin-left")
                }, a)
            })
        },
        canShowChanged: function () {
            this.get("useCanShowBinding") && this.get("controller.canShow") && this._transitionPost()
        }.observes("controller.canShow"),
        click: function (e) {
            if ($(e.target).hasClass("vine-audio")) return !0;
            if (!this.get("isMobile")) {
                var a = this.$().offset(),
                    n = this.$().closest(".related-videos").offset(),
                    r = a.top - n.top,
                    i = a.left - n.left;
                t["default"].$(".selected-container").css({
                    top: r + "px",
                    left: i + "px"
                })
            }
            t["default"].$(".share-panel").hide();
            var d = this.get("context.index");
            this.get("controller").send("select", d)
        }
    });
    e["default"] = a
}), define("vine-ember/views/search-input", ["exports", "ember", "vine-ember/components/my-input"], function (e, t, a) {
    "use strict";
    var n = a["default"].extend({
        didInsertElement: function () {
            this._super(), this.get("autofocus") && this.$().focus()
        },
        valueChanged: $.debounce(200, function () {
            this.sendAction("queryChanged")
        }).observes("value"),
        focusIn: function () {
            var e = this.$();
            e[0].setSelectionRange(0, 9999), e.on("mouseup", function (t) {
                t.preventDefault(), e.off("mouseup")
            })
        },
        focusOut: function () {
            t["default"].$(".global-search").removeClass("expanded")
        }
    });
    e["default"] = n
}), define("vine-ember/views/search/modules/base", ["exports", "ember"], function (e, t) {
    "use strict";
    var a = t["default"].View.extend({
        type: "index",
        click: function (e) {
            var t = "a, button, .module-pagination";
            $(e.target).is(t) || 0 !== $(e.target).closest(t).length || this.get("controller").transitionToRoute("search." + this.get("type"), this.get("controller.query"))
        }
    });
    e["default"] = a
}), define("vine-ember/views/search/modules/tags", ["exports", "vine-ember/views/search/modules/base"], function (e, t) {
    "use strict";
    var a = t["default"].extend({
        type: "tags"
    });
    e["default"] = a
}), define("vine-ember/views/search/modules/users", ["exports", "vine-ember/views/search/modules/base"], function (e, t) {
    "use strict";
    var a = t["default"].extend({
        type: "users"
    });
    e["default"] = a
}), define("vine-ember/views/search/modules/venues", ["exports", "vine-ember/views/search/modules/base"], function (e, t) {
    "use strict";
    var a = t["default"].extend({
        type: "venues"
    });
    e["default"] = a
}), define("vine-ember/views/search/posts", ["exports", "ember"], function (e, t) {
    "use strict";
    var a = t["default"].View.extend({
        layoutName: "search/posts"
    });
    e["default"] = a
}), define("vine-ember/views/splash", ["exports", "ember", "vine-ember/mixins/continuous-play-view"], function (e, t, a) {
    "use strict";
    var n = t["default"].View.extend(a["default"], {
        templateName: "splash",
        classNames: "splash",
        post: t["default"].computed.alias("controller.currentPost"),
        didInsertElement: function () {
            this.get("controller").send("bindFullscreenListener"), this.send("playCurrentVine");
            var e, t = window.navigator.userAgent;
            if (t.match(/iPhone/i) || t.match(/iPad/i) || t.match(/iPod/i) ? e = "apple" : t.match(/Android/i) || t.match(/KF/) ? e = "android" : t.match(/Windows Phone/i) && (e = "windows"), e && (this.$(".download-buttons a").hide(), this.$('a[data-device="' + e + '"]').show()), !this.get("controller").get("isMobile")) {
                var a = $.throttle(250, function () {
                    this.send("resize")
                }.bind(this));
                $(window).resize(a), $(window).trigger("resize"), this.get("controller").send("forceMute")
            }
        },
        willDestroyElement: function () {
            $(window).unbind("resize"), this.get("controller").send("restoreMute")
        },
        actions: {
            resize: function () {
                var e = this.$(".vine-video-container > video, .vine-video-container > div, .thumbnail"),
                    t = this.$(".video-container, .video-poster");
                if (e) {
                    var a = this.$("#splash-container").width(),
                        n = this.$("#splash-container").height(),
                        r = Math.max(a, n);
                    if (e.height(r), e.width(r), this.get("controller.playingVine.player") && this.get("controller.playingVine.player").setVideoSize(r, r), r > a) {
                        var i = Math.floor((a - r) / 2);
                        t.css("background-position", i + "px 0"), e.css("left", i + "px")
                    }
                    if (r > n) {
                        var d = Math.floor((n - r) / 2);
                        t.css("top", "0 " + d + "px"), e.css("top", d + "px")
                    }
                }
            }
        }
    });
    e["default"] = n
}), define("vine-ember/views/splash/playing-vine", ["exports", "vine-ember/views/playing-vine"], function (e, t) {
    "use strict";
    var a = t["default"].extend({
        templateName: "playing-vine",
        didInsertElement: function () {
            this._createPlayerElement()
        }
    });
    e["default"] = a
}), define("vine-ember/views/tag", ["exports", "vine-ember/views/timeline"], function (e, t) {
    "use strict";
    var a = t["default"].extend();
    e["default"] = a
}), define("vine-ember/views/timeline", ["exports", "ember"], function (e, t) {
    "use strict";
    var a = t["default"].View.extend({
        hasHeader: t["default"].computed.alias("controller.hasHeader"),
        didInsertElement: function () {
            this.hasHeaderChanged()
        },
        willDestroyElement: function () {
            this.send("reset")
        },
        modeChanged: function () {
            this.send("scrollToCurrentPost"), this.get("hasHeader") && this.send("manageFullscreenClassing")
        }.observes("controller.mode"),
        hasHeaderChanged: function () {
            this.get("hasHeader") ? (this.send("bindTimelineHeaderScroll"), this.send("manageFullscreenClassing")) : this.send("reset")
        }.observes("hasHeader"),
        actions: {
            scrollToCurrentPost: function () {
                !this.get("controller.isTvMode") && this.$() && t["default"].run.scheduleOnce("afterRender", this, function () {
                    var e = this.get("controller.videoIndex") + 1,
                        t = this.$(".post:nth-of-type(" + e + ")"),
                        a = 20;
                    t.length && $(window).scrollTop(t.offset().top - $("header").height() - a)
                })
            },
            bindTimelineHeaderScroll: function () {
                this.get("controller.isMobile") || this.get("controller.controllers.application").setProperties({
                    headerVisible: !0,
                    hasHeader: !0
                })
            },
            manageFullscreenClassing: function () {
                this.$() && this.$().closest(".timeline-content").toggleClass("is-fullscreen", this.get("controller.isTvMode"))
            },
            reset: function () {
                this.$() && this.$().closest(".timeline-content").removeClass("is-fullscreen"), this.get("controller.controllers.application").setProperties({
                    headerVisible: !1,
                    hasHeader: !1
                })
            }
        }
    });
    e["default"] = a
}), define("vine-ember/views/vm-post", ["exports", "ember", "vine-ember/views/post"], function (e, t, a) {
    "use strict";
    var n = a["default"].extend({
        classNames: ["permalink-post-wrapper"],
        templateName: "vm-post",
        didInsertElement: function () {
            this._super(), $("#outer-wrapper.vm-post .permalink-post-wrapper").css("background", this.get("controller.profileColor")), this.get("controller.isMobile") && $("#outer-wrapper.vm-post").css("background", this.get("controller.profileColor")), this._setAppBannerColor();
            var e = this.get("controller.playingVine");
            if (e.set("forceUnmute", !0), this.get("controller.isMobile")) {
                var t = function () {
                    this.$(".video-container").height(this.$(".video-container").width())
                }.bind(this);
                $(window).bind("resize", t).resize(), this.set("resizeBinding", t), this.get("controller.playingVine").send("checkViewport")
            }
            this.get("controller.expired") || this._super()
        },
        _getVideoObject: function () {
            return {
                view: this,
                post: this.get("controller"),
                el: this.$(".video-container"),
                controlEls: this.$(".play, .thumbnail"),
                playerEls: this.$(".vine-player"),
                video: this.$("video")
            }
        },
        willDestroyElement: function () {
            $("#outer-wrapper.vm-post").removeAttr("style"), t["default"].$(".app-banner").css("background", "#00bf8f"), this.get("resizeBinding") && $(window).unbind("resize", this.get("resizeBinding"))
        },
        _setAppBannerColor: function () {
            this.get("controller.confirmation") ? t["default"].$(".app-banner").css("background", "black") : t["default"].$(".app-banner").css("background", this.get("controller.profileColor"))
        }.observes("controller.confirmation")
    });
    e["default"] = n
}), define("vine-ember/config/environment", ["ember"], function (e) {
    var t = "vine-ember";
    try {
        var a = t + "/config/environment",
            n = e["default"].$('meta[name="' + a + '"]').attr("content"),
            r = JSON.parse(unescape(n));
        return {
            "default": r
        }
    } catch (i) {
        throw new Error('Could not read config from meta tag with name "' + a + '".')
    }
}), runningTests ? require("vine-ember/tests/test-helper") : require("vine-ember/app")["default"].create({
    name: "vine-ember",
    version: "2.0.0."
});